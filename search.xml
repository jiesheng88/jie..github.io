<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【面试-MySQL】MySQL高级优化</title>
      <link href="/2021/04/25/mian-shi-mysql-mysql-gao-ji-you-hua/"/>
      <url>/2021/04/25/mian-shi-mysql-mysql-gao-ji-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="1-MySQL环境"><a href="#1-MySQL环境" class="headerlink" title="1 MySQL环境"></a>1 MySQL环境</h2><h3 id="1-1-环境安装"><a href="#1-1-环境安装" class="headerlink" title="1.1 环境安装"></a>1.1 环境安装</h3><pre class=" language-shell"><code class="language-shell"># 查看Linux服务器上是否安装过MySQLrpm -qa | grep -i mysql # 查询出所有mysql依赖包# 1、拉取镜像docker pull mysql:5.7# 2、创建实例并启动docker run -p 3306:3306 --name mysql \-v /root/mysql/log:/var/log/mysql \-v /root/mysql/data:/var/lib/mysql \-v /root/mysql/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=333 \-d mysql:5.7# 3、mysql配置 /root/mysql/conf/my.conf[client]#mysqlde utf8字符集默认为3位的，不支持emoji表情及部分不常见的汉字，故推荐使用utf8mb4default-character-set=utf8[mysql]default-character-set=utf8[mysqld]#设置client连接mysql时的字符集,防止乱码init_connect='SET collation_connection = utf8_general_ci'init_connect='SET NAMES utf8'#数据库默认字符集character-set-server=utf8#数据库字符集对应一些排序等规则，注意要和character-set-server对应collation-server=utf8_general_ci# 跳过mysql程序起动时的字符参数设置 ，使用服务器端字符集设置skip-character-set-client-handshake# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！skip-name-resolve# 4、重启mysql容器docker restart mysql# 5、进入到mysql容器docker exec -it mysql /bin/bash# 6、查看修改的配置文件cat /etc/mysql/my.conf</code></pre><h3 id="1-2-安装位置"><a href="#1-2-安装位置" class="headerlink" title="1.2 安装位置"></a>1.2 安装位置</h3><p><code>Docker</code>容器就是一个小型的<code>Linux</code>环境，进入到<code>MySQL</code>容器中。</p><pre class=" language-shell"><code class="language-shell">docker exec -it mysql /bin/bash</code></pre><p><code>Linux</code>环境下<code>MySQL</code>的安装目录。</p><table><thead><tr><th>路径</th><th>解释</th></tr></thead><tbody><tr><td><code>/var/lib/mysql</code></td><td>MySQL数据库文件存放位置</td></tr><tr><td><code>/usr/share/mysql</code></td><td>错误消息和字符集文件配置</td></tr><tr><td><code>/usr/bin</code></td><td>客户端程序和脚本</td></tr><tr><td><code>/etc/init.d/mysql</code></td><td>启停脚本相关</td></tr></tbody></table><h3 id="1-3-修改字符集"><a href="#1-3-修改字符集" class="headerlink" title="1.3 修改字符集"></a>1.3 修改字符集</h3><pre class=" language-shell"><code class="language-shell"># 1、进入到mysql数据库并查看字符集# show variables like 'character%';# show variables like '%char%';mysql> show variables like 'character%';+--------------------------+----------------------------+| Variable_name            | Value                      |+--------------------------+----------------------------+| character_set_client     | utf8                       || character_set_connection | utf8                       || character_set_database   | utf8                       || character_set_filesystem | binary                     || character_set_results    | utf8                       || character_set_server     | utf8                       || character_set_system     | utf8                       || character_sets_dir       | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.00 sec)mysql> show variables like '%char%';+--------------------------+----------------------------+| Variable_name            | Value                      |+--------------------------+----------------------------+| character_set_client     | utf8                       || character_set_connection | utf8                       || character_set_database   | utf8                       || character_set_filesystem | binary                     || character_set_results    | utf8                       || character_set_server     | utf8                       || character_set_system     | utf8                       || character_sets_dir       | /usr/share/mysql/charsets/ |+--------------------------+----------------------------+8 rows in set (0.01 sec)</code></pre><p><code>MySQL5.7</code>配置文件位置是<code>/etc/my.cnf</code>或者<code>/etc/mysql/my.cnf</code>，如果字符集不是<code>utf-8</code>直接进入配置文件修改即可。</p><pre class=" language-shell"><code class="language-shell">[client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]# 设置client连接mysql时的字符集,防止乱码init_connect='SET NAMES utf8'init_connect='SET collation_connection = utf8_general_ci'# 数据库默认字符集character-set-server=utf8#数据库字符集对应一些排序等规则，注意要和character-set-server对应collation-server=utf8_general_ci# 跳过mysql程序起动时的字符参数设置 ，使用服务器端字符集设置skip-character-set-client-handshake# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。但需要注意，如果开启该选项，则所有远程主机连接授权都要使用IP地址方式，否则MySQL将无法正常处理连接请求！skip-name-resolve</code></pre><p><strong>注意：安装<code>MySQL</code>完毕之后，第一件事就是修改字符集编码。</strong></p><h3 id="1-4-配置文件"><a href="#1-4-配置文件" class="headerlink" title="1.4 配置文件"></a>1.4 配置文件</h3><p><strong><code>MySQL</code>配置文件讲解：<a href="https://www.cnblogs.com/gaoyuechen/p/10273102.html" target="_blank" rel="noopener">https://www.cnblogs.com/gaoyuechen/p/10273102.html</a></strong></p><p>1、二进制日志<code>log-bin</code>：主从复制。</p><pre class=" language-shell"><code class="language-shell"># my,cnf# 开启mysql binlog功能log-bin=mysql-bin</code></pre><p>2、错误日志<code>log-error</code>：默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等。</p><pre class=" language-shell"><code class="language-shell"># my,cnf# 数据库错误日志文件log-error = error.log</code></pre><p>3、查询日志<code>log</code>：默认关闭，记录查询的<code>sql</code>语句，如果开启会降低<code>MySQL</code>整体的性能，因为记录日志需要消耗系统资源。</p><pre class=" language-shell"><code class="language-shell"># my,cnf# 慢查询sql日志设置slow_query_log = 1slow_query_log_file = slow.log</code></pre><p>4、数据文件。</p><ul><li><code>frm文件</code>：存放表结构。</li><li><code>myd</code>文件：存放表数据。</li><li><code>myi</code>文件：存放表索引。</li></ul><pre class=" language-shell"><code class="language-shell"># mysql5.7 使用.frm文件来存储表结构# 使用 .ibd文件来存储表索引和表数据-rw-r-----  1 mysql mysql   8988 Jun 25 09:31 pms_category.frm-rw-r-----  1 mysql mysql 245760 Jul 21 10:01 pms_category.ibd</code></pre><p><code>MySQL5.7</code>的<code>Innodb</code>存储引擎可将所有数据存放于<code>ibdata*</code>的共享表空间，也可将每张表存放于独立的<code>.ibd</code>文件的独立表空间。<br>共享表空间以及独立表空间都是针对数据的存储方式而言的。</p><ul><li>共享表空间: 某一个数据库的所有的表数据，索引文件全部放在一个文件中，默认这个共享表空间的文件路径在<code>data</code>目录下。 默认的文件名为<code>:ibdata1</code> 初始化为<code>10M</code>。</li><li>独立表空间: 每一个表都将会生成以独立的文件方式来进行存储，每一个表都有一个<code>.frm</code>表描述文件，还有一个<code>.ibd</code>文件。 其中这个文件包括了单独一个表的数据内容以及索引内容，默认情况下它的存储位置也是在表的位置之中。在配置文件<code>my.cnf</code>中设置： <code>innodb_file_per_table</code>。</li></ul><h2 id="2-MySQL逻辑架构"><a href="#2-MySQL逻辑架构" class="headerlink" title="2 MySQL逻辑架构"></a>2 MySQL逻辑架构</h2><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525165216.jpg" alt="MySQL逻辑架构" style="zoom:80%;" /><ul><li><p><code>Connectors</code>：指的是不同语言中与SQL的交互。</p></li><li><p><code>Connection Pool</code>：管理缓冲用户连接，线程处理等需要缓存的需求。<strong>MySQL数据库的连接层。</strong></p></li><li><p><code>Management Serveices &amp; Utilities</code>：系统管理和控制工具。备份、安全、复制、集群等等。</p></li><li><p><code>SQL Interface</code>：接受用户的SQL命令，并且返回用户需要查询的结果。</p></li><li><p><code>Parser</code>：SQL语句解析器。</p></li><li><p><code>Optimizer</code>：查询优化器，SQL语句在查询之前会使用查询优化器对查询进行优化。<strong>就是优化客户端请求query</strong>，根据客户端请求的 query 语句，和数据库中的一些统计信息，在一系列算法的基础上进行分析，得出一个最优的策略，告诉后面的程序如何取得这个 query 语句的结果。<strong>For Example</strong>： <code>select uid,name from user where gender = 1;</code>这个<code>select</code>查询先根据<code>where</code>语句进行选取，而不是先将表全部查询出来以后再进行<code>gender</code>过滤；然后根据<code>uid</code>和<code>name</code>进行属性投影，而不是将属性全部取出以后再进行过滤。最后将这两个查询条件联接起来生成最终查询结果。</p></li><li><p><code>Caches &amp; Buffers</code>：查询缓存。</p></li><li><p><code>Pluggable Storage Engines</code>：<strong>存储引擎接口。MySQL区别于其他数据库的最重要的特点就是其插件式的表存储引擎(注意：存储引擎是基于表的，而不是数据库)。</strong></p></li><li><p><code>File System</code>：数据落地到磁盘上，就是文件的存储。</p></li></ul><p>MySQL数据库和其他数据库相比，MySQL有点与众不同，主要体现在存储引擎的架构上，<strong>插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取相分离</strong>。这种架构可以根据业务的需求和实际需求选择合适的存储引擎。</p><blockquote><p>逻辑架构分层</p></blockquote><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525165317.png" alt="MySQL逻辑架构分层" style="zoom:80%;" /><ul><li>连接层：最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于<code>tcp/ip</code>的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于<code>SSL</code>的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li><li>服务层：MySQL的核心服务功能层，该层是MySQL的核心，包括查询缓存，解析器，解析树，预处理器，查询优化器。主要进行查询解析、分析、查询缓存、内置函数、存储过程、触发器、视图等，select操作会先检查是否命中查询缓存，命中则直接返回缓存数据，否则解析查询并创建对应的解析树。</li><li>引擎层：存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</li><li>存储层：数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</li></ul><h3 id="2-1-查询流程"><a href="#2-1-查询流程" class="headerlink" title="2.1 查询流程"></a>2.1 查询流程</h3><p>mysql 的查询流程大致是：</p><ol><li>mysql 客户端通过协议与 mysql 服务器建连接，发送查询语句，先检查查询缓存，如果命中，直接返回结果，否则进行语句解析,也就是说，在解析查询之前，服务器会先访问查询缓存(query cache)——它存储 SELECT 语句以及相应的查询结果集。如果某个查询结果已经位于缓存中，服务器就不会再对查询进行解析、优化、以及执行。它仅仅将缓存中的结果返回给用户即可，这将大大提高系统的性能。</li><li>语法解析器和预处理：首先 mysql 通过关键字将 SQL 语句进行解析，并生成一颗对应的“解析树”。mysql 解析器将使用 mysql 语法规则验证和解析查询；预处理器则根据一些 mysql 规则进一步检查解析数是否合法。</li><li>查询优化器当解析树被认为是合法的了，并且由优化器将其转化成执行计划。一条查询可以有很多种执行方式，最后都返回相同的结果。优化器的作用就是找到这其中最好的执行计划。</li><li>然后，mysql 默认使用的 BTREE 索引，并且一个大致方向是:无论怎么折腾 sql，至少在目前来说，mysql 最多只用到表中的一个索引。</li></ol><h2 id="3-存储引擎"><a href="#3-存储引擎" class="headerlink" title="3 存储引擎"></a>3 存储引擎</h2><p><code>show engines;</code>命令查看MySQL5.7支持的存储引擎。</p><pre class=" language-shell"><code class="language-shell">mysql> show engines;</code></pre><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210526213816.png" alt="存储引擎" style="zoom:80%;" /><p><code>show variables like &#39;default_storage_engine%&#39;;</code>查看当前数据库正在使用的存储引擎。</p><pre class=" language-shell"><code class="language-shell">mysql> show variables like 'default_storage_engine%';+------------------------+--------+| Variable_name          | Value  |+------------------------+--------+| default_storage_engine | InnoDB |+------------------------+--------+1 row in set (0.01 sec)</code></pre><blockquote><p>InnoDB和MyISAM对比</p></blockquote><table><thead><tr><th align="left">对比项</th><th align="center">MyISAM</th><th align="center">InnoDB</th></tr></thead><tbody><tr><td align="left">主外键</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="left">事务</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="left">行表锁</td><td align="center">表锁，即使操作一条记录也会锁住整张表，<strong>不适合高并发操作</strong></td><td align="center">行锁，操作时只锁某一行，不对其他行有影响，<strong>适合高并发操作</strong></td></tr><tr><td align="left">缓存</td><td align="center">只缓存索引，不缓存真实数据</td><td align="center">不仅缓存索引还要缓存真实数据，対内存要求较高，而且内存大小対性能有决定性影响</td></tr><tr><td align="left">表空间</td><td align="center">小</td><td align="center">大</td></tr><tr><td align="left">关注点</td><td align="center">性能</td><td align="center">事务</td></tr><tr><td align="left">默认安装</td><td align="center">Y</td><td align="center">Y</td></tr></tbody></table><h2 id="4-SQL性能下降的原因"><a href="#4-SQL性能下降的原因" class="headerlink" title="4 SQL性能下降的原因"></a>4 SQL性能下降的原因</h2><ul><li>查询语句写的差。</li><li>索引失效：索引建了，但是没有用上。</li><li>关联 查询太多<code>join</code>（设计缺陷或者不得已的需求）。</li><li>服务器调优以及各个参数的设置（缓冲、线程数等）。</li></ul><h2 id="5-SQL执行顺序"><a href="#5-SQL执行顺序" class="headerlink" title="5 SQL执行顺序"></a>5 SQL执行顺序</h2><p>手写的顺序：</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210508210749.png" style="zoom:80%;" /><p>真正执行的顺序：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210508210829.png" alt=""></p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210508210907.png" style="zoom:80%;" /><pre class=" language-shell"><code class="language-shell">select              # 5    ... from                # 1    ... where               # 2    .... group by            # 3    ... having              # 4    ... order by            # 6    ... limit               # 7    [offset]</code></pre><h2 id="6-七种JOIN理论"><a href="#6-七种JOIN理论" class="headerlink" title="6 七种JOIN理论"></a>6 七种JOIN理论</h2><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509201309.png" alt="INNER JOIN"></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle 与 MySQL 写法一致 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509202122.png" alt="LEFT JOIN"></p><p>LEFT JOIN是以左表的记录为基础的，它的结果集是A表中的全部数据，再加上A表和B表匹配后的数据。换句话说,左表(A)的记录将会全部表示出来，而右表(B)只会显示符合搜索条件的记录。B表无对应数据的地方均为NULL。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle 与 MySQL 写法一致 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509202645.png" alt="RIGHT JOIN"></p><p>和LEFT JOIN的结果刚好相反，是以右表(B)为基础的。它的结果集是B表所有记录，再加上A和B匹配后的数据。 A表无对应数据的地方均为NULL。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle 与 MySQL 写法一致 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509202934.png" alt=""></p><p>LEFT JOIN 去掉其中B表为null的部分</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle 与 MySQL 写法一致 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509203138.png" alt=""></p><p>RIGHT JOIN 去掉其中A表为null的部分</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle 与 MySQL 写法一致 */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509203445.png" alt="FULL JOIN"></p><p>全外连接（FULL OUTER JOIN/FULL JOIN）：左表和右表都不做限制，所有的记录都显示，两表不足的地方均为NULL。</p><p>MySQL中UNION 操作符：用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中，<font color=#FF0000 >多个 SELECT 语句会删除重复的数据。</font></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token comment" spellcheck="true">/* MySQL不支持全关联，只能实现左右关联，可以根据LEFT JOIN + RIGHT JOIN 来实现FULL JOIN (2+3) */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509204120.png" alt=""></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* Oracle */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">FULL</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* MySQL不支持FULL OUTER JOIN这种语法 可以改成 (4+5) */</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token keyword">UNION</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>select_list<span class="token operator">></span> <span class="token keyword">FROM</span> TableA A <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> TableB B <span class="token keyword">ON</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token keyword">WHERE</span> A<span class="token punctuation">.</span><span class="token keyword">Key</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span></code></pre><h2 id="7-索引"><a href="#7-索引" class="headerlink" title="7 索引"></a>7 索引</h2><h3 id="7-1-索引简介"><a href="#7-1-索引简介" class="headerlink" title="7.1 索引简介"></a>7.1 索引简介</h3><blockquote><p>索引是什么？</p></blockquote><p>MySQL官方对索引的定义为：<strong>索引（INDEX）是帮助MySQL高效获取数据的数据结果。</strong></p><p>从而可以获得索引的本质：<font color=#FF0000 ><strong>索引是排好序的快速查找数据结构。</strong></font></p><p>索引的目的在于提高查询效率，可以类比字典的目录。如果要查<code>mysql</code>这个这个单词，我们肯定要先定位到<code>m</code>字母，然后从上往下找<code>y</code>字母，再找剩下的<code>sql</code>。如果没有索引，那么可能需要<code>a---z</code>，这样全字典扫描，如果我想找<code>Java</code>开头的单词呢？如果我想找<code>Oracle</code>开头的单词呢？？？</p><p><strong>重点：索引会影响到MySQL<font color=#FF0000 >查找(WHERE的查询条件)</font>和<font color=#FF0000 >排序(ORDER BY)</font>两大功能！</strong></p><p><strong>除了数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法，这种数据结构就是索引。</strong></p><p>一般来说，索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p><pre class=" language-shell"><code class="language-shell"># Linux下查看磁盘空间命令 df -h [root@Ringo ~]# df -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        40G   16G   23G  41% /devtmpfs        911M     0  911M   0% /devtmpfs           920M     0  920M   0% /dev/shmtmpfs           920M  480K  920M   1% /runtmpfs           920M     0  920M   0% /sys/fs/cgroupoverlay          40G   16G   23G  41% </code></pre><p>我们平时所说的索引，如果没有特别指明，都是指B树（多路搜索树，并不一定是二叉的）结构组织的索引。其中聚集索引，次要索引，覆盖索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种数据结构的索引之外，还有哈希索引（Hash Index）等。</p><blockquote><p>索引的优势和劣势</p></blockquote><p>优势：</p><ul><li><font color=#0000FF >查找</font>：类似大学图书馆的书目索引，提高数据检索的效率，降低数据库的IO成本。</li><li><font color=#0000FF >排序</font>：通过索引対数据进行排序，降低数据排序的成本，降低了CPU的消耗。</li></ul><p>劣势：</p><ul><li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要<strong>占用空间</strong>的。</li><li>虽然索引大大提高了查询速度，但是同时<font color=#FF0000 >会降低表的更新速度</font>，例如对表频繁的进行<code>INSERT</code>、<code>UPDATE</code>和<code>DELETE</code>。因为更新表的时候，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加的索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</li><li>索引只是提高效率的一个因素，如果MySQL有大数据量的表，就需要花时间研究建立最优秀的索引。</li></ul><h3 id="7-2-MySQL索引数据结构"><a href="#7-2-MySQL索引数据结构" class="headerlink" title="7.2 MySQL索引数据结构"></a>7.2 MySQL索引数据结构</h3><p>索引数据结构：</p><ul><li><code>B-tree</code>索引。</li><li><code>Hash</code>索引。</li><li><code>Full-text</code>全文索引。</li><li><code>R-Tree</code>索引。</li></ul><p><code>B-tree</code>索引检索原理：</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525165637.png" alt="B-tree" style="zoom:80%;" /><p>一颗 b 树，浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块 1 包含数据项 17 和 35，包含指针 P1、P2、P3。</p><ul><li>P1 表示小于 17 的磁盘块，P2 表示在 17 和 35 之间的磁盘块，P3 表示大于 35 的磁盘块。</li><li><strong>真实的数据存在于叶子节点</strong>即 3、5、9、10、13、15、28、29、36、60、75、79、90、99。</li><li><strong>非叶子节点只不存储真实的数据</strong>，<strong>只存储指引搜索方向的数据项</strong>，如 17、35 并不真实存在于数据表中。</li></ul><p><code>B+tree</code>索引检索原理：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210509210725.png" alt="B+tree"></p><p>B+Tree 与 B-Tree 的区别：</p><ol><li>B-树的关键字和记录是放在一起的，叶子节点可以看作外部节点，不包含任何信息；B+树的非叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。</li><li>在 B-树中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；而 B+树中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点中还要再比较关键字。从这个角度看 B-树的性能好像要比 B+树好，而在实际应用中却是 B+树的性能要好些。因为 <font color=#0000FF >B+树的非叶子节点不存放实际的数据，这样每个节点可容纳的元素个数比 B-树多，树高比 B-树小，这样带来的好处是减少磁盘访问次数。</font>尽管 B+树找到一个记录所需的比较次数要比 B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可能还会好些，而且 B+树的叶子节点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所有文件，一个表中的所有记录等），这也是很多数据库和文件系统使用 B+树的缘故。</li></ol><blockquote><p>思考：为什么说 B+树比 B-树更适合实际应用中操作系统的文件索引和数据库索引？</p></blockquote><ul><li><p><strong>B+树的磁盘读写代价更低</strong></p><p>B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对 B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说 IO 读写次数也就降低了。</p></li><li><p><strong>B+树的查询效率更加稳定</strong></p><p>由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p></li></ul><h3 id="7-3-MySQL索引分类"><a href="#7-3-MySQL索引分类" class="headerlink" title="7.3 MySQL索引分类"></a>7.3 MySQL索引分类</h3><p>索引分类：</p><ul><li>单值索引：一个索引只包含单个列，一个表可以有多个单列索引。</li><li>唯一索引：索引列的值必须唯一，但是允许空值。</li><li>复合索引：一个索引包含多个字段。</li></ul><p><strong>建议：一张表建的索引最好不要超过5个！</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 基本语法 */</span><span class="token comment" spellcheck="true">/* 1、创建索引 [UNIQUE]可以省略*/</span><span class="token comment" spellcheck="true">/* 如果只写一个字段就是单值索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_表名_列名 <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 唯一索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_表名_列名 <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 多个字段就是复合索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_列名1_列名<span class="token number">2</span> <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 2、删除索引 */</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexName<span class="token punctuation">]</span> <span class="token keyword">ON</span> tabName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3、查看索引 */</span><span class="token comment" spellcheck="true">/* 加上\G就可以以列的形式查看了 不加\G就是以表的形式查看 */</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> tabName \G<span class="token punctuation">;</span></code></pre><p>使用<code>ALTER</code>命令来为数据表添加索引</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 1、该语句添加一个主键，这意味着索引值必须是唯一的，并且不能为NULL */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 2、该语句创建索引的键值必须是唯一的(除了NULL之外，NULL可能会出现多次) */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> indexName<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 3、该语句创建普通索引，索引值可以出现多次 */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> indexName<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 4、该语句指定了索引为FULLTEXT，用于全文检索 */</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> tabName <span class="token keyword">ADD</span> FULLTEXT indexName<span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-4-哪些情况需要建索引"><a href="#7-4-哪些情况需要建索引" class="headerlink" title="7.4 哪些情况需要建索引"></a>7.4 哪些情况需要建索引</h3><ul><li>主键自动建立主键索引（唯一 + 非空）。</li><li><font color=#FF0000 >频繁作为查询条件的字段</font>应该创建索引。</li><li>查询中与其他表关联的字段，<font color=#FF0000 >外键关系建立索引</font>。</li><li><font color=#FF0000 >查询中排序的字段</font>，排序字段若通过索引去访问将大大提高排序速度。</li><li>查询中<font color=#FF0000 >统计或者分组字段</font>（group by也和索引有关）。</li></ul><h3 id="7-5-那些情况不要建索引"><a href="#7-5-那些情况不要建索引" class="headerlink" title="7.5 那些情况不要建索引"></a>7.5 那些情况不要建索引</h3><ul><li><p>记录太少的表。</p></li><li><p>经常增删改的表。</p></li><li><p>频繁更新的字段不适合创建索引。</p></li><li><p>Where条件里用不到的字段不创建索引。</p></li><li><p>过滤性不好的不适合建索引。</p><p>假如一个表有10万行记录，有一个字段A只有true和false两种值，并且每个值的分布概率大约为50%，那么对A字段建索引一般不会提高数据库的查询速度。<font color=#0000FF >索引的选择性是指索引列中不同值的数目与表中记录数的比。</font>如果一个表中有2000条记录，表索引列有1980个不同的值，那么这个索引的选择性就是1980/2000=0.99。<font color=#FF0000 >一个索引的选择性越接近于1，这个索引的效率就越高。</font></p></li></ul><h2 id="8-性能分析"><a href="#8-性能分析" class="headerlink" title="8 性能分析"></a>8 性能分析</h2><h3 id="8-1-EXPLAIN简介"><a href="#8-1-EXPLAIN简介" class="headerlink" title="8.1 EXPLAIN简介"></a>8.1 EXPLAIN简介</h3><blockquote><p>EXPLAIN是什么？</p></blockquote><p>EXPLAIN：SQL的执行计划，使用EXPLAIN关键字可以<strong>模拟优化器执行SQL查询语句</strong>，从而知道MySQL是如何处理SQL语句的。</p><blockquote><p>EXPLAIN怎么使用？</p></blockquote><p>语法：<code>explain</code> + <code>SQL</code>。</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510110706.png" alt="EXPLAIN执行后返回的信息"></p><pre class=" language-shell"><code class="language-shell">mysql> explain select * from pms_category \G;*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 1425     filtered: 100.00        Extra: NULL1 row in set, 1 warning (0.00 sec)</code></pre><blockquote><p>EXPLAIN能干嘛？</p></blockquote><p>可以查看以下信息：</p><ul><li><code>id</code>：select 查询的序列号，表示查询中执行 select 子句或操作表的顺序。</li><li><code>select_type</code>：数据读取操作的操作类型。</li><li><code>possible_keys</code>：哪些索引可以使用。</li><li><code>key</code>：哪些索引被实际使用。</li><li><code>ref</code>：表之间的引用。</li><li><code>rows</code>：每张表有多少行被优化器查询。</li></ul><h3 id="8-2-EXPLAIN字段"><a href="#8-2-EXPLAIN字段" class="headerlink" title="8.2 EXPLAIN字段"></a>8.2 EXPLAIN字段</h3><blockquote><p><font color=#FF0000 ><code>id</code></font></p></blockquote><p><code>id</code>：查询中执行 select 子句或操作表的顺序。</p><p>值有以下三种情况：</p><ul><li><code>id</code>相同，执行顺序由上至下。</li><li><code>id</code>不同，如果是子查询，id的序号会递增，<strong>id值越大优先级越高，越先被执行。</strong></li><li><code>id</code>相同不同情况同时存在。<strong>永远是id大的优先级最高，id相等的时候顺序执行。</strong></li></ul><p><strong><em>Tips：</em></strong><font color=#FF0000 >id 号每个号码，表示一趟独立的查询。一个 sql 的查询趟数越少越好。</font></p><blockquote><p>select_type</p></blockquote><p><code>select_type</code>：数据查询的类型，主要是用于区别，普通查询、联合查询、子查询等的复杂查询。</p><table><thead><tr><th align="center"><code>select_type</code>属性</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center"><code>SIMPLE</code></td><td align="center">简单的<code>SELECT</code>查询，查询中不包含子查询或者<code>UNION</code>。(<font color=#0000FF >单表查询</font>)</td></tr><tr><td align="center"><code>PRIMARY</code></td><td align="center">查询中如果包含任何复杂的子部分，<font color=#0000FF >最外层查询</font>则被标记为<code>PRIMARY</code>。</td></tr><tr><td align="center"><code>DERIVED</code></td><td align="center">在<font color=#0000FF ><code>FROM</code>子句中包含的子查询</font>被标记为<code>DERIVED(衍生)</code>，MySQL会递归执行这些子查询，把结果放在临时表中。</td></tr><tr><td align="center"><code>SUBQUERY</code></td><td align="center">在<font color=#0000FF ><code>SELECT</code>或者<code>WHERE</code>子句</font>中包含了子查询。<font color=#0000FF >where子句后面是单个值</font></td></tr><tr><td align="center"><code>DEPEDENT SUBQUERY</code></td><td align="center">在<font color=#0000FF ><code>SELECT</code>或<code>WHERE</code>列表中</font>包含了子查询,子查询基于外层。<font color=#0000FF >where子句后面是一组值</font></td></tr><tr><td align="center"><code>UNCACHEABLE SUBQUERY</code></td><td align="center">无法使用缓存的子查询，<font color=#0000FF >当使用了@@来引用系统变量的时候，不会使用缓存。</font></td></tr><tr><td align="center"><code>UNION</code></td><td align="center">如果第二个<code>SELECT</code>出现在<code>UNION</code>之后，则被标记为<code>UNION</code>；若<code>UNION</code>包含在<code>FROM</code>子句的子查询中，外层<code>SELECT</code>将被标记为<code>DERIVED</code>。</td></tr><tr><td align="center"><code>UNION RESULT</code></td><td align="center"><code>从</code>UNION<code>表获取结果的</code>SELECT`。</td></tr></tbody></table><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510112306.png" alt="PRIMARY DERIVED"></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510144954.png" alt="SUBQUERY"></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510145227.png" alt=" DEPENDENT SUBQUERY"></p><p><strong><em>Tips：</em></strong><font color=#FF0000 ><code>SUBQUERY</code>与<code>DEPEDENT SUBQUERY</code>的区别：都是 where 后面的条件，subquery 是单个值，dependent subquery 是一组值。</font></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510150457.png" alt="UNION"></p><blockquote><p><font color='red'><code>type</code></font></p></blockquote><p><code>type</code>：访问类型排列。是较为重要的一个指标。</p><p><strong>从最好到最差依次是：</strong><font color=#FF0000 ><code>system</code>&gt;<code>const</code>&gt;<code>eq_ref</code>&gt;<code>ref</code>&gt;<code>range</code>&gt;<code>index</code>&gt;<code>ALL</code>。</font>除了<code>ALL</code>没有用到索引，其他级别都用到索引了。</p><p>一般来说，得保证<font color=#0000FF >查询至少达到<code>range</code>级别，最好达到<code>ref</code>。</font></p><ul><li><code>system</code>：表只有一行记录（等于系统表），这是<code>const</code>类型的特例，平时不会出现，这个也可以忽略不计。</li><li><code>const</code>：表示通过索引一次就找到了，<code>const</code>用于比较<font color=#0000FF ><code>primary key</code>或者<code>unique</code>索引</font>。因为只匹配一行数据，所以很快。如将主键置于<code>where</code>列表中，MySQL就能将该查询转化为一个常量。</li><li><code>eq_ref</code>：<font color=#0000FF >唯一性索引扫描</font>，读取本表中和关联表表中的每行组合成的一行，查出来只有一条记录。除 了 <code>system</code> 和<code>const</code> 类型之外, 这是最好的联接类型。</li><li><code>ref</code>：<font color=#0000FF >非唯一性索引扫描</font>，返回本表和关联表<font color=#0000FF >某个值匹配的所有行</font>，查出来有多条记录。</li><li><code>range</code>：只检索给定范围的行，一般就是<font color=#0000FF >在<code>WHERE</code>语句中出现了<code>BETWEEN</code>、<code>&lt; &gt;</code>、<code>in</code>等的查询</font>。这种范围扫描索引比全表扫描要好，因为它只需要开始于索引树的某一点，而结束于另一点，不用扫描全部索引。</li><li><code>index</code>：<code>Full Index Scan</code>，全索引扫描。出现index是sql使用了索引但是<font color=#FF0000 >没有通过索引进行过滤</font>，一般是使用了<font color=#FF0000 >覆盖索引</font>或者是<font color=#FF0000 >利用索引进行了排序分组。</font>            </li><li><code>ALL</code>：<code>Full Table Scan</code>，没有用到索引，全表扫描。</li></ul><p><strong><em>Tips：</em></strong><code>index</code>和<code>ALL</code>的区别：<code>index</code>类型只遍历索引树。<strong>也就是说虽然<code>ALL</code>和<code>index</code>都是读全表，但是<code>index</code>是从索引中读的，<code>ALL</code>是从磁盘中读取的。</strong></p><blockquote><p><font color='red'>possible_keys 和 key</font></p></blockquote><p><code>possible_keys</code>：显示可能应用在这张表中的索引，一个或者多个。查询涉及到的字段上若存在索引，则该索引将被列出，<strong>但不一定被查询实际使用。</strong></p><p><code>key</code>：实际使用的索引。如果为<code>NULL</code>，则没有使用索引。查询中如果使用了覆盖索引，则该索引仅仅出现在<code>key</code>列表中。</p><blockquote><p>key_len</p></blockquote><p><code>key_len</code>：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。<code>key_len</code>显示的值为索引字段的最大可能长度，并非实际使用长度，即<code>key_len</code>是根据表定义计算而得，不是通过表内检索出的。在不损失精度的情况下，长度越短越好。</p><p><code>key_len</code>计算规则：<strong><a href="https://blog.csdn.net/qq_34930488/article/details/102931490" target="_blank" rel="noopener">https://blog.csdn.net/qq_34930488/article/details/102931490</a></strong></p><pre class=" language-shell"><code class="language-shell">mysql> desc pms_category;+---------------+------------+------+-----+---------+----------------+| Field         | Type       | Null | Key | Default | Extra          |+---------------+------------+------+-----+---------+----------------+| cat_id        | bigint(20) | NO   | PRI | NULL    | auto_increment || name          | char(50)   | YES  |     | NULL    |                || parent_cid    | bigint(20) | YES  |     | NULL    |                || cat_level     | int(11)    | YES  |     | NULL    |                || show_status   | tinyint(4) | YES  |     | NULL    |                || sort          | int(11)    | YES  |     | NULL    |                || icon          | char(255)  | YES  |     | NULL    |                || product_unit  | char(50)   | YES  |     | NULL    |                || product_count | int(11)    | YES  |     | NULL    |                |+---------------+------------+------+-----+---------+----------------+9 rows in set (0.00 sec)mysql> explain select cat_id from pms_category where cat_id between 10 and 20 \G;*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: rangepossible_keys: PRIMARY          key: PRIMARY  # 用到了主键索引，通过查看表结构知道，cat_id是bigint类型，占用8个字节      key_len: 8        # 这里只用到了cat_id主键索引，所以长度就是8！          ref: NULL         rows: 11     filtered: 100.00        Extra: Using where; Using index1 row in set, 1 warning (0.00 sec)</code></pre><blockquote><p><font color='red'><code>ref</code></font></p></blockquote><p><code>ref</code>：显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</p><blockquote><p>rows</p></blockquote><p><code>rows</code>：根据表统计信息及索引选用情况，大致估算出找到所需的记录需要读取的行数。<strong>越少越好！</strong></p><blockquote><p>Extra</p></blockquote><p><code>Extra</code>：包含不适合在其他列中显示但十分重要的额外信息。</p><ul><li><font color='red'><code>Using filesort</code></font>：说明MySQL会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。<strong>MySQL中无法利用索引完成的排序操作成为”文件内排序”。</strong></li><li><strong>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度。</strong></li></ul><pre class=" language-shell"><code class="language-shell"># 排序没有使用索引mysql> explain select name from pms_category where name='Tangs' order by cat_level \G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: refpossible_keys: idx_name_parentCid_catLevel          key: idx_name_parentCid_catLevel      key_len: 201          ref: const         rows: 1     filtered: 100.00        Extra: Using where; Using index; Using filesort1 row in set, 1 warning (0.00 sec)#~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~# 排序使用到了索引mysql> explain select name from pms_category where name='Tangs' order by parent_cid,cat_level\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: refpossible_keys: idx_name_parentCid_catLevel          key: idx_name_parentCid_catLevel      key_len: 201          ref: const         rows: 1     filtered: 100.00        Extra: Using where; Using index1 row in set, 1 warning (0.00 sec)</code></pre><ul><li><p><font color='red'><code>Using temporary</code></font>：使用了临时表保存中间结果，MySQL在対查询结果排序时使用了临时表。常见于<font color=#FF0000 >排序<code>order by</code>和分组查询<code>group by</code>。</font><strong>临时表対系统性能损耗很大。</strong></p></li><li><p><font color='red'><code>Using index</code></font>：表示<font color='red'>相应的<code>SELECT</code>操作中使用了覆盖索引，避免访问了表的数据行</font>，效率不错！如果同时出现<code>Using where</code>，表示索引被用来执行索引键值的查找；如果没有同时出现<code>Using where</code>，表明索引用来读取数据而非执行查找动作。</p></li></ul><pre class=" language-shell"><code class="language-shell"># 覆盖索引# 就是select的数据列只用从索引中就能够取得，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。# 注意：如果要使用覆盖索引，一定不能写SELECT *，要写出具体的字段。mysql> explain select cat_id from pms_category \G;*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: pms_category   partitions: NULL         type: indexpossible_keys: NULL                 key: PRIMARY      key_len: 8          ref: NULL         rows: 1425     filtered: 100.00        Extra: Using index   # select的数据列只用从索引中就能够取得，不必从数据表中读取   1 row in set, 1 warning (0.00 sec)</code></pre><ul><li><code>Using where</code>：表明使用了<code>WHERE</code>过滤。</li><li><code>Using join buffer</code>：使用了连接缓存。</li><li><code>impossible where</code>：<code>WHERE</code>子句的值总是false，不能用来获取任何元组。</li></ul><pre class=" language-shell"><code class="language-shell">mysql> explain select name from pms_category where name = 'zs' and name = 'ls'\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: NULL   partitions: NULL         type: NULLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: NULL     filtered: NULL        Extra: Impossible WHERE   # 不可能字段同时查到两个名字1 row in set, 1 warning (0.00 sec)</code></pre><h2 id="9-索引分析"><a href="#9-索引分析" class="headerlink" title="9 索引分析"></a>9 索引分析</h2><h3 id="9-1-单表索引分析"><a href="#9-1-单表索引分析" class="headerlink" title="9.1 单表索引分析"></a>9.1 单表索引分析</h3><blockquote><p>数据准备</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'作者id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>category_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类id'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>views<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'被查看的次数'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>comments<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'回帖的备注'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>title<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'标题'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>content<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'正文内容'</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'文章'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>article<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>author_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>category_id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>views<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>comments<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>title<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>content<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>案例：查询<code>category_id</code>为1且<code>comments</code>大于1的情况下，<code>views</code>最多的<code>article_id</code>。</p></blockquote><p>1、编写SQL语句并查看SQL执行计划。</p><pre class=" language-shell"><code class="language-shell"># 1、sql语句SELECT id,author_id FROM article WHERE category_id = 1 AND comments > 1 ORDER BY views DESC LIMIT 1;# 2、sql执行计划mysql> EXPLAIN SELECT id,author_id FROM article WHERE category_id = 1 AND comments > 1 ORDER BY views DESC LIMIT 1\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: article   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 5     filtered: 20.00        Extra: Using where; Using filesort  # 产生了文件内排序，需要优化SQL1 row in set, 1 warning (0.00 sec)</code></pre><p>2、创建索引<code>idx_article_ccv</code>。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_article_ccv <span class="token keyword">ON</span> article<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>comments<span class="token punctuation">,</span>views<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>3、查看当前索引。</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525165812.png" alt="show index" /><p>4、查看现在SQL语句的执行计划。</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525165918.png" alt="explain" style="zoom:80%;" /><p>我们发现，创建符合索引<code>idx_article_ccv</code>之后，虽然解决了全表扫描的问题，但是在<code>order by</code>排序的时候没有用到索引，MySQL居然还是用的<code>Using filesort</code>，为什么？</p><p>5、我们试试把SQL修改为<code>SELECT id,author_id FROM article WHERE category_id = 1 AND comments = 1 ORDER BY views DESC LIMIT 1;</code>看看SQL的执行计划。</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170012.png" alt="explain" /><p>推论：当<code>comments &gt; 1</code>的时候<code>order by</code>排序<code>views</code>字段索引就用不上，但是当<code>comments = 1</code>的时候<code>order by</code>排序<code>views</code>字段索引就可以用上！！！<strong>所以，<font color='blue'>范围之后的索引会失效</font>。</strong></p><p>6、我们现在知道<strong>范围之后的索引会失效</strong>，原来的索引<code>idx_article_ccv</code>最后一个字段<code>views</code>会失效，那么我们如果删除这个索引，创建<code>idx_article_cv</code>索引呢？？？？</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 创建索引 idx_article_cv */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_article_cv <span class="token keyword">ON</span> article<span class="token punctuation">(</span>category_id<span class="token punctuation">,</span>views<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>查看当前的索引</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170114.png" alt="Show Index"></p><p>7、当前索引是<code>idx_article_cv</code>，来看一下SQL执行计划。</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170209.png" alt="explain"></p><h3 id="9-2-两表索引分析"><a href="#9-2-两表索引分析" class="headerlink" title="9.2 两表索引分析"></a>9.2 两表索引分析</h3><blockquote><p>数据准备</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>class<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类'</span> <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品类别'</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>book<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>bookid<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类'</span><span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'书籍'</span><span class="token punctuation">;</span></code></pre><blockquote><p>两表连接查询的SQL执行计划</p></blockquote><p>1、不创建索引的情况下，SQL的执行计划。</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170306.png" alt="explain"></p><p><code>book</code>和<code>class</code>两张表都是没有使用索引，全表扫描，那么如果进行优化，索引是创建在<code>book</code>表还是创建在<code>class</code>表呢？下面进行大胆的尝试！</p><p>2、左表(<code>book</code>表)创建索引。</p><p>创建索引<code>idx_book_card</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 在book表创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_book_card <span class="token keyword">ON</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>book</code>表中有<code>idx_book_card</code>索引的情况下，查看SQL执行计划</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170353.png" alt="explain"></p><p>3、删除<code>book</code>表的索引，右表(<code>class</code>表)创建索引。</p><p>创建索引<code>idx_class_card</code></p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 在class表创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_class_card <span class="token keyword">ON</span> class<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在<code>class</code>表中有<code>idx_class_card</code>索引的情况下，查看SQL执行计划</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170423.png" alt="explain"></p><p><strong>由此可见，<font color='red'>左连接将索引创建在右表上更合适，右连接将索引创建在左表上更合适</font>。</strong></p><p><strong><em>tips：</em></strong></p><ul><li>在优化关联查询时，只有在<font color='blue'>被驱动表上建立索引才有效</font>！</li><li><font color='red'><code>left join</code> 时，左侧的为驱动表，右侧为被驱动表！</font></li><li><code>inner join</code> 时，mysql 会自己帮你把<font color='red'>小结果集的表选为驱动表</font>。</li></ul><blockquote><p>案例</p></blockquote><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511205227.png" alt=""></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511205242.png" alt=""></p><p>上述两个案例，第一个查询效率较高，且有优化的余地。第二个案例中，子查询作为被驱动表，由于子查询是虚表，无法建立索引，因此不能优化。</p><p><strong><em>tips：</em></strong></p><ul><li><font color='red'>子查询尽量不要放在被驱动表</font>，有可能使用不到索引；</li><li><code>left join</code>时，尽量让<font color='blue'>实体表作为被驱动表</font>。</li><li>能够<font color='blue'>直接多表关联的尽量直接关联</font>，不用子查询！</li></ul><h3 id="9-3-三张表索引分析"><a href="#9-3-三张表索引分析" class="headerlink" title="9.3 三张表索引分析"></a>9.3 三张表索引分析</h3><blockquote><p>数据准备</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>phone<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>phone_id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>card<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> UNSIGNED <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'分类'</span> <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'手机'</span><span class="token punctuation">;</span></code></pre><blockquote><p>三表连接查询SQL优化</p></blockquote><p>1、不加任何索引，查看SQL执行计划。</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170522.png" alt="explain"></p><p>2、根据两表查询优化的经验，左连接需要在右表上添加索引，所以尝试在<code>book</code>表和<code>phone</code>表上添加索引。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 在book表创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_book_card <span class="token keyword">ON</span> book<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 在phone表上创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_phone_card <span class="token keyword">ON</span> phone<span class="token punctuation">(</span>card<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>再次执行SQL的执行计划</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170555.png" alt="explain"></p><h3 id="9-4-结论"><a href="#9-4-结论" class="headerlink" title="9.4 结论"></a>9.4 结论</h3><p><code>JOIN</code>语句的优化：</p><ul><li><p><strong><font color='red'>左连接将索引创建在右表上更合适，右连接将索引创建在左表上更合适</font>。</strong></p></li><li><p>尽可能减少<code>JOIN</code>语句中的<code>NestedLoop</code>（嵌套循环）的总次数：<font color='red'><strong>永远都是小的结果集驱动大的结果集</strong>。</font></p></li><li><p>优先优化<code>NestedLoop</code>的内层循环。</p></li><li><p>保证<code>JOIN</code>语句中被驱动表上<code>JOIN</code>条件字段已经被索引。</p></li><li><p>当无法保证被驱动表的<code>JOIN</code>条件字段被索引且内存资源充足的前提下，不要太吝惜<code>Join Buffer</code> 的设置。</p></li></ul><h2 id="10-单表使用索引常见的索引失效"><a href="#10-单表使用索引常见的索引失效" class="headerlink" title="10 单表使用索引常见的索引失效"></a>10 单表使用索引常见的索引失效</h2><blockquote><p>数据准备</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'职位'</span><span class="token punctuation">,</span><span class="token punctuation">`</span>add_time<span class="token punctuation">`</span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'入职时间'</span><span class="token punctuation">)</span><span class="token keyword">COMMENT</span> <span class="token string">'员工记录表'</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'Ringo'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'manager'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'dev'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 创建索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_staffs_name_age_pos <span class="token keyword">ON</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><font color='red'>索引失效的情况</font></p></blockquote><ul><li>全值匹配我最爱。</li><li>最佳左前缀法则。</li><li>不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描。</li><li>索引中范围条件右边的字段会全部失效。</li><li>尽量使用覆盖索引（只访问索引的查询，索引列和查询列一致），减少<code>SELECT *</code>。</li><li>MySQL在使用<code>!=</code>或者<code>&lt;&gt;</code>的时候无法使用索引会导致全表扫描。</li><li><code>is null</code>、<code>is not null</code>也无法使用索引。</li><li><code>like</code>以通配符开头<code>%abc</code>索引失效会变成全表扫描。</li><li>字符串不加单引号索引失效。</li><li>少用<code>or</code>，用它来连接时会索引失效。</li></ul><h3 id="10-1-全值匹配我最爱"><a href="#10-1-全值匹配我最爱" class="headerlink" title="10.1 全值匹配我最爱"></a>10.1 全值匹配我最爱</h3><pre class=" language-mysql"><code class="language-mysql"># 创建的索引如下所示CREATE INDEX idx_age_deptid_name ON emp(age,deptid,NAME);</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510165417.png" alt="全值匹配我最爱"></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510165800.png" alt=""></p><p><strong><em>Tips：</em></strong></p><ul><li>全值匹配我最爱指的是，<font color='red'>查询的字段按照顺序在索引中都可以匹配到！</font></li><li>当<font color='red'>查询字段的数量与索引中字段的数量一致</font>时，SQL中查询字段的顺序，跟使用索引中字段的顺序，没有关系。优化器会在不影响 SQL执行结果的前提下，给你自动地优化。</li></ul><h3 id="10-2-最佳左前缀法则"><a href="#10-2-最佳左前缀法则" class="headerlink" title="10.2 最佳左前缀法则"></a>10.2 最佳左前缀法则</h3><pre class=" language-mysql"><code class="language-mysql"># 创建的索引如下所示CREATE INDEX idx_age_deptid_name ON emp(age,deptid,NAME);</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510170510.png" alt="最佳作前缀法则"></p><p><strong><em>Tips：</em></strong></p><ul><li><font color='blue'>查询字段与索引字段顺序的不同</font>会导致，<font color='purple'>索引无法充分使用，甚至索引失效</font>！</li><li>使用复合索引，需要遵循最佳左前缀法则。查询<font color='red'>从索引的最左前列开始并且不跳过索引中的列</font>。</li><li><strong>过滤条件要使用索引必须按照索引建立时的顺序，依次满足，一旦跳过某个字段，索引后面的字段都无法被使用。</strong></li></ul><p><strong>口诀：</strong></p><ul><li><strong><font color='red'>带头大哥不能死，中间兄弟不能断</font></strong></li></ul><blockquote><p>案例</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 用到了idx_staffs_name_age_pos索引中的name字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 用到了idx_staffs_name_age_pos索引中的name, age字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 用到了idx_staffs_name_age_pos索引中的name，age，pos字段 这是属于全值匹配的情况！！！*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 索引没用上，ALL全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 索引没用上，ALL全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 用到了idx_staffs_name_age_pos索引中的name字段，pos字段索引失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span></code></pre><h3 id="10-3-索引列上不计算"><a href="#10-3-索引列上不计算" class="headerlink" title="10.3 索引列上不计算"></a>10.3 索引列上不计算</h3><p>不在索引列上做任何操作<font color='green'>（计算、函数、(自动 or 手动)类型转换）</font>，会导致索引失效而转向全表扫描。</p><blockquote><p>案例一：在查询列上使用了函数</p></blockquote><pre class=" language-shell"><code class="language-shell"># 现在要查询`name` = 'Ringo'的记录下面有两种方式来查询！# 1、直接使用 字段 = 值的方式来计算mysql> SELECT * FROM `staffs` WHERE `name` = 'Ringo';+----+-------+-----+---------+---------------------+| id | name  | age | pos     | add_time            |+----+-------+-----+---------+---------------------+|  1 | Ringo |  18 | manager | 2020-08-03 08:30:39 |+----+-------+-----+---------+---------------------+1 row in set (0.00 sec)# 2、使用MySQL内置的函数mysql> SELECT * FROM `staffs` WHERE LEFT(`name`, 5) = 'Ringo';+----+-------+-----+---------+---------------------+| id | name  | age | pos     | add_time            |+----+-------+-----+---------+---------------------+|  1 | Ringo |  18 | manager | 2020-08-03 08:30:39 |+----+-------+-----+---------+---------------------+1 row in set (0.00 sec)</code></pre><p>我们发现以上两条SQL的执行结果都是一样的，但是执行效率有没有差距呢？？？</p><p>通过分析两条SQL的执行计划来分析性能。</p><p><img src="https://img-blog.csdnimg.cn/20200803171857325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JyaW5nb18=,size_16,color_FFFFFF,t_70" alt="explain"></p><p><strong>由此可见，在索引列上进行计算，会使索引失效。</strong></p><blockquote><p>案例二：在查询列上使用了转换</p></blockquote><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510171504.png" alt="查询列上使用转换"></p><p><strong>由此可见，在索引列上进行转换，会使索引失效。</strong></p><p><strong><em>Tips：</em></strong></p><ul><li><font color='red'>等号左边无计算！</font></li><li><font color='red'>等号右边无转换！</font></li><li><font color='red'>字符串必须加单引号</font>，字符串不加单引号，则会在 name 列上做一次转换！</li></ul><p><strong>口诀：</strong></p><ul><li><strong><font color='red'>索引列上不计算</font></strong></li></ul><h3 id="10-4-范围之后全失效"><a href="#10-4-范围之后全失效" class="headerlink" title="10.4 范围之后全失效"></a>10.4 范围之后全失效</h3><blockquote><p>案例</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 用到了idx_staffs_name_age_pos索引中的name，age，pos字段 这是属于全值匹配的情况！！！*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 用到了idx_staffs_name_age_pos索引中的name，age字段，pos字段索引失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">></span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'dev'</span><span class="token punctuation">;</span></code></pre><p>查看上述SQL的执行计划</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170642.png" alt="explain"></p><p><strong>由此可知，查询范围的字段使用到了索引，但是范围之后的索引字段会失效。</strong></p><p><strong><em>Tips：</em></strong></p><ul><li><font color='red'>将可能做范围查询的字段的索引顺序放在最后</font></li></ul><p><strong>口诀：</strong></p><ul><li><strong><font color='red'>范围之后全失效</font></strong></li></ul><h3 id="10-5-覆盖索引尽量用"><a href="#10-5-覆盖索引尽量用" class="headerlink" title="10.5 覆盖索引尽量用"></a>10.5 覆盖索引尽量用</h3><p>在写SQL的<font color='blue'>不要使用<code>SELECT *</code></font>，用什么字段就查询什么字段。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 没有用到覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">AND</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'manager'</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170747.png" alt="使用覆盖索引"></p><p><strong>口诀：</strong></p><ul><li><strong><font color='red'>查询一定不用<code>*</code></font></strong></li></ul><h3 id="10-6-不等有时会失效"><a href="#10-6-不等有时会失效" class="headerlink" title="10.6 不等有时会失效"></a>10.6 不等有时会失效</h3><p>mysql 在使用<font color='blue'>不等于(!= 或者&lt;&gt;)</font>时，有时会无法使用索引会导致全表扫描。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 会使用到覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">!=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">!=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span></code></pre><h3 id="10-7-like百分加右边"><a href="#10-7-like百分加右边" class="headerlink" title="10.7 like百分加右边"></a>10.7 like百分加右边</h3><p>前后模糊匹配：like</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%ing%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%ing'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用索引范围查询 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'Rin%'</span><span class="token punctuation">;</span></code></pre><p><strong><em>Tips：</em></strong></p><ul><li><font color='red'>前缀不能出现模糊匹配！</font></li></ul><p><strong>口诀：</strong></p><ul><li><strong><font color='red'><code>like</code>百分加右边</font></strong></li></ul><p>如果一定要使用<code>%like</code>，而且还要保证索引不失效，那么使用<font color='blue'>覆盖索引</font>来编写SQL。</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%na'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>pos<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>add_time<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">LIKE</span> <span class="token string">'%in'</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525170826.png" alt="模糊查询百分号一定加前边"></p><p><strong>口诀：</strong></p><ul><li><strong><font color='red'>覆盖索引保两边</font></strong></li></ul><h3 id="10-8-字符要加单引号"><a href="#10-8-字符要加单引号" class="headerlink" title="10.8 字符要加单引号"></a>10.8 字符要加单引号</h3><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'Ringo'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 使用到了覆盖索引 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 索引失效 全表扫描 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>staffs<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span></code></pre><p>这里name = 2000在MySQL中会发生强制类型转换，将数字转成字符串。</p><p><strong>口诀：</strong></p><ul><li><strong><font color='red'>字符要加单引号</font></strong></li></ul><h3 id="10-9-null用-not-null不用"><a href="#10-9-null用-not-null不用" class="headerlink" title="10.9 null用 not null不用"></a>10.9 null用 not null不用</h3><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510203707.png" alt=""></p><p>当字段允许为 Null 的条件下：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510203746.png" alt=""></p><p><strong><em>Tips：</em></strong></p><ul><li><font color='green'>is not null 用不到索引，is null 可以用到索引。</font></li></ul><p><strong>口诀：</strong></p><ul><li><font color='red'>null用 not null不用</font></li></ul><h3 id="10-10-使用union替换or"><a href="#10-10-使用union替换or" class="headerlink" title="10.10 使用union替换or"></a>10.10 使用union替换or</h3><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510204016.png" alt=""></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510204111.png" alt=""></p><p><strong><em>Tips：</em></strong></p><ul><li><font color='green'>使用 union all 或者 union 来替代。</font></li></ul><p><strong>口诀：</strong></p><ul><li><font color='red'>使用union替换or</font></li></ul><h3 id="10-11-索引相关题目"><a href="#10-11-索引相关题目" class="headerlink" title="10.11 索引相关题目"></a>10.11 索引相关题目</h3><p><strong>假设index(a,b,c)</strong></p><table><thead><tr><th>Where语句</th><th>索引是否被使用</th></tr></thead><tbody><tr><td>where a = 3</td><td>Y，使用到a</td></tr><tr><td>where a = 3 and b = 5</td><td>Y，使用到a，b</td></tr><tr><td>where a = 3 and b = 5 and c = 4</td><td>Y，使用到a，b，c</td></tr><tr><td>where b = 3 或者 where b = 3 and c = 4 或者 where c = 4</td><td>N，没有用到a字段</td></tr><tr><td>where a = 3 and c = 5</td><td>使用到a，但是没有用到c，因为b断了</td></tr><tr><td>where a = 3 and b &gt; 4 and c = 5</td><td>使用到a，b，但是没有用到c，因为c在范围之后</td></tr><tr><td>where a = 3 and b like ‘kk%’ and c = 4</td><td>Y，a，b，c都用到</td></tr><tr><td>where a = 3 and b like ‘%kk’ and c = 4</td><td>只用到a</td></tr><tr><td>where a = 3 and b like ‘%kk%’ and c = 4</td><td>只用到a</td></tr><tr><td>where a = 3 and b like ‘k%kk%’ and c = 4</td><td>Y，a，b，c都用到</td></tr></tbody></table><p><strong><em>Tips：</em></strong></p><ul><li><font color='blue'>like后面的%前面只要有一个常量，就可以使用到索引！</font></li></ul><h3 id="10-12-面试题分析"><a href="#10-12-面试题分析" class="headerlink" title="10.12 面试题分析"></a>10.12 面试题分析</h3><blockquote><p>数据准备</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 创建表 */</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span> CHAR<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 插入数据 */</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'a1'</span><span class="token punctuation">,</span><span class="token string">'a2'</span><span class="token punctuation">,</span><span class="token string">'a3'</span><span class="token punctuation">,</span><span class="token string">'a4'</span><span class="token punctuation">,</span><span class="token string">'a5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'b1'</span><span class="token punctuation">,</span><span class="token string">'b22'</span><span class="token punctuation">,</span><span class="token string">'b3'</span><span class="token punctuation">,</span><span class="token string">'b4'</span><span class="token punctuation">,</span><span class="token string">'b5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'c1'</span><span class="token punctuation">,</span><span class="token string">'c2'</span><span class="token punctuation">,</span><span class="token string">'c3'</span><span class="token punctuation">,</span><span class="token string">'c4'</span><span class="token punctuation">,</span><span class="token string">'c5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'d1'</span><span class="token punctuation">,</span><span class="token string">'d2'</span><span class="token punctuation">,</span><span class="token string">'d3'</span><span class="token punctuation">,</span><span class="token string">'d4'</span><span class="token punctuation">,</span><span class="token string">'d5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">'e1'</span><span class="token punctuation">,</span><span class="token string">'e2'</span><span class="token punctuation">,</span><span class="token string">'e3'</span><span class="token punctuation">,</span><span class="token string">'e4'</span><span class="token punctuation">,</span><span class="token string">'e5'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 创建复合索引 */</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_test03_c1234 <span class="token keyword">ON</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>题目</p></blockquote><p><font color='blue'>最好索引怎么创建的，就怎么用，按照顺序使用，避免让MySQL再自己去翻译一次</font></p><ol><li>全值匹配</li></ol><pre class=" language-mysql"><code class="language-mysql">/* 1.全值匹配 用到索引c1 c2 c3 c4全字段 */EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c3` = 'a3' AND `c4` = 'a4';/* 2.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c4` = 'a4' AND `c3` = 'a3';/* 3.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/EXPLAIN SELECT * FROM `test03` WHERE `c4` = 'a4' AND `c3` = 'a3' AND `c2` = 'a2' AND `c1` = 'a1';</code></pre><ol start="2"><li>范围后失效，与顺序无关</li></ol><pre class=" language-mysql"><code class="language-mysql">/* 4.用到索引c1 c2 c3字段，c4字段失效，范围之后全失效 */EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c3` > 'a3' AND `c4` = 'a4';/* 5.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序 */EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c4` > 'a4' AND `c3` = 'a3';</code></pre><ol start="3"><li><code>ORDER BY</code> 排序</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 6.用到了索引c1 c2 c3三个字段, c1和c2两个字段用于查找,  c3字段用于排序了但是没有统计到key_len中，c4字段失效 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a4'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 7.用到了索引c1 c2 c3三个字段，c1和c2两个字段用于查找, c3字段用于排序了但是没有统计到key_len中*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    8.用到了索引c1 c2两个字段，c4失效，c1和c2两个字段用于查找，c4字段排序产生了Using filesort说明排序没有用到c4字段 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span><span class="token number">c4</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 9.用到了索引c1 c2 c3三个字段，c1用于查找，c2和c3用于排序 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 10.用到了c1一个字段，c1用于查找，c3和c2两个字段索引失效，产生了Using filesort */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">`</span><span class="token number">c3</span><span class="token punctuation">`</span><span class="token punctuation">,</span> <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 11.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span>  <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">c2</span><span class="token punctuation">,</span> <span class="token number">c3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 12.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 */</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span>  <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">c2</span><span class="token punctuation">,</span> <span class="token number">c3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    13.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 没有产生Using filesort       因为之前c2这个字段已经确定了是'a2'了，这是一个常量，再去ORDER BY c3,c2 这时候c2已经不用排序了！      所以没有产生Using filesort 和(10)进行对比学习！*/</span><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>test03<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span><span class="token number">c1</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a1'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c2</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a2'</span> <span class="token operator">AND</span> <span class="token punctuation">`</span><span class="token number">c5</span><span class="token punctuation">`</span> <span class="token operator">=</span> <span class="token string">'a5'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token number">c3</span><span class="token punctuation">,</span> <span class="token number">c2</span><span class="token punctuation">;</span></code></pre><ol start="4"><li><p><code>GROUP BY</code>分组</p><p><code>GROUP BY</code> 表面上是叫做分组，但是<font color='blue'>分组之前必定排序</font>。索引优化几乎和<code>ORDER BY</code>一致，但是<code>GROUP BY</code>会有临时表的产生。</p></li></ol><pre class=" language-mysql"><code class="language-mysql">/* 14.用到c1 c2 c3三个字段，c1用于查找，c2 c3用于排序，c4失效 */EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c4` = 'a4' GROUP BY `c2`,`c3`;/* 15.用到c1这一个字段，c4失效，c2和c3排序失效产生了Using filesort */EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c4` = 'a4' GROUP BY `c3`,`c2`;</code></pre><p><strong><em>tip：</em></strong></p><pre class=" language-mysql"><code class="language-mysql">/* 10.用到了c1一个字段，c1用于查找，c3和c2两个字段索引失效，产生了Using filesort */EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c5` = 'a5' ORDER BY `c3`, `c2`;</code></pre><ul><li><font color='red'>ORDER BY 中字段的顺序，必须和索引中一致</font>，MySQL的查询优化器只会优化查询的SQL语句的顺序，不会优化排序的SQL语句顺序！</li></ul><pre class=" language-mysql"><code class="language-mysql">/*    13.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 没有产生Using filesort       因为之前c2这个字段已经确定了是'a2'了，这是一个常量，再去ORDER BY c3,c2 这时候c2已经不用排序了！      所以没有产生Using filesort 和(10)进行对比学习！*/EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c5` = 'a5' ORDER BY c3, c2;</code></pre><ul><li><font color='blue'>这是一种特例！</font>与10类似，但是本SQL没有产生Using filesort ，<font color='red'>因为c2这个字段已经确定了是’a2’了，这是一个常量，再去ORDER BY c3,c2 这时候c2已经不用排序了！</font></li></ul><h3 id="10-13-索引优化总结"><a href="#10-13-索引优化总结" class="headerlink" title="10.13 索引优化总结"></a>10.13 索引优化总结</h3><p>索引优化的一般性建议：</p><ul><li>对于单值索引，尽量选择针对当前<code>query</code>过滤性更好的索引。</li><li>在选择复合索引的时候，当前<code>query</code>中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</li><li>在选择复合索引的时候，尽量选择可以能够包含当前<code>query</code>中的<code>where</code>子句中更多字段的索引。</li><li>尽可能通过分析统计信息和调整<code>query</code>的写法来达到选择合适索引的目的。</li></ul><p>口诀：</p><p>全值匹配我最爱，最左前缀要遵守；</p><p>带头大哥必须在，中间兄弟不能断；</p><p>索引列上不计算，范围之后全失效；</p><p>LIKE百分写最右，覆盖索引不写<code>*</code>；</p><p>不等非空还有OR，索引失效要少用；</p><p>字符要加单引号，SQL优化有诀窍。</p><h2 id="11-排序分组优化"><a href="#11-排序分组优化" class="headerlink" title="11 排序分组优化"></a>11 排序分组优化</h2><h3 id="11-1-无过滤-不索引"><a href="#11-1-无过滤-不索引" class="headerlink" title="11.1 无过滤 不索引"></a>11.1 无过滤 不索引</h3><p><font color='blue'>where 条件和 on 的判断</font>这些过滤条件，作为优先优化的部门，<font color='blue'>是要被先考虑的</font>！其次，如果有分组和排序，那么也要考虑 grouo by 和 order by。</p><blockquote><p>数据准备</p></blockquote><pre class=" language-mysql"><code class="language-mysql">create index idx_age_deptid_name on emp (age,deptid,name);</code></pre><blockquote><p>案例</p></blockquote><pre class=" language-mysql"><code class="language-mysql">/* 1.where作为过滤条件 使用索引进行排序了 不会产生Using filesort */explain select * from emp where age=40 order by deptid;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511210218.png" alt=""></p><pre class=" language-mysql"><code class="language-mysql">/* 2.未出现where过滤条件 未使用索引进行排序 产生Using filesort */explain select * from emp order by age,deptid;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511210258.png" alt=""></p><p><code>using filesort</code> 说明进行了手工排序！<font color='red'>原因在于没有 where 作为过滤条件！</font></p><pre class=" language-mysql"><code class="language-mysql">/* 3.limit作为过滤条件 使用索引进行排序了 不会产生Using filesort */explain select * from emp order by age,deptid limit 10;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511210431.png" alt=""></p><p><strong><em>tips：</em></strong></p><ul><li>无过滤，不索引。<font color='red'><code>where</code>，<code>limt</code> 都相当于一种过滤条件，所以才能使用上索引！</font></li></ul><h3 id="11-2-顺序错-必排序"><a href="#11-2-顺序错-必排序" class="headerlink" title="11.2 顺序错 必排序"></a>11.2 顺序错 必排序</h3><blockquote><p>案例</p></blockquote><pre class=" language-mysql"><code class="language-mysql">/* 1.where作为过滤条件 使用索引进行排序了 不会产生Using filesort */explain select * from emp where age=45 order by deptid,name;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511210719.png" alt=""></p><pre class=" language-mysql"><code class="language-mysql">/* 2.未使用索引进行排序 产生Using filesort */explain select * from emp where age=45 order by deptid,empno;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511211128.png" alt=""></p><p><font color='blue'>empno 字段并没有建立索引</font>，因此也无法用到索引，此字段需要排序！</p><pre class=" language-mysql"><code class="language-mysql">/* 3.未使用索引进行排序 产生Using filesort */explain select * from emp where age=45 order by name,deptid;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511211349.png" alt=""></p><p><font color='blue'><code>where</code> 两侧列的顺序可以变换</font>，效果相同，但是<font color='red'> <code>order by</code> 列的顺序不能随便变换！</font></p><pre class=" language-mysql"><code class="language-mysql">/* 4.未使用索引进行排序 产生Using filesort */explain select * from emp where deptid=45 order by age;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511211540.png" alt=""></p><p>deptid 作为过滤条件的字段，无法使用索引，<font color='red'>未满足最佳作前缀法则！</font></p><h3 id="11-3-方向反-必排序"><a href="#11-3-方向反-必排序" class="headerlink" title="11.3 方向反 必排序"></a>11.3 方向反 必排序</h3><pre class=" language-mysql"><code class="language-mysql">/* 1.使用索引进行排序了 不会产生Using filesort */explain select * from emp where age=45 order by deptid desc, name desc ;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511211826.png" alt=""></p><p>如果可以用上索引的字段<font color='red'>都使用正序或者逆序</font>，实际上是没有任何影响的，无非将结果集调换顺序。</p><pre class=" language-mysql"><code class="language-mysql">/* 2.未使用索引进行排序 产生Using filesort */explain select * from emp where age=45 order by deptid asc, name desc ;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511211926.png" alt=""></p><p>如果<font color='red'>排序的字段，顺序有差异</font>，就需要将差异的部分，进行一次倒置顺序，因此还是需要<font color='red'>手动排序</font>的！</p><h3 id="11-4-范围和排序的抉择"><a href="#11-4-范围和排序的抉择" class="headerlink" title="11.4 范围和排序的抉择"></a>11.4 范围和排序的抉择</h3><pre class=" language-mysql"><code class="language-mysql">create index idx_age_empno_name on emp(age,empno,name);</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511212402.png" alt=""></p><p>原因： <font color='red'>empno 是范围查询，因此导致了索引失效，所以 name 字段无法使用索引排序。</font><br>所以，三个字段的符合索引，没有意义，因为 <font color='red'>empno 和 name 字段只能选择其一！</font></p><pre class=" language-mysql"><code class="language-mysql">/* 鱼与熊掌不可兼得，因此，要么选择 empno,要么选择 name */drop index idx_age_empno_name on emp;create index idx_age_name on emp(age,name);create index idx_age_empno on emp(age,empno);</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210511212659.png" alt=""></p><p>原因：所有的排序都是在条件过滤之后才执行的，所以<font color='blue'>如果条件过滤了大部分数据的话，几百几千条数据进行排序其实并不是很消耗性能</font>，即使索引优化了排序但实际提升性能很有限。 相对的 empno&lt;101000 这个条件如果没有用到索引的话，要对几万条的数据进行扫描，这是非常消耗性能的，使用 empno 字段的范围查询，过滤性更好（empno 从 100000 开始）！</p><p><strong><em>tips：</em></strong></p><ul><li>当范围条件和 group by 或者 order by 的字段出现二选一时 ，<font color='red'>优先观察条件字段的过滤数量</font>，<font color='red'>如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上</font>。反之，亦然。</li></ul><h3 id="11-5-using-filesort"><a href="#11-5-using-filesort" class="headerlink" title="11.5 using filesort"></a>11.5 using filesort</h3><p><code>ORDER BY</code>子句，尽量使用索引排序，避免使用<code>Using filesort</code>排序。</p><p>MySQL支持两种方式的排序，<code>FileSort</code>和<code>Index</code>，<code>Index</code>的效率高，它指MySQL扫描索引本身完成排序。<code>FileSort</code>方式效率较低。</p><p><code>ORDER BY</code>满足两情况，会使用<code>Index</code>方式排序：</p><ul><li><font color='red'><code>ORDER BY</code>语句使用索引最左前列。</font></li><li><font color='red'>使用<code>WHERE</code>子句或是<code>limint</code>与<code>ORDER BY</code>子句条件列组合满足索引最左前列。</font></li></ul><p><strong>结论：尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀原则。</strong></p><blockquote><p>如果不在索引列上，File Sort有两种算法：MySQL就要启动双路排序算法和单路排序算法</p></blockquote><p>1、<font color='blue'>双路排序算法</font>：MySQL4.1之前使用双路排序，字面意思就是两次扫描磁盘，最终得到数据，读取行指针和<code>ORDER BY</code>列，対他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。<strong>一句话，从磁盘取排序字段，在<code>buffer</code>中进行排序，再从磁盘取其他字段。</strong></p><p>取一批数据，要对磁盘进行两次扫描，众所周知，IO是很耗时的，所以在MySQL4.1之后，出现了改进的算法，就是单路排序算法。</p><p>2、<font color='blue'>单路排序算法</font>：从磁盘读取查询需要的所有列，按照<code>ORDER BY</code>列在<code>buffer</code>対它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。</p><p>由于单路排序算法是后出的，总体而言效率好过双路排序算法。</p><p>但是<font color='blue'>单路排序算法有问题</font>：如果<code>SortBuffer</code>缓冲区太小，导致从磁盘中读取所有的列不能完全保存在<code>SortBuffer</code>缓冲区中，这时候单路复用算法就会出现问题，反而性能不如双路复用算法。</p><p><strong>单路复用算法的优化策略：</strong></p><ul><li><font color='red'>增大<code>sort_buffer_size</code>参数的设置。</font><ul><li>不管使用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的。</li></ul></li><li><font color='red'>增大<code>max_length_for_sort_data</code>参数的设置。</font><ul><li>提高这个参数，会增加用单路排序算法的概率。但是如果设置的太高，数据总容量<code>sort_buffer_size</code>的概率就增大，明显症状是高的磁盘IO活动和低的处理器使用率。</li></ul></li><li><font color='red'>减少 select 后面的查询的字段，查什么字段就写什么字段</font>。<ul><li>当查询的字段大小总和小于<code>max_length_for_sort_data</code>而且排序字段不是<code>TEXT|BLOB</code>类型时，会使用单路排序算法，否则使用多路排序算法。</li><li>两种排序算法的数据都有可能超出<code>sort_buffer</code>缓冲区的容量，超出之后，会创建<code>tmp</code>临时文件进行合并排序，导致多次IO，但是单路排序算法的风险会更大一些，所以要增大<code>sort_buffer_size</code>参数的设置。</li></ul></li></ul><h3 id="11-6-使用覆盖索引"><a href="#11-6-使用覆盖索引" class="headerlink" title="11.6 使用覆盖索引"></a>11.6 使用覆盖索引</h3><p><font color='red'>覆盖索引</font>：<font color='blue'>SQL 只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据。</font></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512202844.png" alt=""></p><h3 id="11-7-group-by"><a href="#11-7-group-by" class="headerlink" title="11.7 group by"></a>11.7 group by</h3><p>group by 使用索引的原则<font color='blue'>几乎跟 order by 一致</font> ，<font color='red'>唯一区别是 groupby 即使没有过滤条件用到索引，也可以直接使用索引。</font></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512203048.png" alt=""></p><p><strong><em>tips：</em></strong></p><ul><li><p><code>GROUP BY</code>实质是先排序后进行分组，<strong>遵照索引建的最佳左前缀</strong>。</p></li><li><p>当无法使用索引列时，会使用<code>Using filesort</code>进行排序，增大<code>max_length_for_sort_data</code>参数的设置和增大<code>sort_buffer_size</code>参数的设置，会提高性能。</p></li><li><p><font color='red'><code>WHERE</code>执行顺序高于<code>HAVING</code>，能写在<code>WHERE</code>限定条件里的就不要写在<code>HAVING</code>中了</font>。</p></li></ul><h2 id="12-查询优化"><a href="#12-查询优化" class="headerlink" title="12 查询优化"></a>12 查询优化</h2><h3 id="12-1-小表驱动大表"><a href="#12-1-小表驱动大表" class="headerlink" title="12.1 小表驱动大表"></a>12.1 小表驱动大表</h3><blockquote><p>优化原则：对于MySQL数据库而言，<font color='red'>永远都是小表驱动大表</font>。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 举个例子：可以使用嵌套的for循环来理解小表驱动大表。* 以下两个循环结果都是一样的，但是对于MySQL来说不一样，* 第一种可以理解为，和MySQL建立5次连接每次查询1000次。* 第一种可以理解为，和MySQL建立1000次连接每次查询5次。*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>IN和EXISTS</p></blockquote><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 优化原则：小表驱动大表，即小的数据集驱动大的数据集 */</span><span class="token comment" spellcheck="true">/* IN适合B表比A表数据小的情况*/</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>A<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>B<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/* EXISTS适合B表比A表数据大的情况 */</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>A<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>B<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> <span class="token punctuation">`</span>B<span class="token punctuation">`</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token punctuation">`</span>A<span class="token punctuation">`</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>EXISTS：</strong></p><ul><li>语法：<code>SELECT....FROM tab WHERE EXISTS(subquery);</code>该语法可以理解为：</li><li>该语法可以理解为：将主查询的数据，放到子查询中做条件验证，根据验证结果（<code>true</code>或是<code>false</code>）来决定主查询的数据结果是否得以保留。</li></ul><p><strong>提示：</strong></p><ul><li><code>EXISTS(subquery)</code>子查询只返回<code>true</code>或者<code>false</code>，因此子查询中的<code>SELECT *</code>可以是<code>SELECT 1</code>或是<code>SELECT X</code>，它们并没有区别。</li><li><code>EXISTS(subquery)</code>子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担心效率问题，可进行实际检验以确定是否有效率问题。</li><li><code>EXISTS(subquery)</code>子查询往往也可以用条件表达式，其他子查询或者<code>JOIN</code>替代，何种最优需要具体问题具体分析。</li></ul><h3 id="12-2-练习"><a href="#12-2-练习" class="headerlink" title="12.2 练习"></a>12.2 练习</h3><blockquote><p>案例一</p></blockquote><h2 id="13-分析慢SQL的步骤"><a href="#13-分析慢SQL的步骤" class="headerlink" title="13 分析慢SQL的步骤"></a>13 分析慢SQL的步骤</h2><p>分析：</p><p>1、观察，至少跑1天，看看生产的慢SQL情况。</p><p>2、开启慢查询日志，设置阈值，比如超过5秒钟的就是慢SQL，并将它抓取出来。</p><p>3、explain + 慢SQL分析。</p><p>4、show Profile。</p><p>5、运维经理 OR DBA，进行MySQL数据库服务器的参数调优。</p><p>总结（大纲）：</p><p>1、慢查询的开启并捕获。</p><p>2、explain + 慢SQL分析。</p><p>3、show Profile查询SQL在MySQL数据库中的执行细节和生命周期情况。</p><p>4、MySQL数据库服务器的参数调优。</p><h2 id="14-慢查询日志"><a href="#14-慢查询日志" class="headerlink" title="14 慢查询日志"></a>14 慢查询日志</h2><h3 id="14-1-基本介绍"><a href="#14-1-基本介绍" class="headerlink" title="14.1 基本介绍"></a>14.1 基本介绍</h3><blockquote><p>慢查询日志是什么？</p></blockquote><ul><li>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过<code>long_query_time</code>值的SQL，则会被记录到慢查询日志中。</li><li><code>long_query_time</code>的默认值为10，意思是运行10秒以上的语句。</li><li>由慢查询日志来查看哪些SQL超出了我们的最大忍耐时间值，比如一条SQL执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒钟的SQL，结合之前<code>explain</code>进行全面分析。</li></ul><blockquote><p>特别说明</p></blockquote><p><font color='red'>默认情况下，MySQL数据库没有开启慢查询日志</font>，<font color='blue'>需要我们手动来设置这个参数</font>。</p><p><font color='red'>当然，如果不是调优需要的话，一般不建议启动该参数</font>，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件。</p><blockquote><p>查看慢查询日志是否开以及如何开启</p></blockquote><ol><li>本次MySQL中开启</li></ol><table><thead><tr><th align="center">SQL语句</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td align="center"><code>SHOW VARIABLES LIKE &#39;%slow_query_log%&#39;;</code></td><td>查看慢查询日志是否开启</td><td>默认情况下 slow_query_log 的值为 OFF，<br>表示慢查询日志是禁用的</td></tr><tr><td align="center"><code>SET GLOBAL slow_query_log = 1;</code></td><td>开启慢查询日志</td><td></td></tr><tr><td align="center"><code>SHOW VARIABLES LIKE&#39; long_query_time%&#39;;</code></td><td>查看慢查询设定阈值</td><td>单位秒</td></tr><tr><td align="center"><code>set long_query_time=1</code></td><td>设定慢查询阈值</td><td>单位秒</td></tr></tbody></table><pre class=" language-shell"><code class="language-shell"># 1、查看慢查询日志是否开启mysql> SHOW VARIABLES LIKE '%slow_query_log%';+---------------------+--------------------------------------+| Variable_name       | Value                                |+---------------------+--------------------------------------+| slow_query_log      | OFF                                  || slow_query_log_file | /var/lib/mysql/1dcb5644392c-slow.log |+---------------------+--------------------------------------+2 rows in set (0.01 sec)# 2、开启慢查询日志mysql> SET GLOBAL slow_query_log = 1;Query OK, 0 rows affected (0.00 sec)# 查看long_query_time 默认是10秒# 只有SQL的执行时间>10才会被记录mysql> SHOW VARIABLES LIKE 'long_query_time%';+-----------------+-----------+| Variable_name   | Value     |+-----------------+-----------+| long_query_time | 10.000000 |+-----------------+-----------+1 row in set (0.00 sec)</code></pre><ol start="2"><li>如果要使慢查询日志永久开启，需要修改<code>my.cnf</code>文件，在<code>[mysqld]</code>下增加修改参数。</li></ol><pre class=" language-shell"><code class="language-shell"># my.cnf[mysqld]# 1.这个是开启慢查询。slow_query_log=1# 2.这个是存储慢查询的日志文件。这个文件不存在的话，需要自己创建slow_query_log_file=/var/lib/mysql/slow.log# 3.慢查询阈值设定long_query_time=3log_output=FILE</code></pre><ol start="3"><li>查新慢查询日志的总记录条数：<code>SHOW GLOBAL STATUS LIKE &#39;%Slow_queries%&#39;;</code>。</li></ol><pre class=" language-shell"><code class="language-shell">mysql> SHOW GLOBAL STATUS LIKE '%Slow_queries%';+---------------+-------+| Variable_name | Value |+---------------+-------+| Slow_queries  | 3     |+---------------+-------+1 row in set (0.00 sec)</code></pre><h3 id="14-2-日志分析工具"><a href="#14-2-日志分析工具" class="headerlink" title="14.2 日志分析工具"></a>14.2 日志分析工具</h3><p>日志分析工具<code>mysqldumpslow</code>：在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具<code>mysqldumpslow</code>。</p><pre class=" language-shell"><code class="language-shell"># 1、mysqldumpslow --help 来查看mysqldumpslow的帮助信息root@1dcb5644392c:/usr/bin# mysqldumpslow --helpUsage: mysqldumpslow [ OPTS... ] [ LOGS... ]Parse and summarize the MySQL slow query log. Options are  --verbose    verbose  --debug      debug  --help       write this text to standard output  -v           verbose  -d           debug  -s ORDER     what to sort by (al, at, ar, c, l, r, t), 'at' is default  # 按照何种方式排序                al: average lock time # 平均锁定时间                ar: average rows sent # 平均返回记录数                at: average query time # 平均查询时间                 c: count  # 访问次数                 l: lock time  # 锁定时间                 r: rows sent  # 返回记录                 t: query time  # 查询时间   -r           reverse the sort order (largest last instead of first)  -t NUM       just show the top n queries  # 返回前面多少条记录  -a           don't abstract all numbers to N and strings to 'S'  -n NUM       abstract numbers with at least n digits within names  -g PATTERN   grep: only consider stmts that include this string    -h HOSTNAME  hostname of db server for *-slow.log filename (can be wildcard),               default is '*', i.e. match all  -i NAME      name of server instance (if using mysql.server startup script)  -l           don't subtract lock time from total time# 2、 案例# 2.1、得到返回记录集最多的10个SQLmysqldumpslow -s r -t 10 /var/lib/mysql/slow.log# 2.2、得到访问次数最多的10个SQLmysqldumpslow -s c -t 10 /var/lib/mysql/slow.log# 2.3、得到按照时间排序的前10条里面含有左连接的查询语句mysqldumpslow -s t -t 10 -g "left join" /var/lib/mysql/slow.log# 2.4、另外建议使用这些命令时结合|和more使用，否则出现爆屏的情况mysqldumpslow -s r -t 10 /var/lib/mysql/slow.log | more</code></pre><h3 id="14-3-Show-Profile"><a href="#14-3-Show-Profile" class="headerlink" title="14.3 Show Profile"></a>14.3 Show Profile</h3><blockquote><p>Show Profile是什么？</p></blockquote><p><code>Show Profile</code>：MySQL提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量。<strong>默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</strong></p><blockquote><p>分析步骤</p></blockquote><p>1、是否支持，看看当前的MySQL版本是否支持。</p><pre class=" language-shell"><code class="language-shell"># 查看Show Profile功能是否开启mysql> SHOW VARIABLES LIKE 'profiling';+---------------+-------+| Variable_name | Value |+---------------+-------+| profiling     | OFF   |+---------------+-------+1 row in set (0.00 sec)</code></pre><p>2、<font color='red'>开启<code>Show Profile</code>功能，默认是关闭的，使用前需要开启</font>。</p><pre class=" language-shell"><code class="language-shell"># 开启Show Profile功能mysql> SET profiling=ON;Query OK, 0 rows affected, 1 warning (0.00 sec)</code></pre><p>3、运行SQL</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM `emp` GROUP BY `id`%10 LIMIT 150000;SELECT * FROM `emp` GROUP BY `id`%20 ORDER BY 5;</code></pre><p>4、查看结果，执行<code>SHOW PROFILES;</code></p><p><code>Duration</code>：持续时间。</p><pre class=" language-shell"><code class="language-shell">mysql> SHOW PROFILES;+----------+------------+---------------------------------------------------+| Query_ID | Duration   | Query                                             |+----------+------------+---------------------------------------------------+|        1 | 0.00156100 | SHOW VARIABLES LIKE 'profiling'                   ||        2 | 0.56296725 | SELECT * FROM `emp` GROUP BY `id`%10 LIMIT 150000 ||        3 | 0.52105825 | SELECT * FROM `emp` GROUP BY `id`%10 LIMIT 150000 ||        4 | 0.51279775 | SELECT * FROM `emp` GROUP BY `id`%20 ORDER BY 5   |+----------+------------+---------------------------------------------------+4 rows in set, 1 warning (0.00 sec)</code></pre><p>5、诊断SQL，<code>SHOW PROFILE cpu,block io FOR QUERY Query_ID;</code></p><pre class=" language-shell"><code class="language-shell"># 这里的3是第四步中的Query_ID。# 可以在SHOW PROFILE中看到一条SQL中完整的生命周期。mysql> SHOW PROFILE cpu,block io FOR QUERY 3;+----------------------+----------+----------+------------+--------------+---------------+| Status               | Duration | CPU_user | CPU_system | Block_ops_in | Block_ops_out |+----------------------+----------+----------+------------+--------------+---------------+| starting             | 0.000097 | 0.000090 |   0.000002 |            0 |             0 || checking permissions | 0.000010 | 0.000009 |   0.000000 |            0 |             0 || Opening tables       | 0.000039 | 0.000058 |   0.000000 |            0 |             0 || init                 | 0.000046 | 0.000046 |   0.000000 |            0 |             0 || System lock          | 0.000011 | 0.000000 |   0.000000 |            0 |             0 || optimizing           | 0.000005 | 0.000000 |   0.000000 |            0 |             0 || statistics           | 0.000023 | 0.000037 |   0.000000 |            0 |             0 || preparing            | 0.000014 | 0.000000 |   0.000000 |            0 |             0 || Creating tmp table   | 0.000041 | 0.000053 |   0.000000 |            0 |             0 || Sorting result       | 0.000005 | 0.000000 |   0.000000 |            0 |             0 || executing            | 0.000003 | 0.000000 |   0.000000 |            0 |             0 || Sending data         | 0.520620 | 0.516267 |   0.000000 |            0 |             0 || Creating sort index  | 0.000060 | 0.000051 |   0.000000 |            0 |             0 || end                  | 0.000006 | 0.000000 |   0.000000 |            0 |             0 || query end            | 0.000011 | 0.000000 |   0.000000 |            0 |             0 || removing tmp table   | 0.000006 | 0.000000 |   0.000000 |            0 |             0 || query end            | 0.000004 | 0.000000 |   0.000000 |            0 |             0 || closing tables       | 0.000009 | 0.000000 |   0.000000 |            0 |             0 || freeing items        | 0.000032 | 0.000064 |   0.000000 |            0 |             0 || cleaning up          | 0.000019 | 0.000000 |   0.000000 |            0 |             0 |+----------------------+----------+----------+------------+--------------+---------------+20 rows in set, 1 warning (0.00 sec)</code></pre><p><code>Show Profile</code>查询参数备注：</p><ul><li><code>ALL</code>：显示所有的开销信息。</li><li><code>BLOCK IO</code>：显示块IO相关开销（通用）。</li><li><code>CONTEXT SWITCHES</code>：上下文切换相关开销。</li><li><code>CPU</code>：显示CPU相关开销信息（通用）。</li><li><code>IPC</code>：显示发送和接收相关开销信息。</li><li><code>MEMORY</code>：显示内存相关开销信息。</li><li><code>PAGE FAULTS</code>：显示页面错误相关开销信息。</li><li><code>SOURCE</code>：显示和Source_function。</li><li><code>SWAPS</code>：显示交换次数相关开销的信息。</li></ul><p>6、<code>Show Profile</code>查询列表，日常开发需要注意的结论：</p><ul><li><code>converting HEAP to MyISAM</code>：查询结果太大，内存都不够用了，往磁盘上搬了。</li><li><code>Creating tmp table</code>：创建临时表（拷贝数据到临时表，用完再删除），非常耗费数据库性能。</li><li><code>Copying to tmp table on disk</code>：把内存中的临时表复制到磁盘，危险！！！</li><li><code>locked</code>：死锁。</li></ul><h2 id="15-批量插入数据脚本"><a href="#15-批量插入数据脚本" class="headerlink" title="15 批量插入数据脚本"></a>15 批量插入数据脚本</h2><h3 id="15-1-环境准备"><a href="#15-1-环境准备" class="headerlink" title="15.1 环境准备"></a>15.1 环境准备</h3><blockquote><p>1 建表SQL</p></blockquote><pre class=" language-mysql"><code class="language-mysql">/* 1.dept表 */CREATE TABLE `dept` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',  `deptno` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '部门id',  `dname` varchar(20) NOT NULL DEFAULT '' COMMENT '部门名字',  `loc` varchar(13) NOT NULL DEFAULT '' COMMENT '部门地址',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='部门表'/* 2.emp表 */CREATE TABLE `emp` (  `id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键',  `empno` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '员工编号',  `ename` varchar(20) NOT NULL DEFAULT '' COMMENT '员工名字',  `job` varchar(9) NOT NULL DEFAULT '' COMMENT '职位',  `mgr` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '上级编号',  `hiredata` date NOT NULL COMMENT '入职时间',  `sal` decimal(7,2) NOT NULL COMMENT '薪水',  `comm` decimal(7,2) NOT NULL COMMENT '分红',  `deptno` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '部门id',  PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='员工表'</code></pre><blockquote><p>2 设置参数</p></blockquote><p>在执行创建函数之前，首先请保证<font color='red'> <code>log_bin_trust_function_creators</code> 参数为 1</font>，即 on 开启状态。否则会报错：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210510161631.png" alt=""></p><p>查询：<font color='red'>show variables like ‘log_bin_trust_function_creators’;</font><br>设置：<font color='red'>set global log_bin_trust_function_creators=1;</font></p><pre class=" language-shell"><code class="language-shell"># 在mysql中设置 # log_bin_trust_function_creators 默认是关闭的 需要手动开启mysql> SHOW VARIABLES LIKE 'log_bin_trust_function_creators';+---------------------------------+-------+| Variable_name                   | Value |+---------------------------------+-------+| log_bin_trust_function_creators | OFF   |+---------------------------------+-------+1 row in set (0.00 sec)mysql> SET GLOBAL log_bin_trust_function_creators=1;Query OK, 0 rows affected (0.00 sec)</code></pre><p>上述修改方式MySQL重启后会失败，在<code>my.cnf</code>配置文件下修改永久有效。</p><pre class=" language-shell"><code class="language-shell"># 在[mysqld]中加上 log_bin_trust_function_creators=1[mysqld]log_bin_trust_function_creators=1</code></pre><h3 id="15-2-编写随机函数"><a href="#15-2-编写随机函数" class="headerlink" title="15.2 编写随机函数"></a>15.2 编写随机函数</h3><p>创建函数，保证每条数据都不同。</p><p>如果要删除函数，则执行：<font color='red'>drop function 函数名;</font></p><pre class=" language-mysql"><code class="language-mysql"># 1、函数：随机产生字符串DELIMITER $$CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)BEGIN    DECLARE chars_str VARCHAR(100) DEFAULT 'abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWXYZ';    DECLARE return_str VARCHAR(255) DEFAULT '';    DECLARE i INT DEFAULT 0;    WHILE i < n DO    SET return_str = CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));    SET i = i + 1;    END WHILE;    RETURN return_str;END $$# 2、函数：随机产生部门编号DELIMITER $$CREATE FUNCTION rand_num() RETURNS INT(5)BEGIN    DECLARE i INT DEFAULT 0;    SET i = FLOOR(100 + RAND() * 10);    RETURN i;END $$</code></pre><h3 id="15-3-创建存储过程"><a href="#15-3-创建存储过程" class="headerlink" title="15.3 创建存储过程"></a>15.3 创建存储过程</h3><p>删除存储过程：</p><p><font color='red'>DELIMITER ;</font></p><p><font color='red'>drop PROCEDURE 存储过程名;</font></p><pre class=" language-mysql"><code class="language-mysql"># 1、存储过程：向dept表批量插入DELIMITER $$CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num INT(10))BEGINDECLARE i INT DEFAULT 0;    SET autocommit = 0;    REPEAT    SET i = i + 1;    INSERT INTO dept(deptno,dname,loc) VALUES((START + i),rand_string(10),rand_string(8));    UNTIL i = max_num    END REPEAT;    COMMIT;END $$# 2、存储过程：向emp表批量插入DELIMITER $$CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))BEGINDECLARE i INT DEFAULT 0;    SET autocommit = 0;    REPEAT    SET i = i + 1;    INSERT INTO emp(empno,ename,job,mgr,hiredata,sal,comm,deptno) VALUES((START + i),rand_string(6),'SALESMAN',0001,CURDATE(),2000,400,rand_num());    UNTIL i = max_num    END REPEAT;    COMMIT;END $$</code></pre><h3 id="15-4-调用存储过程"><a href="#15-4-调用存储过程" class="headerlink" title="15.4 调用存储过程"></a>15.4 调用存储过程</h3><pre class=" language-mysql"><code class="language-mysql"># 1、调用存储过程向dept表插入10个部门。DELIMITER ;CALL insert_dept(100,10);# 2、调用存储过程向emp表插入50万条数据。DELIMITER ;CALL insert_emp(100001,500000);</code></pre><h3 id="15-5-批量删除某个表上的所有索引"><a href="#15-5-批量删除某个表上的所有索引" class="headerlink" title="15.5 批量删除某个表上的所有索引"></a>15.5 批量删除某个表上的所有索引</h3><pre class=" language-mysql"><code class="language-mysql"># 1、存储过程：删除索引(dbname-数据库名；tablename-表名)DELIMITER $$CREATE PROCEDURE `proc_drop_index`(dbname VARCHAR(200),tablename VARCHAR(200))BEGIN    DECLARE done INT DEFAULT 0;    DECLARE ct INT DEFAULT 0;    DECLARE _index VARCHAR(200) DEFAULT '';    DECLARE _cur CURSOR FOR SELECT index_name FROM information_schema.STATISTICS WHERE table_schema=dbname AND table_name=tablename AND seq_in_index=1 AND index_name <>'PRIMARY' ;    DECLARE CONTINUE HANDLER FOR NOT FOUND set done=2 ;    OPEN _cur;    FETCH _cur INTO _index;    WHILE _index<>'' DO        SET @str = CONCAT("drop index ",_index," on ",tablename );        PREPARE sql_str FROM @str ;        EXECUTE sql_str;        DEALLOCATE PREPARE sql_str;        SET _index='';        FETCH _cur INTO _index;    END WHILE;CLOSE _cur;END$$# 2、执行存储过程CALL proc_drop_index("dbname","tablename");</code></pre><h2 id="16-表锁-偏读"><a href="#16-表锁-偏读" class="headerlink" title="16 表锁(偏读)"></a>16 表锁(偏读)</h2><p>锁的分类</p><ul><li>对数据操作的类型分（读/写）<ul><li><font color='blue'>读锁（共享锁）</font>：针对同一份数据，<font color='red'>多个读操作可以同时</font>进行而不会相互影响</li><li><font color='blue'>写锁（排他锁）</font>：当前写操作没有完成之前，它会<font color='red'>阻隔其他写锁和读锁</font></li></ul></li><li>对数据操作的粒度来分<ul><li>表锁</li><li>行锁</li></ul></li></ul><p><strong>表锁特点：</strong></p><ul><li>表锁偏向<code>MyISAM</code>存储引擎，开销小，加锁快，无死锁，锁定粒度大，发生锁冲突的概率最高，并发度最低。</li></ul><h3 id="16-1-环境准备"><a href="#16-1-环境准备" class="headerlink" title="16.1 环境准备"></a>16.1 环境准备</h3><pre class=" language-mysql"><code class="language-mysql"># 1、创建表CREATE TABLE `mylock`(`id` INT NOT NULL PRIMARY KEY AUTO_INCREMENT,`name` VARCHAR(20))ENGINE=MYISAM DEFAULT CHARSET=utf8 COMMENT='测试表锁';# 2、插入数据INSERT INTO `mylock`(`name`) VALUES('ZhangSan');INSERT INTO `mylock`(`name`) VALUES('LiSi');INSERT INTO `mylock`(`name`) VALUES('WangWu');INSERT INTO `mylock`(`name`) VALUES('ZhaoLiu');</code></pre><h3 id="16-2-锁表的命令"><a href="#16-2-锁表的命令" class="headerlink" title="16.2 锁表的命令"></a>16.2 锁表的命令</h3><blockquote><p>1、查看数据库表锁的命令。</p></blockquote><pre class=" language-mysql"><code class="language-mysql"># 查看数据库表锁的命令SHOW OPEN TABLES;</code></pre><blockquote><p>2、给<code>mylock</code>表上读锁，给<code>book</code>表上写锁。</p></blockquote><pre class=" language-mysql"><code class="language-mysql"># 给mylock表上读锁，给book表上写锁LOCK TABLE `mylock` READ, `book` WRITE;# 查看当前表的状态mysql> SHOW OPEN TABLES;+--------------------+------------------------------------------------------+--------+-------------+| Database           | Table                                                | In_use | Name_locked |+--------------------+------------------------------------------------------+--------+-------------+| sql_analysis       | book                                                 |      1 |           0 || sql_analysis       | mylock                                               |      1 |           0 |+--------------------+------------------------------------------------------+--------+-------------+</code></pre><blockquote><p>3、释放表锁。</p></blockquote><pre class=" language-mysql"><code class="language-mysql"># 释放给表添加的锁UNLOCK TABLES;# 查看当前表的状态mysql> SHOW OPEN TABLES;+--------------------+------------------------------------------------------+--------+-------------+| Database           | Table                                                | In_use | Name_locked |+--------------------+------------------------------------------------------+--------+-------------+| sql_analysis       | book                                                 |      0 |           0 || sql_analysis       | mylock                                               |      0 |           0 |+--------------------+------------------------------------------------------+--------+-------------+</code></pre><h3 id="16-3-读锁案例"><a href="#16-3-读锁案例" class="headerlink" title="16.3 读锁案例"></a>16.3 读锁案例</h3><blockquote><p>1、打开两个会话，<code>SESSION1</code>为<code>mylock</code>表添加读锁。</p></blockquote><pre class=" language-mysql"><code class="language-mysql"># 为mylock表添加读锁LOCK TABLE `mylock` READ;</code></pre><blockquote><p>2、打开两个会话，<code>SESSION1</code>是否可以读自己锁的表？是否可以修改自己锁的表？是否可以读其他的表？那么<code>SESSION2</code>呢？</p></blockquote><pre class=" language-shell"><code class="language-shell"># SESSION1# 问题1：SESSION1为mylock表加了读锁，可以读mylock表！mysql> SELECT * FROM `mylock`;+----+----------+| id | name     |+----+----------+|  1 | ZhangSan ||  2 | LiSi     ||  3 | WangWu   ||  4 | ZhaoLiu  |+----+----------+4 rows in set (0.00 sec)# 问题2：SESSION1为mylock表加了读锁，不可以修改mylock表！mysql> UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;ERROR 1099 (HY000): Table 'mylock' was locked with a READ lock and can't be updated# 问题3：SESSION1为mylock表加了读锁，不可以读其他的表！mysql> SELECT * FROM `book`;ERROR 1100 (HY000): Table 'book' was not locked with LOCK TABLES# SESSION2# 问题1：SESSION1为mylock表加了读锁，SESSION2可以读mylock表！mysql> SELECT * FROM `mylock`;+----+----------+| id | name     |+----+----------+|  1 | ZhangSan ||  2 | LiSi     ||  3 | WangWu   ||  4 | ZhaoLiu  |+----+----------+4 rows in set (0.00 sec)# 问题2：SESSION1为mylock表加了读锁，SESSION2修改mylock表会被阻塞，需要等待SESSION1释放mylock表！mysql> UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;^C^C -- query abortedERROR 1317 (70100): Query execution was interrupted# 问题3：SESSION1为mylock表加了读锁，SESSION2可以读其他表！mysql> SELECT * FROM `book`;+--------+------+| bookid | card |+--------+------+|      1 |    1 ||      7 |    4 ||      8 |    4 ||      9 |    5 ||      5 |    6 ||     17 |    6 ||     15 |    8 |+--------+------+24 rows in set (0.00 sec)</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210514213404.png" alt="读锁"></p><h3 id="16-4-写锁案例"><a href="#16-4-写锁案例" class="headerlink" title="16.4 写锁案例"></a>16.4 写锁案例</h3><blockquote><p>1、打开两个会话，<code>SESSION1</code>为<code>mylock</code>表添加写锁。</p></blockquote><pre class=" language-mysql"><code class="language-mysql"># 为mylock表添加写锁LOCK TABLE `mylock` WRITE;</code></pre><blockquote><p>2、打开两个会话，<code>SESSION1</code>是否可以读自己锁的表？是否可以修改自己锁的表？是否可以读其他的表？那么<code>SESSION2</code>呢？</p></blockquote><pre class=" language-shell"><code class="language-shell"># SESSION1# 问题1：SESSION1为mylock表加了写锁，可以读mylock的表！mysql> SELECT * FROM `mylock`;+----+----------+| id | name     |+----+----------+|  1 | ZhangSan ||  2 | LiSi     ||  3 | WangWu   ||  4 | ZhaoLiu  |+----+----------+4 rows in set (0.00 sec)# 问题2：SESSION1为mylock表加了写锁，可以修改mylock表!mysql> UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0# 问题3：SESSION1为mylock表加了写锁，不能读其他表!mysql> SELECT * FROM `book`;ERROR 1100 (HY000): Table 'book' was not locked with LOCK TABLES# SESSION2# 问题1：SESSION1为mylock表加了写锁，SESSION2读mylock表会阻塞，等待SESSION1释放！mysql> SELECT * FROM `mylock`;^C^C -- query abortedERROR 1317 (70100): Query execution was interrupted# 问题2：SESSION1为mylock表加了写锁，SESSION2读mylock表会阻塞，等待SESSION1释放！mysql> UPDATE `mylock` SET `name` = 'abc' WHERE `id` = 1;^C^C -- query abortedERROR 1317 (70100): Query execution was interrupted# 问题3：SESSION1为mylock表加了写锁，SESSION2可以读其他表！mysql> SELECT * FROM `book`;+--------+------+| bookid | card |+--------+------+|      1 |    1 ||      7 |    4 ||      8 |    4 ||      9 |    5 ||      5 |    6 ||     17 |    6 ||     15 |    8 |+--------+------+24 rows in set (0.00 sec)</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210514214018.png" alt="写锁"></p><h3 id="16-5-案例结论"><a href="#16-5-案例结论" class="headerlink" title="16.5 案例结论"></a>16.5 案例结论</h3><p><strong><code>MyISAM</code>引擎在执行查询语句<code>SELECT</code>之前，会自动给涉及到的所有表加读锁，在执行增删改之前，会自动给涉及的表加写锁。</strong></p><p>MySQL的表级锁有两种模式：</p><ul><li><font color='blue'>表共享读锁</font>（Table Read Lock）。</li><li><font color='blue'>表独占写锁</font>（Table Write Lock）。</li></ul><table><thead><tr><th align="center">锁类型</th><th align="center">可否兼容</th><th align="center">读</th><th align="center">写</th></tr></thead><tbody><tr><td align="center">读锁</td><td align="center">是</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">写锁</td><td align="center">是</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><p>対<code>MyISAM</code>表进行操作，会有以下情况：</p><ul><li>対<code>MyISAM</code>表的<font color='red'>读操作（加读锁），不会阻塞其他线程対同一表的读操作，但是会阻塞其他线程対同一表的写操作</font>。只有当读锁释放之后，才会执行其他线程的写操作。</li><li>対<code>MyISAM</code>表的<font color='red'>写操作（加写锁），会阻塞其他线程対同一表的读和写操作</font>，只有当写锁释放之后，才会执行其他线程的读写操作。</li><li><font color='red'><strong>简而言之，读锁会阻塞写，但不会阻塞读；写锁会把读和写都阻塞。</strong></font></li></ul><h3 id="16-6-表锁分析"><a href="#16-6-表锁分析" class="headerlink" title="16.6 表锁分析"></a>16.6 表锁分析</h3><pre class=" language-shell"><code class="language-shell">mysql> SHOW STATUS LIKE 'table%';+----------------------------+-------+| Variable_name              | Value |+----------------------------+-------+| Table_locks_immediate      | 173   || Table_locks_waited         | 0     || Table_open_cache_hits      | 5     || Table_open_cache_misses    | 8     || Table_open_cache_overflows | 0     |+----------------------------+-------+5 rows in set (0.00 sec)</code></pre><p>可以通过<code>Table_locks_immediate</code>和<code>Table_locks_waited</code>状态变量来分析系统上的表锁定。具体说明如下：</p><p><code>Table_locks_immediate</code>：<font color='red'>产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1。</font></p><p><code>Table_locks_waited</code>：<font color='blue'>出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加1），此值高则说明存在较严重的表级锁争用情况。</font></p><p><strong>此外，<font color='red'><code>MyISAM</code>的读写锁调度是写优先</font>，这也是<code>MyISAM</code>不适合作为主表的引擎。因为写锁后，其他线程不能进行任何操作，大量的写操作会使查询很难得到锁，从而造成永远阻塞。</strong></p><h2 id="17-行锁-偏写"><a href="#17-行锁-偏写" class="headerlink" title="17 行锁(偏写)"></a>17 行锁(偏写)</h2><p><strong>行锁特点：</strong></p><ul><li>偏向<code>InnoDB</code>存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度最高。</li></ul><p><strong><code>InnoDB</code>存储引擎和<code>MyISAM</code>存储引擎最大不同有两点：一是支持事务，二是采用行锁。</strong></p><h3 id="17-1-事务"><a href="#17-1-事务" class="headerlink" title="17.1 事务"></a>17.1 事务</h3><blockquote><p>事务的ACID属性</p></blockquote><ul><li>原子性：<code>Atomicity</code>。要么一起成功，要么一起失败。</li><li>一致性：<code>Consistency</code>。数据保持一致。</li><li>隔离性：<code>Isolation</code>。不受外界影响。</li><li>持久性：<code>Durability</code>。修改后永久有效。</li></ul><blockquote><p>并发事务处理带来的问题</p></blockquote><ul><li>更新丢失：另一个事务的更新覆盖了有其他事务所做的更新。</li><li>脏读：事务A读取到了事务B<font color='red'>未提交的修改</font>数据，还在这个数据上做了操作。此时，如果事务B回滚，事务A读取的数据无效，<font color='blue'>不符合一致性要求</font>。</li><li>不可重复读：事务A读取到了事务B<font color='red'>已提交的修改数据</font>，前后两次数据不一样。<font color='blue'>不符合隔离性</font>。</li><li>幻读：事务A读取到了事务B<font color='red'>提交的新增删除数据</font>，后面读到的数据比前一次多了或少了内容，<font color='blue'>不符合隔离性</font>。<ul><li>脏读是事务B里<font color='red'>修改</font>了数据。</li><li>幻读是事务B里<font color='red'>新增</font>了数据。</li></ul></li></ul><blockquote><p>事务的隔离级别</p></blockquote><table><thead><tr><th align="center">隔离级别</th><th align="center">读数据一致性</th><th align="center">脏读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">未提交读</td><td align="center">最低级别，只能保证不读物理上损坏的数据</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">已提交读</td><td align="center">语句级</td><td align="center">否</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">可重复读</td><td align="center">事务级</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">可序列化</td><td align="center">最高级别，事务级</td><td align="center">否</td><td align="center">否</td><td align="center">否</td></tr></tbody></table><h3 id="17-2-行锁案例"><a href="#17-2-行锁案例" class="headerlink" title="17.2 行锁案例"></a>17.2 行锁案例</h3><blockquote><p>0、环境准备</p></blockquote><pre class=" language-mysql"><code class="language-mysql"># 建表语句CREATE TABLE `test_innodb_lock`(`a` INT,`b` VARCHAR(16))ENGINE=INNODB DEFAULT CHARSET=utf8 COMMENT='测试行锁'; # 插入数据INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(1, 'b2');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(2, '3');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(3, '4000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(4, '5000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(5, '6000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(6, '7000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(7, '8000');INSERT INTO `test_innodb_lock`(`a`, `b`) VALUES(8, '9000');# 创建索引CREATE INDEX idx_test_a ON `test_innodb_lock`(a);CREATE INDEX idx_test_b ON `test_innodb_lock`(b);</code></pre><blockquote><p>1、开启手动提交</p></blockquote><p>打开<code>SESSION1</code>和<code>SESSION2</code>两个会话，都开启手动提交。</p><pre class=" language-shell"><code class="language-shell"># 开启MySQL数据库的手动提交mysql> SET autocommit=0;Query OK, 0 rows affected (0.00 sec)</code></pre><blockquote><p>2、读己知所写</p></blockquote><pre class=" language-shell"><code class="language-shell"># SESSION1 # SESSION1対test_innodb_lock表做写操作，但是没有commit。# 执行修改SQL之后，查询一下test_innodb_lock表，发现数据被修改了。mysql> UPDATE `test_innodb_lock` SET `b` = '88' WHERE `a` = 1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql> SELECT * FROM `test_innodb_lock`;+------+------+| a    | b    |+------+------+|    1 | 88   ||    2 | 3    ||    3 | 4000 ||    4 | 5000 ||    5 | 6000 ||    6 | 7000 ||    7 | 8000 ||    8 | 9000 |+------+------+8 rows in set (0.00 sec)# SESSION2 # SESSION2这时候来查询test_innodb_lock表。# 发现SESSION2是读不到SESSION1未提交的数据的。（没有出现脏读）mysql> SELECT * FROM `test_innodb_lock`;+------+------+| a    | b    |+------+------+|    1 | b2   ||    2 | 3    ||    3 | 4000 ||    4 | 5000 ||    5 | 6000 ||    6 | 7000 ||    7 | 8000 ||    8 | 9000 |+------+------+8 rows in set (0.00 se</code></pre><blockquote><p>3、行锁两个SESSION同时対一条记录进行写操作</p></blockquote><p>等SESSION1执行commit语句之后，SESSION2的SQL才会执行</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210516223348.png" alt=""></p><pre class=" language-shell"><code class="language-shell"># SESSION1 対test_innodb_lock表的`a`=1这一行进行写操作，但是没有commitmysql> UPDATE `test_innodb_lock` SET `b` = '99' WHERE `a` = 1;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0# SESSION2 也对test_innodb_lock表的`a`=1这一行进行写操作，但是发现阻塞了！！！mysql> UPDATE `test_innodb_lock` SET `b` = 'asdasd' WHERE `a` = 1;ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</code></pre><blockquote><p>4、行锁两个SESSION同时对不同记录进行写操作</p></blockquote><p>SESSION1和SESSION2同时对不同的行进行写操作互不影响</p><pre class=" language-shell"><code class="language-shell"># SESSION1 対test_innodb_lock表的`a`=6这一行进行写操作，但是没有commitmysql> UPDATE `test_innodb_lock` SET `b` = '8976' WHERE `a` = 6;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0# SESSION2 対test_innodb_lock表的`a`=4这一行进行写操作，没有阻塞！！！mysql> UPDATE `test_innodb_lock` SET `b` = 'Ringo' WHERE `a` = 4;Query OK, 1 row affected (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 0</code></pre><h3 id="17-3-索引失效行锁变表锁"><a href="#17-3-索引失效行锁变表锁" class="headerlink" title="17.3 索引失效行锁变表锁"></a>17.3 索引失效行锁变表锁</h3><pre class=" language-shell"><code class="language-shell"># SESSION1 执行SQL语句，没有执行commit。# 由于`b`字段是字符串，但是没有加单引号导致索引失效mysql> UPDATE `test_innodb_lock` SET `a` = 888 WHERE `b` = 8000;Query OK, 1 row affected, 1 warning (0.00 sec)Rows matched: 1  Changed: 1  Warnings: 1# SESSION2 和SESSION1操作的并不是同一行，但是也被阻塞了？？？# 由于SESSION1执行的SQL索引失效，导致行锁升级为表锁，SESSION2不能修改了。mysql> UPDATE `test_innodb_lock` SET `b` = '1314' WHERE `a` = 1;ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</code></pre><h3 id="17-4-间隙锁的危害"><a href="#17-4-间隙锁的危害" class="headerlink" title="17.4 间隙锁的危害"></a>17.4 间隙锁的危害</h3><blockquote><p>什么是间隙锁？</p></blockquote><p>当我们用范围条件而不是相等条件检索数据，并请求共享或者排他锁时，<code>InnoDB</code>会给符合条件的已有数据记录的索引项加锁，对于键值<font color='red'>在条件范围内但并不存在的记录，叫做”间隙(GAP)”</font>。</p><p><code>InnoDB</code>也会对这个”间隙”加锁，这种锁的机制就是所谓的”间隙锁”。</p><blockquote><p>间隙锁的危害</p></blockquote><p>因为<code>Query</code>执行过程中通过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值不存在。</p><p>间隙锁有一个比较致命的缺点，就是<strong>当锁定一个范围的键值后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。</strong>在某些场景下这可能会対性能造成很大的危害。</p><h3 id="17-5-面试题：如何锁定一行"><a href="#17-5-面试题：如何锁定一行" class="headerlink" title="17.5 面试题：如何锁定一行"></a>17.5 面试题：如何锁定一行</h3><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210525171052.png" alt="锁定一行"></p><p><font color='red'><code>SELECT .....FOR UPDATE</code></font>在锁定某一行后，其他写操作会被阻塞，直到锁定的行被<code>COMMIT</code>。</p><h3 id="17-6-案例结论"><a href="#17-6-案例结论" class="headerlink" title="17.6 案例结论"></a>17.6 案例结论</h3><p><code>InnoDB</code>存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于<code>MyISAM</code>的表级锁定的。<font color='blue'>当系统并发量较高的时候，<code>InnoDB</code>的整体性能和<code>MyISAM</code>相比就会有比较明显的优势了</font>。</p><p>但是，<code>InnoDB</code>的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让<code>InnoDB</code>的整体性能表现不仅不能比<code>MyISAM</code>高，甚至可能会更差。</p><h3 id="17-7-行锁分析"><a href="#17-7-行锁分析" class="headerlink" title="17.7 行锁分析"></a>17.7 行锁分析</h3><pre class=" language-shell"><code class="language-shell">mysql> SHOW STATUS LIKE 'innodb_row_lock%';+-------------------------------+--------+| Variable_name                 | Value  |+-------------------------------+--------+| Innodb_row_lock_current_waits | 0      || Innodb_row_lock_time          | 124150 || Innodb_row_lock_time_avg      | 31037  || Innodb_row_lock_time_max      | 51004  || Innodb_row_lock_waits         | 4      |+-------------------------------+--------+5 rows in set (0.00 sec)</code></pre><p>対各个状态量的说明如下：</p><ul><li><code>Innodb_row_lock_current_waits</code>：当前正在等待锁定的数量。</li><li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度（重要）。</li><li><code>Innodb_row_lock_time_avg</code>：每次等待所花的平均时间（重要）。</li><li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花的时间。</li><li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数（重要）。</li></ul><p>尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手制定优化策略。</p><h2 id="18-主从复制"><a href="#18-主从复制" class="headerlink" title="18 主从复制"></a>18 主从复制</h2><h3 id="18-1-复制基本原理"><a href="#18-1-复制基本原理" class="headerlink" title="18.1 复制基本原理"></a>18.1 复制基本原理</h3><p><font color='red'>slave 会从 master 读取 binlog 来进行数据同步。</font></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512210231.png" alt="主从复制"></p><p>MySQL复制过程分为三步：</p><ul><li>Master将改变记录到<font color='blue'>二进制日志(Binary Log)</font>。这些记录过程叫做二进制日志事件，<code>Binary Log Events</code>；</li><li>Slave将Master的<code>Binary Log Events</code>拷贝到它的<font color='blue'>中继日志(Replay  Log)</font>;</li><li>Slave重做中继日志中的事件，将改变应用到自己的数据库中。<font color='blue'>MySQL复制是异步且串行化的</font>。</li></ul><h3 id="18-2-复制基本原则"><a href="#18-2-复制基本原则" class="headerlink" title="18.2 复制基本原则"></a>18.2 复制基本原则</h3><ul><li>每个Slave只有一个Master。</li><li>每个Slave只能有一个唯一的服务器ID。</li><li>每个Master可以有多个Salve。</li></ul><blockquote><p>存在的问题</p></blockquote><ul><li>因为发生多次 IO，存在延时问题</li></ul><h3 id="18-3-一主一从常见配置"><a href="#18-3-一主一从常见配置" class="headerlink" title="18.3 一主一从常见配置"></a>18.3 一主一从常见配置</h3><blockquote><p>1、<font color='red'>Master和Slave的MySQL服务器版本一致</font>且后台以服务运行。</p></blockquote><pre class=" language-shell"><code class="language-shell"># 创建mysql-slave1实例docker run -p 3307:3306 --name mysql-slave1 \-v /root/mysql-slave1/log:/var/log/mysql \-v /root/mysql-slave1/data:/var/lib/mysql \-v /root/mysql-slave1/conf:/etc/mysql \-e MYSQL_ROOT_PASSWORD=333 \-d mysql:5.7</code></pre><blockquote><p>2、主从配置都是配在[mysqld]节点下，都是小写</p></blockquote><pre class=" language-shell"><code class="language-shell"># Master修改 my.ini 配置文件[mysqld]# 主服务器唯一 ID（必须）server-id=1# 启用二进制日志（必须）log-bin=自己本地的路径/data/mysqlbin# 设置不要复制的数据库binlog-ignore-db=mysql# 设置需要复制的数据库binlog-do-db=需要复制的主数据库名字# 设置 logbin 格式，默认是STATEMENTbinlog_format=STATEMENTread-only=0</code></pre><pre class=" language-shell"><code class="language-shell"># Slave修改 my.cnf 的[mysqld]栏位下[mysqld]# 从机服务 id（必须）server-id=2# 注意 my.cnf 中有 server-id = 1# 设置中继日志relay-log=mysql-relay</code></pre><blockquote><p>3、因修改过配置文件，请主机+从机都重启后台 mysql 服务</p></blockquote><blockquote><p>4、主机从机都关闭防火墙、安全工具（腾讯管家等）</p></blockquote><blockquote><p>5、在 Windows 主机上建立帐户并授权 slave</p></blockquote><pre class=" language-shell"><code class="language-shell">#创建用户，并授权# 1、GRANT REPLICATION SLAVE ON *.* TO '备份账号名称'@'从机IP地址' IDENTIFIED BY 'password';mysql> GRANT REPLICATION SLAVE ON *.* TO 'zhangsan'@'172.18.0.3' IDENTIFIED BY '123456';Query OK, 0 rows affected, 1 warning (0.01 sec)</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512211450.png" alt=""></p><blockquote><p>6、查询 master 的状态，并记录下 File 和 Position 的值(后面要用)</p></blockquote><pre class=" language-shell"><code class="language-shell">#查询 master 的状态# 每次配从机的时候都要SHOW MASTER STATUS;查看最新的File和Positionshow master status;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512211720.png" alt=""></p><p>执行完此步骤后不要再操作主服务器 MYSQL，防止主服务器状态值变化。</p><blockquote><p>7、在 Linux 从机上配置需要复制的主机</p></blockquote><pre class=" language-shell"><code class="language-shell">#查询 master 的状态CHANGE MASTER TO MASTER_HOST='主机 IP',                MASTER_USER='创建用户名',                MASTER_PASSWORD='创建的密码',                MASTER_LOG_FILE='mysql-bin.File的编号',                MASTER_LOG_POS=Position的最新值;</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512211947.png" alt=""></p><blockquote><p>8、启动从服务器复制功能</p></blockquote><pre class=" language-shell"><code class="language-shell"># 开启Slave从机的复制START SLAVE;# 查看Slave状态# Slave_IO_Running 和 Slave_SQL_Running 必须同时为Yes 说明主从复制配置成功！SHOW SLAVE STATUS\G</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210512212247.png" alt=""></p><blockquote><p>9、主机新建库、新建表、insert 记录，从机复制</p></blockquote><pre class=" language-shell"><code class="language-shell"># Master创建数据库mysql> create database test_replication;Query OK, 1 row affected (0.01 sec)# Slave查询数据库mysql> show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || performance_schema || sys                || test_replication   |+--------------------+5 rows in set (0.00 sec)</code></pre><blockquote><p>10、停止从服务复制功能</p></blockquote><pre class=" language-shell"><code class="language-shell"># 1、停止Slavemysql> STOP SLAVE;Query OK, 0 rows affected (0.00 sec)# 2、重新配置主从# MASTER_LOG_FILE 和 MASTER_LOG_POS一定要根据最新的数据来配mysql> CHANGE MASTER TO MASTER_HOST='172.18.0.4',    -> MASTER_USER='zhangsan',    -> MASTER_PASSWORD='123456',    -> MASTER_LOG_FILE='mysql-bin.000001',    -> MASTER_LOG_POS=797;Query OK, 0 rows affected, 2 warnings (0.01 sec)mysql> START SLAVE;Query OK, 0 rows affected (0.00 sec)mysql> SHOW SLAVE STATUS\G*************************** 1. row ***************************               Slave_IO_State: Waiting for master to send event                  Master_Host: 172.18.0.4                  Master_User: zhangsan                  Master_Port: 3306                Connect_Retry: 60              Master_Log_File: mysql-bin.000001          Read_Master_Log_Pos: 797               Relay_Log_File: b030ad25d5fe-relay-bin.000002                Relay_Log_Pos: 320        Relay_Master_Log_File: mysql-bin.000001             Slave_IO_Running: Yes            Slave_SQL_Running: Yes              Replicate_Do_DB:           Replicate_Ignore_DB:            Replicate_Do_Table:        Replicate_Ignore_Table:       Replicate_Wild_Do_Table:   Replicate_Wild_Ignore_Table:                    Last_Errno: 0                   Last_Error:                  Skip_Counter: 0          Exec_Master_Log_Pos: 797              Relay_Log_Space: 534              Until_Condition: None               Until_Log_File:                 Until_Log_Pos: 0           Master_SSL_Allowed: No           Master_SSL_CA_File:            Master_SSL_CA_Path:               Master_SSL_Cert:             Master_SSL_Cipher:                Master_SSL_Key:         Seconds_Behind_Master: 0Master_SSL_Verify_Server_Cert: No                Last_IO_Errno: 0                Last_IO_Error:                Last_SQL_Errno: 0               Last_SQL_Error:   Replicate_Ignore_Server_Ids:              Master_Server_Id: 1                  Master_UUID: bd047557-b20c-11ea-9961-0242ac120002             Master_Info_File: /var/lib/mysql/master.info                    SQL_Delay: 0          SQL_Remaining_Delay: NULL      Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates           Master_Retry_Count: 86400                  Master_Bind:       Last_IO_Error_Timestamp:      Last_SQL_Error_Timestamp:                Master_SSL_Crl:            Master_SSL_Crlpath:            Retrieved_Gtid_Set:             Executed_Gtid_Set:                 Auto_Position: 0         Replicate_Rewrite_DB:                  Channel_Name:            Master_TLS_Version: 1 row in set (0.00 sec)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> MySQL优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> MySQL </tag>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-二叉树】遍历的应用</title>
      <link href="/2021/04/14/shu-ju-jie-gou-er-cha-shu-bian-li-de-ying-yong/"/>
      <url>/2021/04/14/shu-ju-jie-gou-er-cha-shu-bian-li-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考点"><a href="#一、考点" class="headerlink" title="一、考点"></a>一、考点</h2><ul><li>考察应聘者对二叉树中序遍历的理解程度。</li><li>考察应聘者分析复杂问题的能力。把构建二叉树的问题大问题分解成构建左、右子树的两个小问题，然后递归解决。</li><li>考察应聘者分析复杂问题的能力。应聘者只有画出二叉树的结构图、通过具体的例子找出中序遍历下一个节点的规律，才有可能设计出可行的算法。(感觉上找规律很重要)</li></ul><h2 id="二、前、中、后序遍历及层次遍历"><a href="#二、前、中、后序遍历及层次遍历" class="headerlink" title="二、前、中、后序遍历及层次遍历"></a>二、前、中、后序遍历及层次遍历</h2><h3 id="2-1-前序遍历"><a href="#2-1-前序遍历" class="headerlink" title="2.1 前序遍历"></a>2.1 前序遍历</h3><p>根——左——右</p><ul><li>递归写法</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前序遍历（递归）方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrderWithRecursion</span><span class="token punctuation">(</span>HeroNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HeroNode p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个移动指针</span>    <span class="token comment" spellcheck="true">// 递归结束条件</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二叉树为空，无法遍历~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 递归体</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 根节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 左子树</span>        <span class="token function">preOrderWithRecursion</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 右子树</span>        <span class="token function">preOrderWithRecursion</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>非递归写法</li></ul><p>&emsp;&emsp;利用栈，一直向左遍历，非空即入栈，同时加入列表；弹出栈顶，同样方法，遍历右子树</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//前序遍历（非递归）方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">preOrderWithStack</span><span class="token punctuation">(</span>HeroNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>HeroNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个移动指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外循环条件</span>        <span class="token comment" spellcheck="true">// 一直向左遍历，非空即入栈，同时加入列表</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内循环条件</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 弹出栈顶，遍历右子树</span>        HeroNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 输出前序遍历结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>HeroNode heroNode <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-2-中序遍历"><a href="#2-2-中序遍历" class="headerlink" title="2.2 中序遍历"></a>2.2 中序遍历</h3><p>左——根——右</p><ul><li>非递归</li></ul><p>&emsp;&emsp;利用栈，一直向左遍历，非空即入栈；弹出栈顶，加入列表，同样方法，遍历右子树</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中序遍历（非递归）方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">infixOrderWithStack</span><span class="token punctuation">(</span>HeroNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>HeroNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个移动指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一直向左遍历，非空即入栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 弹出栈顶，加入列表，遍历右子树</span>        HeroNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> temp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 输出中序遍历结果</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>HeroNode heroNode <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>heroNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><font color=#0000FF ><strong>注意：</strong></font></p><p>&emsp;&emsp;<font color=#FF0000 >前序遍历和中序遍历代码几乎一样，不同仅仅是元素添加到列表的时机。</font></p><h3 id="2-3-后序遍历"><a href="#2-3-后序遍历" class="headerlink" title="2.3 后序遍历"></a>2.3 后序遍历</h3><p>左——右——根</p><ul><li>非递归写法</li></ul><p>&emsp;&emsp;借助前序遍历，前序遍历是 根 左 右，先将前序遍历代码改成 根 右 左，然后反转即是后序遍历 左 右 根</p><p>&emsp;&emsp;利用栈，一直向右遍历，非空即入栈，同时加入列表；弹出栈顶，同样方法，遍历左子树，最后列表倒叙输出。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 后序遍历（非递归）方法</span><span class="token comment" spellcheck="true">// 前序遍历是 根 左 右，先将前序遍历代码改成 根 右 左，然后反转即是后序遍历 左 右 根 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">postOrderWithStack</span><span class="token punctuation">(</span>HeroNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>HeroNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    HeroNode p <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个移动指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">!=</span>null <span class="token operator">||</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一直向右遍历，非空即入栈，同时加入列表</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 弹出栈顶，遍历左子树</span>        HeroNode temp <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> temp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 输出后序遍历结果：倒叙输出列表即可</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-层次遍历"><a href="#2-4-层次遍历" class="headerlink" title="2.4 层次遍历"></a>2.4 层次遍历</h3><p>借助队列实现</p><ul><li>先将二叉树的头结点入队列，然后出队列。出队列时，访问该节点。</li><li>如果有左子树，则将左子树的根结点入队，然后出队列。出队列时，访问该节点。</li><li>如果有右子树，则将右子树的根结点入队。然后出队列。出队列时，访问该节点。 </li><li>如此反复，直到队列为空为止。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 完全二叉树层次遍历，结果即是顺序存储结果</span><span class="token comment" spellcheck="true">/**     * 借助队列实现      *     1.先将二叉树的头结点入队列，然后出队列。出队列时，访问该节点。     *     2.如果有左子树，则将左子树的根结点入队，然后出队列。出队列时，访问该节点。     *     3.如果有右子树，则将右子树的根结点入队。然后出队列。出队列时，访问该节点。      *     4.如此反复，直到队列为空为止。     * @param root     * @return     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>HeroNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HeroNode p <span class="token operator">=</span> root<span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>HeroNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>HeroNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空树~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1.先将二叉树的头结点入队列</span>    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不能使用queue！=null来判断空值</span>        <span class="token comment" spellcheck="true">// 2.出队列，加入列表</span>        HeroNode tmp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.判断左子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 4.判断右子树</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、重建二叉树"><a href="#三、重建二叉树" class="headerlink" title="三、重建二叉树"></a>三、重建二叉树</h2><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title="3.1 题目描述"></a>3.1 题目描述</h3><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p><strong>举例：</strong></p><pre class=" language-java"><code class="language-java">前序遍历 preorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>中序遍历 inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span></code></pre><p>返回如下的二叉树：</p><pre class=" language-java"><code class="language-java">    <span class="token number">3</span>   <span class="token operator">/</span> \  <span class="token number">9</span>  <span class="token number">20</span>    <span class="token operator">/</span>  \   <span class="token number">15</span>   <span class="token number">7</span></code></pre><p><strong>限制：</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">0</span> <span class="token operator">&lt;=</span> 节点个数 <span class="token operator">&lt;=</span> <span class="token number">5000</span></code></pre><h3 id="3-2-题目解析"><a href="#3-2-题目解析" class="headerlink" title="3.2 题目解析"></a>3.2 题目解析</h3><p>对于任意一颗树而言，前序遍历的形式总是</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span> 根节点<span class="token punctuation">,</span> <span class="token punctuation">[</span>左子树的前序遍历结果<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>右子树的前序遍历结果<span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre><p>即<font color=#FF0000 >根节点总是前序遍历中的第一个节点。</font></p><p>中序遍历的形式总是</p><pre><code>[ [左子树的中序遍历结果], 根节点, [右子树的中序遍历结果] ]</code></pre><ul><li>先根据前序序列的第一个数字创建根节点</li><li>接下来在中序序列中找到根节点的位置</li><li>确定左、右子树节点的数量</li><li>在前序遍历和中序遍历序列中划分了左、右子树节点的之后，便可以递归的调用去分别构建它的左、右子树</li></ul><p><strong>优化：</strong></p><p>可以考虑使用哈希表来帮助我们快速地定位根节点。对于<font color=#FF0000 >哈希映射中的每个键值对，键表示一个元素（节点的值），值表示其在中序遍历中的出现位置。</font>在构造二叉树的过程之前，我们可以对中序遍历的列表进行一遍扫描，就可以构造出这个哈希映射。在此后构造二叉树的过程中，我们就只需要 O(1)<em>O</em>(1) 的时间对根节点进行定位了。</p><h3 id="3-3-代码实现"><a href="#3-3-代码实现" class="headerlink" title="3.3 代码实现"></a>3.3 代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 二叉树节点* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode(int x) { val = x; }* }*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> indexMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> preorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 构造一个哈希映射，帮助快速定位根节点在中序序列中的位置</span>        indexMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            indexMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// key：中序遍历的结果，value：结果对应的下标</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**    * @param preorder            前序序列    * @param inorder            中序序列    * @param preorder_left        前序序列中开始的位置    * @param preorder_right    前序序列中结束的位置    * @param inorder_left        中序序列中开始的位置    * @param inorder_right        中序序列中结束的位置    * @return    */</span>    <span class="token keyword">public</span> TreeNode <span class="token function">myBuildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preorder_left<span class="token punctuation">,</span> <span class="token keyword">int</span> preorder_right<span class="token punctuation">,</span> <span class="token keyword">int</span> inorder_left<span class="token punctuation">,</span> <span class="token keyword">int</span> inorder_right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 递归结束条件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>preorder_left <span class="token operator">></span> preorder_right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 前序遍历中的第一个节点就是根节点，获取其索引</span>    <span class="token keyword">int</span> preorder_root <span class="token operator">=</span> preorder_left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在中序遍历中定位根节点，保存的都是下标值</span>    <span class="token keyword">int</span> inorder_root <span class="token operator">=</span> indexMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preorder_root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取前序序列中左子树中节点的数目</span>    <span class="token keyword">int</span> size_left_subtree <span class="token operator">=</span> inorder_root <span class="token operator">-</span> inorder_left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建根节点</span>    TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>preorder_root<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 递归地构造左子树，并连接到根节点</span>    <span class="token comment" spellcheck="true">// 先序遍历中「从 左边界+1 开始的 size_left_subtree」个元素就对应了中序遍历中「从 左边界 开始到 根节点定位-1」的元素</span>    root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> preorder_left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preorder_left<span class="token operator">+</span>size_left_subtree<span class="token punctuation">,</span> inorder_left<span class="token punctuation">,</span> inorder_root<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 递归地构造右子树，并连接到根节点</span>    <span class="token comment" spellcheck="true">// 先序遍历中「从 左边界+1+左子树节点数目 开始到 右边界」的元素就对应了中序遍历中「从 根节点定位+1 到 右边界」的元素</span>    root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">,</span> preorder_left<span class="token operator">+</span>size_left_subtree<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> preorder_right <span class="token punctuation">,</span> inorder_root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> inorder_right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-利用迭代方法实现"><a href="#3-4-利用迭代方法实现" class="headerlink" title="3.4 利用迭代方法实现"></a>3.4 利用迭代方法实现</h3><p>分析：。。。。。（待写）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 二叉树节点* public class TreeNode {*     int val;*     TreeNode left;*     TreeNode right;*     TreeNode(int x) { val = x; }* }*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder <span class="token operator">==</span> null <span class="token operator">||</span> preorder<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> inorderIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> preorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> preorderVal <span class="token operator">=</span> preorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">!=</span> inorder<span class="token punctuation">[</span>inorderIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorderVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val <span class="token operator">==</span> inorder<span class="token punctuation">[</span>inorderIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    inorderIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorderVal<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、二叉树的下一个节点"><a href="#四、二叉树的下一个节点" class="headerlink" title="四、二叉树的下一个节点"></a>四、二叉树的下一个节点</h2><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title="4.1 题目描述"></a>4.1 题目描述</h3><p>给定一颗二叉树和其中的一个节点，如何找出中序遍历序列的下一个节点？</p><p>注意，树中的节点不仅包含左右子节点，同时包含指向父节点的指针。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 二叉树节点 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeLinkNode</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    TreeLinkNode left <span class="token operator">=</span> null<span class="token punctuation">;</span>    TreeLinkNode right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父节点</span>    TreeLinkNode parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-2-题目解析"><a href="#4-2-题目解析" class="headerlink" title="4.2 题目解析"></a>4.2 题目解析</h3><p>画出二叉树的结构图、通过具体的例子找出中序遍历下一个节点的规律，才有可能设计出可行的算法。</p><p>通过对下一个节点的情况分析，主要有以下两种情况：</p><ul><li>如果一个节点的右子树不为空，那么该节点的下一个节点是右子树的最左节点。也就是说，从右子节点出发一直沿着指向左子节点的指针就能找到它的下一个节点。 如下图：</li></ul><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210414172449.png" alt=""></p><p>比如，当前节点是b，先到其右子节点e，再到左子节点g</p><ul><li>如果一个节点的右子树为空<ul><li>当前节点是其父节点的左子节点，则其下一个节点就是其父节点</li><li>当前节点是其父节点的右子节点，那么需要沿着父节点的指针一直向上遍历，直到找到一个节点（该节点是其父节点的左子节点），那么该节点的父节点便是要找的下一个节点。</li></ul></li></ul><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210414180950.png" alt=""></p><p>比如，当前节点是h，沿着父节点的指针向上遍历，先到达节点e，由于节点e是它父节点b的右子节点，继续向上遍历达到节点b。由于节点b是它父节点a的左子节点，因此节点b的父节点a就是节点h的下一个节点。</p><h3 id="4-3-代码实现"><a href="#4-3-代码实现" class="headerlink" title="4.3 代码实现"></a>4.3 代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 二叉树节点 */</span><span class="token keyword">class</span> <span class="token class-name">TreeLinkNode</span> <span class="token punctuation">{</span>    String val<span class="token punctuation">;</span>    TreeLinkNode left <span class="token operator">=</span> null<span class="token punctuation">;</span>    TreeLinkNode right <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 父节点</span>    TreeLinkNode parent <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token function">TreeLinkNode</span><span class="token punctuation">(</span>String val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * 寻找二叉树当前节点在中序序列中的下一个节点     * @param pNode     * @return     */</span><span class="token keyword">public</span> <span class="token keyword">static</span> TreeLinkNode <span class="token function">getNext</span><span class="token punctuation">(</span>TreeLinkNode pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 中间指针</span>    TreeLinkNode pNext <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.当前节点有右子树的情况</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从右子节点出发，一路向左</span>        TreeLinkNode pRight <span class="token operator">=</span> pNode<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pRight<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pRight <span class="token operator">=</span> pRight<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pNext <span class="token operator">=</span> pRight<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>pNode<span class="token punctuation">.</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.当前节点没有右子树情况</span>        TreeLinkNode pParent <span class="token operator">=</span> pNode<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前节点的父节点</span>        TreeLinkNode pCurrent <span class="token operator">=</span> pNode<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前节点赋给一个中间变量</span>        <span class="token comment" spellcheck="true">// 2.1 当前节点是其父节点的左子节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pParent<span class="token punctuation">.</span>left <span class="token operator">==</span> pNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pNext <span class="token operator">=</span> pParent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2.2 当前节点是其父节点的右子节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pParent<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> pParent<span class="token punctuation">.</span>right <span class="token operator">==</span> pCurrent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pCurrent <span class="token operator">=</span> pParent<span class="token punctuation">;</span>            pParent <span class="token operator">=</span> pCurrent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pNext <span class="token operator">=</span> pParent<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pNext<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 二叉树 </category>
          
          <category> 遍历 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】二维数组中的查找</title>
      <link href="/2021/04/13/shu-ju-jie-gou-shu-zu-er-wei-shu-zu-zhong-de-cha-zhao/"/>
      <url>/2021/04/13/shu-ju-jie-gou-shu-zu-er-wei-shu-zu-zhong-de-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考察点"><a href="#一、考察点" class="headerlink" title="一、考察点"></a>一、考察点</h2><p>考查应聘者分析问题的能力。<font color=#FF0000 >当应聘者发现问题比较复杂时，能不能通过具体的例子找出其中的规律，</font>是能否解决这个问题的关键所在。这个题目只要从一个具体的二维数组的右上角开始分析，就能找到查找的规律，从而找到解决问题的突破口。</p><p><font color=#0000FF >当我们需要解决一个复杂的问题时，一个很有效的办法就是从一个具体的问题入手，通过分析简单具体的例子，试图寻找普遍的规律。</font></p><h2 id="二、二维数组中的查找"><a href="#二、二维数组中的查找" class="headerlink" title="二、二维数组中的查找"></a>二、二维数组中的查找</h2><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title="2.1 题目描述"></a>2.1 题目描述</h3><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例 ：</strong></p><p>现有矩阵 matrix 如下：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>   <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span>   <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>给定 target = <code>5</code>，返回 <code>true</code>。</p><p>给定 target = <code>20</code>，返回 <code>false</code>。</p><p><strong>限制：</strong></p><pre class=" language-java"><code class="language-java"><span class="token number">0</span> <span class="token operator">&lt;=</span> n <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token number">0</span> <span class="token operator">&lt;=</span> m <span class="token operator">&lt;=</span> <span class="token number">1000</span></code></pre><h3 id="2-2-题目分析"><a href="#2-2-题目分析" class="headerlink" title="2.2 题目分析"></a>2.2 题目分析</h3><p><font color=#FF0000 >从右上角看，这个矩阵类似于二叉排序树。</font></p><ul><li>从二维数组的右上角开始查找。<ul><li>如果当前元素等于目标值，则返回 <code>true</code>，查找结束。</li><li>如果当前元素大于目标值，则剔除当前元素所在的列，即移到左边一列。</li><li>如果当前元素小于目标值，则剔除当前元素所在的行，即移到下边一行。</li></ul></li></ul><p>如果要查找的数字不在数组的右上角，则每一次都在数组的查找范围中剔除一行或者一列，这样每一步都可以缩小查找的范围，直到找到要查找的数字，或者查找范围为空。</p><h3 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> found <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当matrix为null时，求matrix[0].length会报错</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token operator">==</span>null <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> found<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 行数</span>        <span class="token keyword">int</span> columns <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 列数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rows<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> columns<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 当前行数</span>            <span class="token keyword">int</span> column <span class="token operator">=</span> columns <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 当前列数</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">&lt;</span>rows <span class="token operator">&amp;&amp;</span> column<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 右上角值等于target，直接返回</span>                    found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 右上角值大于target，剔除该列，当前列数减一</span>                    column<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// // 右上角值小于target，剔除改行，当前行数加一</span>                    row<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> found<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】数组中寻找重复数问题</title>
      <link href="/2021/04/12/shu-ju-jie-gou-shu-zu-shu-zu-zhong-xun-zhao-chong-fu-shu-wen-ti/"/>
      <url>/2021/04/12/shu-ju-jie-gou-shu-zu-shu-zu-zhong-xun-zhao-chong-fu-shu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、考察点"><a href="#一、考察点" class="headerlink" title="一、考察点"></a>一、考察点</h2><p>&emsp;&emsp;这类题考察的是程序员的沟通能力。如果面试官提出不同的功能要求（找出任意一个重复数字、找出所有重复的数组）或者性能要求（时间效率优先、空间效率优先），那么最终选取的算法也将不同。</p><h2 id="二、题目一：找出数组中重复的数字"><a href="#二、题目一：找出数组中重复的数字" class="headerlink" title="二、题目一：找出数组中重复的数字"></a>二、题目一：找出数组中重复的数字</h2><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title="2.1 题目描述"></a>2.1 题目描述</h3><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1：</strong></p><pre class=" language-java"><code class="language-java">输入：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token number">2</span> 或 <span class="token number">3</span> </code></pre><p><strong>限制：</strong></p><pre><code>2 &lt;= n &lt;= 100000</code></pre><h3 id="2-2-方法一：排序"><a href="#2-2-方法一：排序" class="headerlink" title="2.2 方法一：排序"></a>2.2 方法一：排序</h3><h4 id="2-2-1-题目解析"><a href="#2-2-1-题目解析" class="headerlink" title="2.2.1 题目解析"></a>2.2.1 题目解析</h4><p>先把输入的数组排序，然后从头到尾扫描排序后的数组即可。时间复杂度为O(nlogn)，空间复杂度为O(1)</p><h3 id="2-3-方法二：利用集合或数组"><a href="#2-3-方法二：利用集合或数组" class="headerlink" title="2.3 方法二：利用集合或数组"></a>2.3 方法二：利用集合或数组</h3><h4 id="2-3-1-题目解析"><a href="#2-3-1-题目解析" class="headerlink" title="2.3.1 题目解析"></a>2.3.1 题目解析</h4><p>集合（Hashset）有一个特性：无序不重复。使用集合存储已经遇到的数字，如果遇到的一个数字已经在集合中，则当前的数字是重复数字。也可以使用数组存储已遇到的数字。时间复杂度：O(n)，空间复杂度：O(n)。</p><h4 id="2-3-2-代码实现"><a href="#2-3-2-代码实现" class="headerlink" title="2.3.2 代码实现"></a>2.3.2 代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用数组存储已遇到的数字，先把数组初始化为-1</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// nums[i]为多少，则存储在对应下标处</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用集合存储已遇到的数字</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> repeat <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer e <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// set.add(e):当添加已存在的数据时，会返回false</span>                repeat <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> repeat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>两种存储方式比较：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210412161418.png" alt=""></p><p>数组存储的运行时间是1ms，内存消耗是45.6MB，集合存储的运行时间是5ms，内存消耗是48.5MB。使用数组比集合更优。</p><h3 id="2-4-方法三：利用数组下标"><a href="#2-4-方法三：利用数组下标" class="headerlink" title="2.4 方法三：利用数组下标"></a>2.4 方法三：利用数组下标</h3><h4 id="2-4-1-题目解析"><a href="#2-4-1-题目解析" class="headerlink" title="2.4.1 题目解析"></a>2.4.1 题目解析</h4><p>类似于第二种方法的思想，只不过是通过自身数组的移动来实现的。</p><p>我们注意到数组中的数字都在0~n-l的范围内。如果这个数组中没有重复的数字，那么当数组排序之后数字i将出现在下标为i的位置。由于数组中有重复的数字，有些位置可能存在多个数字，同时有些位置可能没有数字。</p><p>从头到尾依次扫描这个数组中的每个数字。</p><ul><li>当扫描到下标为i的数字时，首先比较这个数字nums[i]是不是等于i。<ul><li>如果是，则接着扫描下一个数字；</li><li>如果不是，则再拿它和第nums[i]个数字进行比较。<ul><li>如果它和第nums[i]个数字相等，就找到了一个重复的数字（该数字在下标为i和nums[i]的位置都出现了）</li><li>如果它和第nums[i]个数字不相等，就把第i个数字和第nums[i]个数字交换，把nums[i]放到属于它的位置。</li></ul></li></ul></li><li>接下来再重复这个比较、交换的过程，直到我们发现一个重复的数字。</li></ul><p>时间复杂度：O(n)，空间复杂度：O(1)。</p><h4 id="2-4-2-代码实现"><a href="#2-4-2-代码实现" class="headerlink" title="2.4.2 代码实现"></a>2.4.2 代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 存储i处的数组值</span>            <span class="token comment" spellcheck="true">// 1.先比较索引i处的值m是否等于i</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">!=</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 索引i处的值m不等于i</span>                <span class="token comment" spellcheck="true">// 2.将m作为索引，比较索引m处的值nums[m]是否等于索引m</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">==</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 找到重复数字，该数字在下标为i和nums[i]的位置都出现了</span>                    <span class="token keyword">return</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 把第i个数字和第nums[i]个数字交换，把nums[i]放到对应索引处</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>                    nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                    m <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 索引i处的值m等于i的话，遍历下一个</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、题目二：不修改数组找出重复的数字"><a href="#三、题目二：不修改数组找出重复的数字" class="headerlink" title="三、题目二：不修改数组找出重复的数字"></a>三、题目二：不修改数组找出重复的数字</h2><h3 id="3-1-技巧"><a href="#3-1-技巧" class="headerlink" title="3.1 技巧"></a>3.1 技巧</h3><p>&emsp;&emsp;二分法的使用 <strong>并不一定</strong> 需要在排序好的数组上面进行，<strong>不要让常见的例题限制了你的思路</strong>，二分法还有一个比较高级的用法叫做 <font color=#FF0000 ><strong>按值二分</strong></font>。</p><h3 id="3-2-题目1描述"><a href="#3-2-题目1描述" class="headerlink" title="3.2 题目1描述"></a>3.2 题目1描述</h3><p>在一个长度为n + 1 的数组里的所有数字都在1～n 的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。</p><p><strong>示例 1：</strong></p><pre class=" language-java"><code class="language-java">输入：<span class="token punctuation">[</span><span class="token number">2</span>，<span class="token number">3</span>，<span class="token number">5</span>，<span class="token number">4</span>，<span class="token number">3</span>，<span class="token number">2</span>，<span class="token number">6</span>，<span class="token number">7</span><span class="token punctuation">]</span>输出：<span class="token number">2</span> 或 <span class="token number">3</span> </code></pre><h3 id="3-3-题目1解析"><a href="#3-3-题目1解析" class="headerlink" title="3.3 题目1解析"></a>3.3 题目1解析</h3><p>我们可以创建一个长度为n+1的辅助数组，然后逐一把原数组的每个数字复制到辅助数组。如果原数组中被复制的数字是m，则把它复制到辅助数组中下标为m的位置。这样很容易就能发现哪个数字是重复的。由于需要创建一个数组，该方案需要O（n）的辅助空间。</p><p>接下来我们尝试避免使用O（n）的辅助空间。为什么数组中会有重复的数字？假如没有重复的数字，那么在从1～n的范围里只有n个数字。由于数组里包含超过n个数字，所以一定包含了重复的数字。<font color=#FF0000 >看起来在某范围里数字的个数对解决这个问题很重要。</font></p><p>我们把从1～n的数字从中间的数字m分为两部分，前面一半为1～m，后面一半为m+1～n。如果1～m的数字的数目超过m，那么这一半的区间里一定包含重复的数字；否则，另一半m+1～n的区间里一定包含重复的数字。我们可以继续把包含重复数字的区间一分为二，直到找到一个重复的数字。<font color=#FF0000 >这个过程和二分查找算法很类似，只是多了一步统计区间里数字的数目。</font></p><h3 id="3-4-题目1代码实现"><a href="#3-4-题目1代码实现" class="headerlink" title="3.4 题目1代码实现"></a>3.4 题目1代码实现</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 按值二分查找</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 统计start 到 mid 之间数据的个数</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">countRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start<span class="token operator">==</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// [1,1] start=1,end=1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> start<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// start~mid区间的数字数目count 大于区间值，证明在该区间内存在重复数字</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token punctuation">(</span>mid<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">countRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 统计整个数组中在该区间内数据的个数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>start <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>end<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-题目2描述"><a href="#3-5-题目2描述" class="headerlink" title="3.5 题目2描述"></a>3.5 题目2描述</h3><p>&emsp;&emsp;给定一个包含 <em>n + 1</em> 个整数的数组 <em>nums</em>，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210412153324.png" style="zoom:80%;" /><h3 id="3-6-题目2解析"><a href="#3-6-题目2解析" class="headerlink" title="3.6 题目2解析"></a>3.6 题目2解析</h3><p>&emsp;&emsp;由于限制条件太多了，很多方法都不能用！</p><p>&emsp;&emsp;假如没有这些限制，可以采取的方法有：</p><ul><li><font color=#FF0000 >不能更改原数组</font>导致无法排序，也无法用<font color=#FF0000 >index 和元素建立关系</font> index 和元素建立关系；</li><li><font color=#FF0000 >只能使用 O(1) 的空间</font>意味着使用<font color=#FF0000 >哈希表去计数</font>这条路也走不通；</li><li><font color=#FF0000 >时间复杂度必须小于 O(n^2)</font>意味着不能用<font color=#FF0000 >暴力解法</font>；</li><li><font color=#FF0000 >重复数字可以重复出现</font>通过<font color=#FF0000 >累加求和然后做差 <code>sum(array) - sum(1,2,...,n)</code> 的方式</font>也变得不可行。</li></ul><p>&emsp;&emsp;<font color=#FF0000 ><strong>什么样的算法可以不使用额外的空间解决数组上面的搜索问题？</strong></font></p><p>&emsp;&emsp;<font color=#FF0000 ><strong>二分查找！！</strong></font></p><p>&emsp;&emsp;这道题目交代的信息很少，<strong>我们只需要关注两个东西 - 数组，数组里的元素</strong>，利用二分我们需要去思考的是，我们要找符合条件的元素作为答案，那么 <font color=#FF0000 ><strong>比答案小的元素具有什么样的特质，比答案大的元素又具有什么样的特质？</strong></font>结合题目给我们的例子来看看：</p><p>&emsp;&emsp;例1：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>                      元素个数<span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：<span class="token number">1</span>                       <span class="token number">1</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span>                 <span class="token number">3</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>              <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>           <span class="token number">5</span></code></pre><p>&emsp;&emsp;例2:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：<span class="token number">1</span>                        <span class="token number">1</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>                     <span class="token number">2</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span>               <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>            <span class="token number">5</span></code></pre><p>&emsp;&emsp;极端一点的例子 (必须保证数组的长度是 n + 1, 并且元素都在区间[1,n] 上, 有且只有一个重复)</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：                        <span class="token number">0</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：                        <span class="token number">0</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span>              <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>           <span class="token number">5</span></code></pre><p>&emsp;&emsp;看完上面几个例子，相信你明白了一个事实:</p><ul><li>如果选中的数<font color=#FF0000 > <strong>小于</strong></font> 我们要找的答案，那么整个数组中小于或等于该数的元素个数必然小于或等于该元素的值;</li><li>如果选中的数<font color=#FF0000 > <strong>大于或等于</strong></font> 我们要找的答案，那么整个数组中小于或等于该数的元素个数必然<font color=#FF0000 >大于</font>该元素的值</li></ul><p>&emsp;&emsp;而且你可以看到，我们要找的答案其实就处于一个分界点的位置，寻找边界值，这又是二分的一个应用，而且题目已经告诉我们数组里面的值只可能在 [1, n] 之间，这么一来，思路就是在 [1, n] 区间上做二分，然后按我们之前提到的逻辑去做分割。整个解法的时间复杂度是 <strong>O(nlogn)</strong>，也是满足题目要求的。</p><p>&emsp;&emsp;动画描述参考：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247486581&amp;idx=1&amp;sn=0ed7d74ba7ebf427c58ade56bc4f8f68" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247486581&amp;idx=1&amp;sn=0ed7d74ba7ebf427c58ade56bc4f8f68</a></p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210412153339.png" style="zoom:80%;" /><h3 id="3-7-题目2代码实现"><a href="#3-7-题目2代码实现" class="headerlink" title="3.7 题目2代码实现"></a>3.7 题目2代码实现</h3><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 统计数组中小于等于mid的元素个数counter</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter <span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果个数counter大于mid，则下次应该在[start，mid]之间找寻</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 否则，在[mid+1，end]之间找寻</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-8-另一种解题思路"><a href="#3-8-另一种解题思路" class="headerlink" title="3.8 另一种解题思路"></a>3.8 另一种解题思路</h3><p>&emsp;&emsp;另外一种 O(n) 的解法借鉴快慢指针找交点的思想，算法非常的巧妙，也非常的有趣，但不太容易想到，这里把代码放上。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
          <category> 二分法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot】05-SpringBoot-单元测试</title>
      <link href="/2021/03/17/springboot-05-springboot-dan-yuan-ce-shi/"/>
      <url>/2021/03/17/springboot-05-springboot-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JUnit5-的变化"><a href="#一、JUnit5-的变化" class="headerlink" title="一、JUnit5 的变化"></a>一、JUnit5 的变化</h2><p><font color=#FF0000 ><strong>Spring Boot 2.2.0 版本开始引入 JUnit 5 作为单元测试默认库</strong></font></p><p>作为最新版本的JUnit框架，JUnit5与之前版本的Junit框架有很大的不同。由三个不同子项目的几个不同模块组成。</p><blockquote><p><strong>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</strong></p></blockquote><p><strong>JUnit Platform</strong>: Junit Platform是在JVM上启动测试框架的基础，不仅支持Junit自制的测试引擎，其他测试引擎也都可以接入。</p><p><strong>JUnit Jupiter</strong>: JUnit Jupiter提供了JUnit5的新的编程模型，是JUnit5新特性的核心。内部 包含了一个<strong>测试引擎</strong>，用于在Junit Platform上运行。</p><p><strong>JUnit Vintage</strong>: 由于JUint已经发展多年，为了照顾老的项目，JUnit Vintage提供了兼容JUnit4.x,Junit3.x的测试引擎。</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210317195753.png" alt=""></p><p><strong>注意</strong>：</p><p><strong>SpringBoot 2.4 以上版本移除了默认对 Vintage 的依赖。如果需要兼容junit4需要自行引入（不能使用junit4的功能 @Test）</strong></p><p><strong>JUnit 5’s Vintage Engine Removed from</strong> <strong><code>spring-boot-starter-test,如果需要继续兼容junit4需要自行引入vintage</code></strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>引入SpringBoot的test测试类</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>测试程序：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Boot05WebAdminApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SpringBoot整合Junit以后。</p><ul><li>编写测试方法：@Test标注（注意需要使用junit5版本的注解）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// junit5版本的注解</span></code></pre><ul><li>Junit类具有Spring的功能，@Autowired、比如 @Transactional 标注测试方法，测试完成后自动回滚</li></ul><h2 id="二、JUnit5常用注解"><a href="#二、JUnit5常用注解" class="headerlink" title="二、JUnit5常用注解"></a>二、JUnit5常用注解</h2><p>JUnit5的注解与JUnit4的注解有所变化</p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations" target="_blank" rel="noopener">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p><ul><li><strong>@Test :</strong>表示方法是测试方法。但是与JUnit4的@Test不同，他的职责非常单一不能声明任何属性，拓展的测试将会由Jupiter提供额外测试</li><li><strong>@ParameterizedTest :</strong>表示方法是参数化测试，下方会有详细介绍</li><li><strong>@RepeatedTest :</strong>表示方法可重复执行，下方会有详细介绍</li><li><strong>@DisplayName :</strong>为测试类或者测试方法设置展示名称</li><li><strong>@BeforeEach :</strong>表示在每个单元测试之前执行</li><li><strong>@AfterEach :</strong>表示在每个单元测试之后执行</li><li><strong>@BeforeAll :</strong>表示在所有单元测试之前执行</li><li><strong>@AfterAll :</strong>表示在所有单元测试之后执行</li><li><strong>@Tag :</strong>表示单元测试类别，类似于JUnit4中的@Categories</li><li><strong>@Disabled :</strong>表示测试类或测试方法不执行，类似于JUnit4中的@Ignore</li><li><strong>@Timeout :</strong>表示测试方法运行如果超过了指定时间将会返回错误</li><li><strong>@ExtendWith :</strong>为测试类或测试方法提供扩展类引用</li></ul><h2 id="三、断言（assertions）"><a href="#三、断言（assertions）" class="headerlink" title="三、断言（assertions）"></a>三、断言（assertions）</h2><p>断言（assertions）是测试方法中的核心部分，用来对测试需要满足的条件进行验证。<strong>这些断言方法都是 <font color=#FF0000 >org.junit.jupiter.api.Assertions</font> 的静态方法</strong>。JUnit 5 内置的断言可以分成如下几个类别：</p><ul><li><p><strong>检查业务逻辑返回的数据是否合理。</strong></p></li><li><p><strong>所有的测试运行结束以后，会有一个详细的测试报告；</strong></p></li></ul><h3 id="3-1-简单断言"><a href="#3-1-简单断言" class="headerlink" title="3.1 简单断言"></a>3.1 简单断言</h3><p>用来对单个值进行简单的验证。如：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"simple assertion"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"simple math"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertNotEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertNotSame</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertSame</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertFalse</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertNull</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertNotNull</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-2-数组断言"><a href="#3-2-数组断言" class="headerlink" title="3.2 数组断言"></a>3.2 数组断言</h3><p>通过 assertArrayEquals 方法来判断两个对象或原始类型的数组是否相等</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"array assertion"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertArrayEquals</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-3-组合断言"><a href="#3-3-组合断言" class="headerlink" title="3.3 组合断言"></a>3.3 组合断言</h3><p>assertAll 方法接受多个 org.junit.jupiter.api.Executable 函数式接口的实例作为要验证的断言，可以通过 lambda 表达式很容易的提供这些断言</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"assert all"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token string">"Math"</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>             <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-4-异常断言"><a href="#3-4-异常断言" class="headerlink" title="3.4 异常断言"></a>3.4 异常断言</h3><p>在JUnit4时期，想要测试方法的异常情况时，需要用<strong>@Rule</strong>注解的ExpectedException变量还是比较麻烦的。而JUnit5提供了一种新的断言方式<strong>Assertions.assertThrows()</strong> ，配合函数式编程就可以进行使用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"异常测试"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ArithmeticException exception <span class="token operator">=</span> Assertions<span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//扔出断言异常</span>        ArithmeticException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">%</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-5-超时断言"><a href="#3-5-超时断言" class="headerlink" title="3.5 超时断言"></a>3.5 超时断言</h3><p>Junit5还提供了<strong>Assertions.assertTimeout()</strong> 为测试方法设置了超时时间</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"超时测试"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeoutTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果测试方法时间超过1s将会异常</span>    Assertions<span class="token punctuation">.</span><span class="token function">assertTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-6-快速失败"><a href="#3-6-快速失败" class="headerlink" title="3.6 快速失败"></a>3.6 快速失败</h3><p>通过 fail 方法直接使得测试失败</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shouldFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">"This should fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="四、前置条件（assumptions）"><a href="#四、前置条件（assumptions）" class="headerlink" title="四、前置条件（assumptions）"></a>四、前置条件（assumptions）</h2><p>JUnit 5 中的前置条件（<strong>assumptions【假设】</strong>）类似于断言，不同之处在于<strong>不满足的断言会使得测试方法失败</strong>，而不满足的<strong>前置条件只会使得测试方法的执行终止</strong>。前置条件可以看成是测试方法执行的前提，当该前提不满足时，就没有继续执行的必要。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"前置条件"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AssumptionsTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String environment <span class="token operator">=</span> <span class="token string">"DEV"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"simple"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleAssume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assumeTrue</span><span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">"DEV"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">assumeFalse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">"PROD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"assume then do"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">assumeThenDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assumingThat</span><span class="token punctuation">(</span>            Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token string">"DEV"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"In DEV"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>assumeTrue 和 assumFalse 确保给定的条件为 true 或 false，不满足条件会使得测试执行终止。</p><p>assumingThat 的参数是表示条件的布尔值和对应的 Executable 接口的实现对象。只有条件满足时，Executable 对象才会被执行；当条件不满足时，测试执行并不会终止.</p><h2 id="五、嵌套测试"><a href="#五、嵌套测试" class="headerlink" title="五、嵌套测试"></a>五、嵌套测试</h2><p>JUnit 5 可以通过<font color=#FF0000 > Java 中的内部类和@<strong>Nested</strong> 注解</font>实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用@BeforeEach 和@AfterEach 注解，而且嵌套的层次没有限制。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"A stack"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestingAStackDemo</span> <span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span>Object<span class="token operator">></span> stack<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"is instantiated with new Stack()"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">isInstantiatedWithNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Nested</span>    <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"when new"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">WhenNew</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@BeforeEach</span>        <span class="token keyword">void</span> <span class="token function">createNewStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"is empty"</span><span class="token punctuation">)</span>        <span class="token keyword">void</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">assertTrue</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"throws EmptyStackException when popped"</span><span class="token punctuation">)</span>        <span class="token keyword">void</span> <span class="token function">throwsExceptionWhenPopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">assertThrows</span><span class="token punctuation">(</span>EmptyStackException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> stack<span class="token operator">:</span><span class="token operator">:</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Test</span>        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"throws EmptyStackException when peeked"</span><span class="token punctuation">)</span>        <span class="token keyword">void</span> <span class="token function">throwsExceptionWhenPeeked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">assertThrows</span><span class="token punctuation">(</span>EmptyStackException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> stack<span class="token operator">:</span><span class="token operator">:</span>peek<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Nested</span>        <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"after pushing an element"</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">AfterPushing</span> <span class="token punctuation">{</span>            String anElement <span class="token operator">=</span> <span class="token string">"an element"</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@BeforeEach</span>            <span class="token keyword">void</span> <span class="token function">pushAnElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>anElement<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Test</span>            <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"it is no longer empty"</span><span class="token punctuation">)</span>            <span class="token keyword">void</span> <span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">assertFalse</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Test</span>            <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"returns the element when popped and is empty"</span><span class="token punctuation">)</span>            <span class="token keyword">void</span> <span class="token function">returnElementWhenPopped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">assertEquals</span><span class="token punctuation">(</span>anElement<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">assertTrue</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Test</span>            <span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"returns the element when peeked but remains not empty"</span><span class="token punctuation">)</span>            <span class="token keyword">void</span> <span class="token function">returnElementWhenPeeked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">assertEquals</span><span class="token punctuation">(</span>anElement<span class="token punctuation">,</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">assertFalse</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="六、参数化测试"><a href="#六、参数化测试" class="headerlink" title="六、参数化测试"></a>六、参数化测试</h2><p>参数化测试是JUnit5很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为我们的单元测试带来许多便利。</p><p>利用<strong>@ValueSource</strong>等注解，指定入参，我们将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><ul><li><p><strong>@ValueSource</strong>: 为参数化测试指定入参来源，支持八大基础类以及String类型,Class类型</p></li><li><p><strong>@NullSource</strong>: 表示为参数化测试提供一个null的入参</p></li><li><p><strong>@EnumSource</strong>: 表示为参数化测试提供一个枚举入参</p></li><li><p><strong>@CsvFileSource</strong>：表示读取指定CSV文件内容作为参数化测试入参</p></li><li><p><strong>@MethodSource</strong>：表示读取指定方法的返回值作为参数化测试入参(注意方法返回需要是一个流)</p></li></ul><blockquote><p>当然如果参数化测试仅仅只能做到指定普通的入参还达不到让我觉得惊艳的地步。让我真正感到他的强大之处的地方在于他可以支持外部的各类入参。如:CSV,YML,JSON 文件甚至方法的返回值也可以作为入参。只需要去实现<strong>ArgumentsProvider</strong>接口，任何外部文件都可以作为它的入参。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ParameterizedTest</span><span class="token annotation punctuation">@ValueSource</span><span class="token punctuation">(</span>strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"参数化测试1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parameterizedTest1</span><span class="token punctuation">(</span>String string<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>    Assertions<span class="token punctuation">.</span><span class="token function">assertTrue</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ParameterizedTest</span><span class="token annotation punctuation">@MethodSource</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//指定方法名</span><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">"方法来源参数"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testWithExplicitLocalMethodSource</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Assertions<span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="七、迁移指南"><a href="#七、迁移指南" class="headerlink" title="七、迁移指南"></a>七、迁移指南</h2><p>在进行迁移的时候需要注意如下的变化：</p><ul><li>注解在 org.junit.jupiter.api 包中，断言在 org.junit.jupiter.api.Assertions 类中，前置条件在 org.junit.jupiter.api.Assumptions 类中。</li><li>把@Before 和@After 替换成@BeforeEach 和@AfterEach。</li><li>把@BeforeClass 和@AfterClass 替换成@BeforeAll 和@AfterAll。</li><li>把@Ignore 替换成@Disabled。</li><li>把@Category 替换成@Tag。</li><li>把@RunWith、@Rule 和@ClassRule 替换成@ExtendWith。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java框架 </tag>
            
            <tag> JUnit5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot】04-SpringBoot-数据访问</title>
      <link href="/2021/03/17/springboot-04-springboot-shu-ju-fang-wen/"/>
      <url>/2021/03/17/springboot-04-springboot-shu-ju-fang-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SQL"><a href="#一、SQL" class="headerlink" title="一、SQL"></a>一、SQL</h2><h3 id="1-1-数据源的自动配置—HikariDataSource"><a href="#1-1-数据源的自动配置—HikariDataSource" class="headerlink" title="1.1 数据源的自动配置—HikariDataSource"></a>1.1 数据源的自动配置—<strong>HikariDataSource</strong></h3><h4 id="1-1-1-导入JDBC场景"><a href="#1-1-1-导入JDBC场景" class="headerlink" title="1.1.1 导入JDBC场景"></a>1.1.1 导入JDBC场景</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210317164711.png" alt=""></p><p>数据库驱动？</p><p>为什么导入JDBC场景，官方不导入驱动？官方不知道我们接下要操作什么数据库。</p><p><font color=#FF0000 >数据库版本要和导入的驱动版本对应</font></p><pre class=" language-xml"><code class="language-xml">默认版本：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>8.0.22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- &lt;version>5.1.49&lt;/version> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>想要修改版本1、直接依赖引入具体版本（maven的就近依赖原则）2、重新声明版本（maven的属性的就近优先原则）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.49<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h4 id="1-1-2-分析自动配置"><a href="#1-1-2-分析自动配置" class="headerlink" title="1.1.2 分析自动配置"></a>1.1.2 分析自动配置</h4><p>1、自动配置的类</p><ul><li>DataSourceAutoConfiguration ： 数据源的自动配置<ul><li>修改数据源相关的配置：<font color=#FF0000 ><strong>spring.datasource</strong></font></li><li><strong>数据库连接池的配置，是自己容器中没有DataSource才自动配置的</strong></li><li>底层配置好的连接池是：<strong>HikariDataSource</strong></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>PooledDataSourceCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DataSource<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> XADataSource<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DataSourceConfiguration<span class="token punctuation">.</span>Hikari<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceConfiguration<span class="token punctuation">.</span>Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         DataSourceConfiguration<span class="token punctuation">.</span>Dbcp2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceConfiguration<span class="token punctuation">.</span>OracleUcp<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>         DataSourceConfiguration<span class="token punctuation">.</span>Generic<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DataSourceJmxConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PooledDataSourceConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li><p>DataSourceTransactionManagerAutoConfiguration： 事务管理器的自动配置</p></li><li><p>JdbcTemplateAutoConfiguration： <strong>JdbcTemplate的自动配置，可以来对数据库进行crud</strong></p><ul><li><font color=#0000FF >可以修改这个配置项@ConfigurationProperties(prefix = <strong>“spring.jdbc”</strong>)</font> 来修改JdbcTemplate</li><li>@Bean@Primary   JdbcTemplate；容器中有这个组件</li></ul></li><li><p>JndiDataSourceAutoConfiguration： jndi的自动配置</p></li><li><p>XADataSourceAutoConfiguration： 分布式事务相关的</p></li></ul><h4 id="1-1-3-修改配置项"><a href="#1-1-3-修改配置项" class="headerlink" title="1.1.3 修改配置项"></a>1.1.3 修改配置项</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver</code></pre><h4 id="1-1-4-测试"><a href="#1-1-4-测试" class="headerlink" title="1.1.4 测试"></a>1.1.4 测试</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Boot05WebAdminApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//      jdbcTemplate.queryForObject("select * from account_tbl")</span><span class="token comment" spellcheck="true">//      jdbcTemplate.queryForList("select * from account_tbl",)</span>        Long aLong <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token string">"select count(*) from account_tbl"</span><span class="token punctuation">,</span> Long<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"记录总数：{}"</span><span class="token punctuation">,</span>aLong<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="1-2-使用Druid数据源"><a href="#1-2-使用Druid数据源" class="headerlink" title="1.2 使用Druid数据源"></a>1.2 使用Druid数据源</h3><h4 id="1-2-1-druid官方github地址"><a href="#1-2-1-druid官方github地址" class="headerlink" title="1.2.1 druid官方github地址"></a>1.2.1 druid官方github地址</h4><p><a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">https://github.com/alibaba/druid</a></p><p>整合第三方技术的两种方式</p><ul><li>自定义</li><li>找starter</li></ul><h4 id="1-2-2-自定义方式"><a href="#1-2-2-自定义方式" class="headerlink" title="1.2.2 自定义方式"></a>1.2.2 自定义方式</h4><p>1、创建数据源</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span>      <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxOpenPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>2、StatViewServlet</p><p>StatViewServlet的用途包括：</p><ul><li>提供监控信息展示的html页面</li><li>提供监控信息的JSON API</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DruidStatView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.alibaba.druid.support.http.StatViewServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DruidStatView<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/druid/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>3、StatFilter</p><p>用于统计监控信息；如SQL监控、URI监控</p><pre class=" language-xml"><code class="language-xml">需要给数据源中配置如下属性；可以允许多个filter，多个用，分割；如：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat,slf4j<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>系统中所有filter：</p><table><thead><tr><th>别名</th><th>Filter类名</th></tr></thead><tbody><tr><td>default</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>stat</td><td>com.alibaba.druid.filter.stat.StatFilter</td></tr><tr><td>mergeStat</td><td>com.alibaba.druid.filter.stat.MergeStatFilter</td></tr><tr><td>encoding</td><td>com.alibaba.druid.filter.encoding.EncodingConvertFilter</td></tr><tr><td>log4j</td><td>com.alibaba.druid.filter.logging.Log4jFilter</td></tr><tr><td>log4j2</td><td>com.alibaba.druid.filter.logging.Log4j2Filter</td></tr><tr><td>slf4j</td><td>com.alibaba.druid.filter.logging.Slf4jLogFilter</td></tr><tr><td>commonlogging</td><td>com.alibaba.druid.filter.logging.CommonsLogFilter</td></tr></tbody></table><p><strong>慢SQL记录配置</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat-filter<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.filter.stat.StatFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slowSqlMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logSlowSql<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>使用 slowSqlMillis 定义慢SQL的时长</code></pre><h4 id="1-2-3-使用官方starter方式"><a href="#1-2-3-使用官方starter方式" class="headerlink" title="1.2.3 使用官方starter方式"></a>1.2.3 使用官方starter方式</h4><p>1、引入druid-starter</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、分析自动配置</p><ul><li>扩展配置项 <strong>spring.datasource.druid</strong></li><li>DruidSpringAopConfiguration.<strong>class</strong>,  监控SpringBean的；配置项：<strong>spring.datasource.druid.aop-patterns</strong></li><li>DruidStatViewServletConfiguration.<strong>class</strong>, 监控页的配置：<strong>spring.datasource.druid.stat-view-servlet；默认开启</strong></li><li>DruidWebStatFilterConfiguration.<strong>class</strong>, web监控配置；<strong>spring.datasource.druid.web-stat-filter；默认开启</strong></li><li>DruidFilterConfiguration.<strong>class</strong>}) 所有Druid自己filter的配置</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_STAT_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.stat"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_CONFIG_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.config"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_ENCODING_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.encoding"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_SLF4J_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.slf4j"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_LOG4J_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.log4j"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_LOG4J2_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.log4j2"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_COMMONS_LOG_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.commons-log"</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FILTER_WALL_PREFIX <span class="token operator">=</span> <span class="token string">"spring.datasource.druid.filter.wall"</span><span class="token punctuation">;</span></code></pre><p>3、配置示例</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/db_account    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">aop-patterns</span><span class="token punctuation">:</span> com.atguigu.admin.*  <span class="token comment" spellcheck="true">#监控SpringBean</span>      <span class="token key atrule">filters</span><span class="token punctuation">:</span> stat<span class="token punctuation">,</span>wall     <span class="token comment" spellcheck="true"># 底层开启功能，stat（sql监控），wall（防火墙）</span>      <span class="token key atrule">stat-view-servlet</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 配置监控页功能</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">login-username</span><span class="token punctuation">:</span> admin        <span class="token key atrule">login-password</span><span class="token punctuation">:</span> admin        <span class="token key atrule">resetEnable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">web-stat-filter</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 监控web</span>        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">urlPattern</span><span class="token punctuation">:</span> /*        <span class="token key atrule">exclusions</span><span class="token punctuation">:</span> <span class="token string">'*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span>        <span class="token key atrule">stat</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 对上面filters里面的stat的详细配置</span>          <span class="token key atrule">slow-sql-millis</span><span class="token punctuation">:</span> <span class="token number">1000</span>          <span class="token key atrule">logSlowSql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token key atrule">wall</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">config</span><span class="token punctuation">:</span>            <span class="token key atrule">drop-table-allow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre><p>SpringBoot配置示例：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter" target="_blank" rel="noopener">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p><p>配置项列表：<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8</a></p><h3 id="1-3-整合MyBatis操作"><a href="#1-3-整合MyBatis操作" class="headerlink" title="1.3 整合MyBatis操作"></a>1.3 整合MyBatis操作</h3><p>mybatis-spring-boot-starter：<a href="https://github.com/mybatis/spring-boot-starter/tree/mybatis-spring-boot-2.1.4" target="_blank" rel="noopener">https://github.com/mybatis/spring-boot-starter/tree/mybatis-spring-boot-2.1.4</a></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="1-3-1-配置模式"><a href="#1-3-1-配置模式" class="headerlink" title="1.3.1 配置模式"></a>1.3.1 配置模式</h4><ul><li>全局配置文件</li><li>SqlSessionFactory: 自动配置好了</li><li>SqlSession：自动配置了 <strong>SqlSessionTemplate 组合了SqlSession</strong></li><li>@Import(<strong>AutoConfiguredMapperScannerRegistrar</strong>.<strong>class</strong>）；</li><li>Mapper： 只要我们写的操作MyBatis的接口标准了 <strong>@Mapper 就会被自动扫描进来</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>MybatisProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> ： MyBatis配置项绑定类。<span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> DataSourceAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MybatisLanguageDriverAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisAutoConfiguration</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"mybatis"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisProperties</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>可以修改配置文件中 mybatis 开始的所有；</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 配置mybatis规则</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span>  <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mybatis<span class="token punctuation">-</span>config.xml  <span class="token comment" spellcheck="true">#全局配置文件位置</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml  <span class="token comment" spellcheck="true">#sql映射文件位置</span></code></pre><pre class=" language-java"><code class="language-java">Mapper接口<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>绑定Xml<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> <span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper        PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.atguigu.admin.mapper.AccountMapper"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token keyword">public</span> Account <span class="token function">getAcct</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getAcct"</span> resultType<span class="token operator">=</span><span class="token string">"com.atguigu.admin.bean.Account"</span><span class="token operator">></span>        select <span class="token operator">*</span> from  account_tbl where  id<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><p>配置 <strong>private</strong> Configuration <strong>configuration</strong>; mybatis.<strong>configuration下面的所有，就是相当于改mybatis全局配置文件中的值</strong></p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 配置mybatis规则</span><span class="token key atrule">mybatis</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#  config-location: classpath:mybatis/mybatis-config.xml</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis/mapper/*.xml  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> 可以不写全局；配置文件，所有全局配置文件的配置都放在configuration配置项中即可</code></pre><ul><li>导入mybatis官方starter</li><li>编写mapper接口。标准@Mapper注解</li><li>编写sql映射文件并绑定mapper接口</li><li>在application.yaml中指定Mapper配置文件的位置，以及指定全局配置文件的信息 （建议；<strong>配置在mybatis.configuration</strong>）</li></ul><h4 id="1-3-2-注解模式"><a href="#1-3-2-注解模式" class="headerlink" title="1.3.2 注解模式"></a>1.3.2 注解模式</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CityMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from city where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> City <span class="token function">getById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>City city<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="1-3-3-混合模式"><a href="#1-3-3-混合模式" class="headerlink" title="1.3.3 混合模式"></a>1.3.3 混合模式</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CityMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from city where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> City <span class="token function">getById</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>City city<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>最佳实战：</strong></p><ul><li>引入mybatis-starter</li><li><strong>配置application.yaml中，指定mapper-location位置即可</strong></li><li>编写Mapper接口并标注@Mapper注解</li><li>简单方法直接注解方式</li><li>复杂方法编写mapper.xml进行绑定映射</li><li><font color=#FF0000 >@MapperScan(“com.atguigu.admin.mapper”) 简化，</font>其他的接口就可以不用标注@Mapper注解</li></ul><h3 id="1-4-整合MyBatis-Plus完成CRUD"><a href="#1-4-整合MyBatis-Plus完成CRUD" class="headerlink" title="1.4 整合MyBatis-Plus完成CRUD"></a>1.4 整合MyBatis-Plus完成CRUD</h3><h4 id="1-4-1-什么是MyBatis-Plus"><a href="#1-4-1-什么是MyBatis-Plus" class="headerlink" title="1.4.1 什么是MyBatis-Plus"></a>1.4.1 什么是MyBatis-Plus</h4><p><a href="https://github.com/baomidou/mybatis-plus" target="_blank" rel="noopener">MyBatis-Plus</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener">MyBatis</a> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p><a href="https://baomidou.com/" target="_blank" rel="noopener">mybatis plus 官网</a></p><p>建议安装 <strong>MybatisX</strong> 插件 </p><h4 id="1-4-2-整合MyBatis-Plus"><a href="#1-4-2-整合MyBatis-Plus" class="headerlink" title="1.4.2 整合MyBatis-Plus"></a>1.4.2 整合MyBatis-Plus</h4><p>MyBatis-Plus中已引入 数据库启动项和mybatis启动项，所以这两个不需要再次导入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- MyBatis-Plus启动项 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis-plus-starter.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>自动配置</p><ul><li>MybatisPlusAutoConfiguration 配置类，MybatisPlusProperties 配置项绑定。<strong>mybatis-plus：xxx 就是对mybatis-plus的定制</strong></li><li><strong>SqlSessionFactory 自动配置好。底层是容器中默认的数据源</strong></li><li><strong>mapperLocations 自动配置好的。有默认值</strong>。<strong>classpath:/mapper/ * */.xml</strong>；任意包的类路径下的所有mapper文件夹下任意路径下的所有xml都是sql映射文件。  <font color=#FF0000 >建议以后sql映射文件，放在 mapper下</font></li><li><strong>容器中也自动配置好了</strong> <strong>SqlSessionTemplate</strong></li><li><strong>@Mapper 标注的接口也会被自动扫描；建议直接</strong> @MapperScan(<strong>“com.atguigu.admin.mapper”</strong>) 批量扫描就行</li></ul><h4 id="1-4-3-CRUD功能"><a href="#1-4-3-CRUD功能" class="headerlink" title="1.4.3 CRUD功能"></a>1.4.3 CRUD功能</h4><p>1、mapper接口</p><p>只需要我们的Mapper继承 <strong>BaseMapper</strong> 就可以拥有crud能力</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用MyBatisPlus时，mapper接口只要继承BaseMapper即可，不需要再写接口方法 * BaseMapper 中的泛型是要操作的实体类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>2、service接口及其实现类</p><p>只需要我们的Service继承 <strong>IService</strong> 就可以拥有CRUD能力，不需要我们再写接口<br>只需要我们的ServiceImpl继承 <strong>ServiceImpl</strong>,并实现Service接口，就可以拥有CRUD能力，不需要写方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用MyBatisPlus时，service接口只要继承IService即可，不需要再写接口方法 * IService 中的泛型是要操作的实体类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用MyBatisPlus时，serviceImpl实现类只要继承ServiceImpl即可，不需要再写方法 * ServiceImpl 中的泛型，第一个是自定义的mapper接口，第二个是要操作的实体类 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>UserMapper<span class="token punctuation">,</span>User<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>3、controller控制器</p><ul><li><font color=#FF0000 >RedirectAttributes</font>：设置重定向携带的参数</li><li>删除请求中携带当前页码，删除后重定向到当前页</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/delete/{id}(id<span class="token punctuation">=</span>${user.id},pn<span class="token punctuation">=</span>${users.current}) }<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>对应的URL：/delete/1?pn=3</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 删除操作     * 删除请求中携带当前页码，删除后重定向到当前页     * RedirectAttributes   设置重定向携带的参数     * @param id     * @return     */</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/delete/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> Long id<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pn"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer pn<span class="token punctuation">,</span>                         RedirectAttributes redirectAttributes<span class="token punctuation">)</span><span class="token punctuation">{</span>    userServiceImpl<span class="token punctuation">.</span><span class="token function">removeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置重定向携带参数，自动以URI方式添加进去</span>    redirectAttributes<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"pn"</span><span class="token punctuation">,</span>pn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/dynamic_table"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"dynamic_table"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">dynamic_table</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pn"</span><span class="token punctuation">,</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer pn<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 构造分页参数</span>    <span class="token keyword">int</span> pageStart <span class="token operator">=</span> pn<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 分页开始页从请求中获取</span>    <span class="token keyword">int</span> pageSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 分页大小默认值为2</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>pageStart<span class="token punctuation">,</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用page分页</span>    Page<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> userServiceImpl<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//        userPage.getPages();    // 当前分页的总数</span>    <span class="token comment" spellcheck="true">//        userPage.getCurrent();  // 获取当前页数</span>    <span class="token comment" spellcheck="true">//        userPage.getTotal();    // 获取数据库中的总记录数</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span>userPage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"table/dynamic_table"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二、NoSQL"><a href="#二、NoSQL" class="headerlink" title="二、NoSQL"></a>二、NoSQL</h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、<strong>缓存</strong>和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p><h3 id="2-1-Redis自动配置"><a href="#2-1-Redis自动配置" class="headerlink" title="2.1 Redis自动配置"></a>2.1 Redis自动配置</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>自动配置：</p><ul><li>RedisAutoConfiguration 自动配置类。RedisProperties 属性类 –&gt; <strong>spring.redis.xxx是对redis的配置</strong></li><li>连接工厂是准备好的。<strong>Lettuce</strong>ConnectionConfiguration、<strong>Jedis</strong>ConnectionConfiguration</li><li><strong>自动注入了RedisTemplate</strong>&lt;<strong>Object</strong>, <strong>Object</strong>&gt; ： xxxTemplate；</li><li><strong>自动注入了StringRedisTemplate；k：v都是String</strong></li><li><strong>key：value</strong></li><li><strong>底层只要我们使用</strong> <strong>StringRedisTemplate、RedisTemplate就可以操作redis</strong></li></ul><h3 id="2-4-redis集群环境搭建"><a href="#2-4-redis集群环境搭建" class="headerlink" title="2.4 redis集群环境搭建"></a>2.4 redis集群环境搭建</h3><p>在CentOS中搭建Redis集群</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 配置Redis集群</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 192.168.195.130<span class="token punctuation">:</span><span class="token number">7001</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7002</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7003</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7004</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7005</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7006</span>      <span class="token key atrule">max-redirects</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><h3 id="2-3-RedisTemplate与Lettuce"><a href="#2-3-RedisTemplate与Lettuce" class="headerlink" title="2.3 RedisTemplate与Lettuce"></a>2.3 RedisTemplate与Lettuce</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Boot05WebAdminApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    StringRedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> operations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String a <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-4-切换至jedis"><a href="#2-4-切换至jedis" class="headerlink" title="2.4 切换至jedis"></a>2.4 切换至jedis</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--导入jedis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 配置Redis集群</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span>      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 192.168.195.130<span class="token punctuation">:</span><span class="token number">7001</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7002</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7003</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7004</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7005</span><span class="token punctuation">,</span>192.168.195.130<span class="token punctuation">:</span><span class="token number">7006</span>      <span class="token key atrule">max-redirects</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token key atrule">client-type</span><span class="token punctuation">:</span> jedis    <span class="token key atrule">jedis</span><span class="token punctuation">:</span>      <span class="token key atrule">pool</span><span class="token punctuation">:</span>        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">10</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java框架 </tag>
            
            <tag> 数据访问 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索技巧</title>
      <link href="/2021/03/15/sou-suo-ji-qiao/"/>
      <url>/2021/03/15/sou-suo-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="一、谷歌搜索"><a href="#一、谷歌搜索" class="headerlink" title="一、谷歌搜索"></a>一、谷歌搜索</h2><ol><li><p><font color=#FF0000 >双引号</font>：精确匹配</p></li><li><p>OR：或者。包含一个关键字即可</p></li><li><p>AND：必须同时包含两个关键字</p></li><li><p><font color=#FF0000 >减号 —</font>：不包含减号后面的关键字</p></li><li><p>通配符 *：代替任何字</p></li><li><p>括号 ()：同时使用多个命令符号时会用到</p></li><li><p>define：查询词汇的定义</p></li><li><p><font color=#FF0000 >减号 —</font>：找特定类型的文件</p><pre class=" language-xml"><code class="language-xml">谷歌搜索 filetype:ppt</code></pre></li><li><p><font color=#FF0000 >site</font>：指定网站搜索</p><pre class=" language-xml"><code class="language-xml">bilibili site:xinhuanet.com</code></pre></li><li><p><font color=#FF0000 >intitle</font>：网页标题搜索</p></li><li><p>allintitle：网页标题包含以下所有关键词</p><pre class=" language-xml"><code class="language-xml">allintitle 诸葛亮 王司徒</code></pre></li><li><p><font color=#FF0000 >inurl</font>：网址中包含特定词</p></li><li><p>allinurl：网址中包含以下所有词</p><pre class=" language-xml"><code class="language-xml">allinurl:apple iphone</code></pre></li><li><p><font color=#FF0000 >intext</font>：只找网页里的文字（不搜索标题、网址等其他部分）</p></li><li><p>allintext：只找网页里的文字</p></li><li><p>AROUND(X)：两个词距离在X之内</p><pre class=" language-xml"><code class="language-xml">apple around(4) iphone搜到的是apple和iphone两个词距离不超过4的结果</code></pre></li><li><p>weather：查天气</p><p>stocks：查估计</p><p>map：查地图</p><p>movie：查电影</p><p>in：算汇率</p></li></ol><h2 id="二、GitHub搜索"><a href="#二、GitHub搜索" class="headerlink" title="二、GitHub搜索"></a>二、GitHub搜索</h2><ol><li><strong>明确搜索仓库标题、仓库描述、README</strong><ol><li>仓库标题中包含关键字：<strong>in:name</strong> 关键词</li><li>仓库描述中包含关键字：<strong>in:descripton</strong> 关键词</li><li>README文件中包含关键字：<strong>in:readme</strong> 关键词</li></ol></li><li><strong>明确搜索 star、fork 数大于多少的</strong><ol><li>stars: <strong>&gt;</strong> 数字 关键字。比如：stars:&gt;3000 spring cloud</li><li>fork: <strong>&gt;</strong> 数字 关键字</li></ol></li><li><strong>明确搜索仓库大小的</strong><ol><li>size:&gt;=5000(单位是k) 关键词</li></ol></li><li><strong>明确仓库是否还在更新维护</strong><ol><li>直接指定<strong>更新时间</strong>在哪个时间前或后的： pushed:&gt;2019-01-03 spring cloud</li></ol></li><li><strong>明确搜索仓库的 LICENSE</strong><ol><li>要找协议是最为宽松的 Apache License 2 的代码，可以这样：license:apache-2.0 spring cloud</li></ol></li><li><strong>明确搜索仓库的语言</strong><ol><li><strong>language</strong>:java 关键词</li></ol></li><li><strong>明确搜索某个人或组织的仓库</strong><ol><li>找某个人的代码：<strong>user</strong>:joshlong</li><li>多个查询之间「空格」分隔：<strong>user</strong>:joshlong <strong>language</strong>:java</li><li>找某个组织的代码：<strong>org</strong>:spring-cloud</li></ol></li></ol><p><strong>注意</strong>：</p><p>(1) <strong>冒号两侧不能有空格</strong>；</p><p>(2) <strong>多个查询之间「空格」分隔</strong></p><p>(3) <strong>不区分大小写</strong>；</p><p>(4) <strong>不能将以下通配符用作搜索查询的一部分</strong>，<strong>搜索将忽略这些符号</strong>：. , : ; / \ ` ‘ “ = * ! ? # $ &amp; + ^ | ~ &lt; &gt; ( ) { } [ ]；</p><p>(5) <strong>搜索默认为master分支。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 搜索技巧 </category>
          
          <category> 谷歌 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索技巧 </tag>
            
            <tag> 谷歌 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot】03-SpringBoot-Web开发</title>
      <link href="/2021/03/13/springboot-03-springboot-web-kai-fa/"/>
      <url>/2021/03/13/springboot-03-springboot-web-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h2><h3 id="1-1-文件类型"><a href="#1-1-文件类型" class="headerlink" title="1.1 文件类型"></a>1.1 文件类型</h3><h4 id="1-1-1-properties类型"><a href="#1-1-1-properties类型" class="headerlink" title="1.1.1 properties类型"></a>1.1.1 properties类型</h4><h4 id="1-1-2-yaml类型"><a href="#1-1-2-yaml类型" class="headerlink" title="1.1.2 yaml类型"></a>1.1.2 yaml类型</h4><p>1、yaml简介</p><p>&emsp;&emsp;YAML非常适合用来做以数据为中心的配置文件。</p><p>2、基本语法</p><ul><li>key: value；<font color=#FF0000 >kv之间有空格(：后面都有一个空格)</font></li><li>大小写敏感</li><li>使用缩进表示层级关系，缩进不允许使用tab，<font color=#FF0000 >只允许空格</font></li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>‘#’表示注释</li><li>字符串无需加引号，如果要加，<font color=#FF0000 >‘’和””表示字符串内容 会被 转义/不转义</font></li></ul><p>3、数据类型</p><ul><li>字面量：单个的、不可再分的值。data、Boolean、string、number、null</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">k</span><span class="token punctuation">:</span> v</code></pre><ul><li>对象：键值对的集合。map、hash、set、object </li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 第一种写法：行内写法</span><span class="token key atrule">k</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> v2<span class="token punctuation">,</span><span class="token key atrule">k3</span><span class="token punctuation">:</span> v3<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 第二种写法</span><span class="token key atrule">k</span><span class="token punctuation">:</span>   <span class="token key atrule">k1</span><span class="token punctuation">:</span> v1  <span class="token key atrule">k2</span><span class="token punctuation">:</span> v2  <span class="token key atrule">k3</span><span class="token punctuation">:</span> v3</code></pre><ul><li>数组：一组按次序排列的值。array、list、queue</li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 第一种写法：行内写法</span><span class="token key atrule">k</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第二种写法</span><span class="token key atrule">k</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> v1 <span class="token punctuation">-</span> v2 <span class="token punctuation">-</span> v3</code></pre><p>4、代码示例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 配置yaml中的前缀</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Pet pet<span class="token punctuation">;</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> interests<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> animal<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> score<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Double<span class="token operator">></span> salarys<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Pet<span class="token operator">>></span> allPets<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Double weight<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># yaml表示以上对象</span><span class="token comment" spellcheck="true">#  单引号会将 \n作为字符串输出   双引号会将\n 作为换行输出</span><span class="token comment" spellcheck="true">#  双引号不会转义，单引号会转义</span><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">userName</span><span class="token punctuation">:</span> 张三  <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2019/12/12 20<span class="token punctuation">:</span><span class="token datetime number">12:33</span>  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token comment" spellcheck="true"># 数组有两种表示方式</span>  <span class="token key atrule">interests</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>篮球<span class="token punctuation">,</span>足球<span class="token punctuation">]</span>  <span class="token key atrule">animal</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> jerry    <span class="token punctuation">-</span> mario  <span class="token comment" spellcheck="true"># 键值型的也有两种表示方式</span>  <span class="token key atrule">score</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">English</span><span class="token punctuation">:</span> <span class="token number">99</span><span class="token punctuation">,</span><span class="token key atrule">Math</span><span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">}</span>  <span class="token key atrule">salarys</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3999</span><span class="token punctuation">,</span><span class="token number">4999.98</span><span class="token punctuation">,</span><span class="token number">5999.99</span><span class="token punctuation">]</span>  <span class="token key atrule">pet</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat    <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">23.4</span>  <span class="token key atrule">allPets</span><span class="token punctuation">:</span>    <span class="token key atrule">sick</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> tomcat<span class="token punctuation">,</span><span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">}</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> jerry        <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">46</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> 阿狗        <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">66</span>    <span class="token key atrule">health</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token key atrule">name</span><span class="token punctuation">:</span> mario<span class="token punctuation">,</span><span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">47</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="1-2-配置提示"><a href="#1-2-配置提示" class="headerlink" title="1.2 配置提示"></a>1.2 配置提示</h3><p>&emsp;&emsp;自定义的类和配置文件绑定一般没有提示。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自定义的类和配置文件绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 简化部署：项目打成jar包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 打包的时候去除掉自定义类，减小文件大小 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210315094501.jpg" style="zoom: 50%;" /><h2 id="二、Web开发—SpringMVC自动配置概览"><a href="#二、Web开发—SpringMVC自动配置概览" class="headerlink" title="二、Web开发—SpringMVC自动配置概览"></a>二、Web开发—SpringMVC自动配置概览</h2><p>SpringBoot已经帮我们自动配置好了SpringMVC的大多场景。自动配置项包括以下内容：</p><ul><li><p>内容协商视图解析器和BeanName视图解析器</p></li><li><p>静态资源（包括webjars），详见</p></li></ul><ul><li><p>自动注册 <code>Converter，GenericConverter，Formatter</code></p></li><li><p>支持 <code>HttpMessageConverters</code> （配合内容协商理解原理），官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters</a></p></li><li><p>自动注册 <code>MessageCodesResolver</code> （国际化用）</p></li><li><p>静态index.html 页支持</p></li><li><p>自定义 <code>Favicon</code>  ，官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon</a></p></li><li><p>自动使用 <code>ConfigurableWebBindingInitializer</code> ，（DataBinder负责将请求数据绑定到JavaBean上），官方文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer</a></p></li></ul><hr><blockquote><p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.9.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p><p><strong>不用@EnableWebMvc注解。使用</strong> <strong><code>@Configuration</code></strong> <strong>+</strong> <strong><code>WebMvcConfigurer</code></strong> <strong>自定义规则</strong></p></blockquote><blockquote><p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p><p><strong>声明</strong> <strong><code>WebMvcRegistrations</code></strong> <strong>改变默认底层组件</strong></p></blockquote><blockquote><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p><p><strong>使用</strong> <strong><code>@EnableWebMvc+@Configuration+DelegatingWebMvcConfiguration 全面接管SpringMVC</code></strong></p></blockquote><h2 id="三、Web开发—简单功能分析"><a href="#三、Web开发—简单功能分析" class="headerlink" title="三、Web开发—简单功能分析"></a>三、Web开发—简单功能分析</h2><h3 id="3-1-静态资源访问"><a href="#3-1-静态资源访问" class="headerlink" title="3.1 静态资源访问"></a>3.1 静态资源访问</h3><h4 id="3-1-1-静态资源目录"><a href="#3-1-1-静态资源目录" class="headerlink" title="3.1.1  静态资源目录"></a>3.1.1  静态资源目录</h4><p>只要静态资源放在类路径(main/resources)下：  <code>/static</code> (or <code>/public</code> or <code>/resources</code> or <code>/META-INF/resources</code></p><p>访问方式： 当前项目根路径/ + 静态资源名 </p><p>原理： 默认静态资源映射为/**。<font color=#FF0000 >请求进来，先去找Controller看能不能处理。不能处理的所有请求又都交给静态资源处理器。</font>静态资源也找不到则响应404页面。</p><p>可以改变默认的静态资源路径，目的在于以后配置的拦截器，放行固定前缀的静态资源，只拦截动态资源</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> /res/**        <span class="token comment" spellcheck="true"># 以后静态资源访问都要加上/res/，才能正常访问</span>  <span class="token comment" spellcheck="true"># 修改静态资源的默认路径，默认是在static文件夹下，一般不推荐使用</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将这些静态资源都放在指定文件夹下面，方便后面拦截器的操作</span></code></pre><h4 id="3-1-2-静态资源访问前缀"><a href="#3-1-2-静态资源访问前缀" class="headerlink" title="3.1.2 静态资源访问前缀"></a>3.1.2 静态资源访问前缀</h4><p>默认访问是没有前缀的，访问路径为：当前项目 + 静态资源名 </p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>      <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> /res/**        <span class="token comment" spellcheck="true"># 以后静态资源访问都要加上/res/，才能正常访问</span></code></pre><p>加上前缀后，访问路径：当前项目 + static-path-pattern + 静态资源名 = 静态资源文件夹下找</p><h4 id="3-1-3-webjar"><a href="#3-1-3-webjar" class="headerlink" title="3.1. 3 webjar"></a>3.1. 3 webjar</h4><p>webjar就是将前端的静态资源：比如说jquery、bootstarp等资源以jar包的方式导入。</p><p>自动映射为：/<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener">webjars</a>/**</p><p>详细了解：<a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>访问地址：<a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/<strong>jquery/3.5.1/jquery.js</strong></a>  后面地址要按照依赖里面的包路径</p><h3 id="3-2-欢迎页支持"><a href="#3-2-欢迎页支持" class="headerlink" title="3.2 欢迎页支持"></a>3.2 欢迎页支持</h3><ul><li>第一种方法：静态资源路径下的index.html<ul><li>可以配置静态资源路径</li><li><font color=#FF0000 >但不可以配置静态资源的访问前缀。否则会导致index.html不能被默认访问。</font></li></ul></li></ul><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置静态资源的访问前缀static</span>    <span class="token comment" spellcheck="true"># 一旦配置了这个，就会使 welcome page 功能失效（即欢迎页不能展示）</span><span class="token comment" spellcheck="true">#    static-path-pattern: /static/**</span>  <span class="token comment" spellcheck="true"># 修改静态资源的默认路径，默认是在static文件夹下，一般不推荐使用</span>  <span class="token key atrule">resources</span><span class="token punctuation">:</span>    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>classpath<span class="token punctuation">:</span>/haha/<span class="token punctuation">]</span></code></pre><ul><li>第二种方法：controller能处理/index，然后跳转到index.html页面</li></ul><h3 id="3-3-自定义Favicon"><a href="#3-3-自定义Favicon" class="headerlink" title="3.3 自定义Favicon"></a>3.3 自定义Favicon</h3><p>网站左上角的小图标。只需要将favicon.ico 放在静态资源目录下。同样不可以配置静态资源的访问前缀。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#  mvc:</span><span class="token comment" spellcheck="true">#    static-path-pattern: /res/**   这个会导致 Favicon 功能失效</span></code></pre><h3 id="3-4-静态资源配置原理"><a href="#3-4-静态资源配置原理" class="headerlink" title="3.4 静态资源配置原理"></a>3.4 静态资源配置原理</h3><h2 id="四、Web开发—请求参数处理"><a href="#四、Web开发—请求参数处理" class="headerlink" title="四、Web开发—请求参数处理"></a>四、Web开发—请求参数处理</h2><h3 id="4-1-请求映射"><a href="#4-1-请求映射" class="headerlink" title="4.1 请求映射"></a>4.1 请求映射</h3><h4 id="4-1-1-rest使用与原理"><a href="#4-1-1-rest使用与原理" class="headerlink" title="4.1.1 rest使用与原理"></a>4.1.1 rest使用与原理</h4><ul><li>@xxxMapping；</li><li>Rest风格支持（<strong>使用HTTP请求方式动词</strong>来表示对资源的操作）<ul><li><em>以前：**/getUser</em>  <em>获取用户</em>   <em>/deleteUser</em> <em>删除用户</em>   <em>/editUser</em>  <em>修改用户</em>    <em>/saveUser</em> <em>保存用户</em></li><li>现在： /user   <strong>GET</strong>-获取用户  <strong>DELETE</strong>-删除用户   <strong>PUT</strong>-修改用户    <strong>POST</strong>-保存用户</li><li>核心Filter：HiddenHttpMethodFilter<ul><li>用法： <font color=#FF0000 >表单method=post，隐藏域 _method=put</font></li><li>SpringBoot中<font color=#FF0000 >手动开启</font></li></ul></li><li>也可以把_method 这个名字换成我们自己喜欢的。</li></ul></li></ul><p>1、controller代码</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"GET-张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"POST-张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>PUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">putUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"PUT-张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/user"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"DELETE-张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>2、配置类WebConfig代码</p><p>所有修改SpringBoot默认配置的代码，全部写在Config类中。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//自定义filter</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * HiddenHttpMethodFilter 中默认的MethodParam是_method     * 可以通过自定义hiddenHttpMethodFilter，将其设置为_m     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> HiddenHttpMethodFilter <span class="token function">hiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        HiddenHttpMethodFilter methodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        methodFilter<span class="token punctuation">.</span><span class="token function">setMethodParam</span><span class="token punctuation">(</span><span class="token string">"_m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> methodFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3、配置文件中开启rest功能</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">hiddenmethod</span><span class="token punctuation">:</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true"># 开启页面表单的 Rest功能</span></code></pre><p>4、Rest原理（<strong>表单提交要使用REST的时候</strong>）</p><ul><li>表单提交会带上<strong>_method=PUT</strong><ul><li><strong>需要在表单提交按钮前加上下面这一句话</strong></li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><ul><li><strong>请求过来</strong>被<strong>HiddenHttpMethodFilter</strong>拦截<ul><li>请求正常，并且是POST<ul><li>获取到<strong>_method</strong>的值，或是通过自定义hiddenHttpMethodFilter设置的_m的值。</li><li>兼容以下请求：<strong>PUT</strong>.<strong>DELETE</strong>.<strong>PATCH</strong></li><li><strong>原生request（post），包装模式requestWrapper重写了getMethod方法，返回的是传入的值。</strong></li><li><strong>过滤器链放行的时候用wrapper。以后的方法调用getMethod是调用requesWrapper的。</strong></li></ul></li></ul></li></ul><p><font color=#0000FF >Rest使用客户端工具，如PostMan直接发送Put、delete等方式请求，无需Filter。</font></p><h4 id="4-1-2-请求映射原理"><a href="#4-1-2-请求映射原理" class="headerlink" title="4.1.2 请求映射原理"></a>4.1.2 请求映射原理</h4><p>xxx</p><h3 id="4-2-普通参数与基本注解"><a href="#4-2-普通参数与基本注解" class="headerlink" title="4.2 普通参数与基本注解"></a>4.2 普通参数与基本注解</h3><h4 id="4-2-1-注解"><a href="#4-2-1-注解" class="headerlink" title="4.2.1 注解"></a>4.2.1 注解</h4><ul><li>@pathVariable：获取路径变量</li><li>@RequestHeader：获取请求头</li><li>@RequestParam：获取请求参数（一个属性有多个值可以使用？inters=bask&amp;inters=game）</li><li>@RequestBody：获取表单提交内容</li></ul><p><strong>注意：</strong></p><p>&emsp;&emsp;以上注解都可以使用<font color=#FF0000 >Map&lt;String, String&gt; </font>接收全部参数。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterTestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @PathVariable、@RequestHeader、@RequestParam、@MatrixVariable、@RequestBody、@CookieValue     * @ModelAttribute     * http://localhost:8080/car/3/owner/lisi?age=18&amp;inters=basketball&amp;inters=game     * @param id     * @param username     * @param pv     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/car/{id}/owner/{username}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@PathVariable</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> pv<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span> String userAgent<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@RequestHeader</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> header<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> Integer age<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"inters"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> inters<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@RequestParam</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> params<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//                                      @CookieValue("_ga") String _ga,</span><span class="token comment" spellcheck="true">//                                      @CookieValue("_ga") Cookie cookie</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @PathVariable</span><span class="token comment" spellcheck="true">//        map.put("id", id);</span><span class="token comment" spellcheck="true">//        map.put("username", username);</span><span class="token comment" spellcheck="true">//        map.put("pv", pv);      // {"pv":{"id":"3","username":"lisi"}}</span>        <span class="token comment" spellcheck="true">// @RequestHeader</span><span class="token comment" spellcheck="true">//        map.put("userAgent", userAgent);</span><span class="token comment" spellcheck="true">//        map.put("header", header);</span>        <span class="token comment" spellcheck="true">// @RequestParam</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"inters"</span><span class="token punctuation">,</span> inters<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"params"</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// {"params":{"age":"18","inters":"basketball"}} 同名参数只能获取到第一个值</span>        <span class="token comment" spellcheck="true">// @CookieValue</span><span class="token comment" spellcheck="true">//        map.put("_ga", _ga);</span><span class="token comment" spellcheck="true">//        map.put("cookie", cookie);</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">postMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String content<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"content"</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {"content":"userName=sys&amp;email=1049272251%40qq.com"}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>@MatrixVariable：矩阵变量<ul><li>Matrix Variable中，多个变量可以使用“;”（分号）分隔；</li><li>如果是一个变量的多个值那么可以使用“,”（逗号）分隔，或者可以使用重复的变量名</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterTestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 1、语法：请求路径：/cars/sell;low=34;brand=byd,audi,yd     * 2、SpringBoot默认是禁用了矩阵变量的功能     *      手动开启：原理----对于路径的处理，UrlPathHelper进行判断     *          removeSemicolonContent（移除分好内容）支持矩阵变量的     * 3、矩阵变量必须有url路径变量才能被解析（即url中的sell在控制器中要变成{path}）     * @return     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/cars/{path}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">carsSell</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">"low"</span><span class="token punctuation">)</span> Integer low<span class="token punctuation">,</span>                                        <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span><span class="token string">"brand"</span><span class="token punctuation">)</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> brand<span class="token punctuation">,</span>                                        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span> String path<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"low"</span><span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"brand"</span><span class="token punctuation">,</span> brand<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// {"path":"sell","low":34,"brand":["byd","audi","yd"]}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// /boss/1;age=20/2;age=10</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/boss/{bossId}/{empId}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">boss</span><span class="token punctuation">(</span><span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>pathVar <span class="token operator">=</span> <span class="token string">"bossId"</span><span class="token punctuation">)</span> Integer bossAge<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@MatrixVariable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>pathVar <span class="token operator">=</span> <span class="token string">"empId"</span><span class="token punctuation">)</span> Integer empAge<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bossAge"</span><span class="token punctuation">,</span> bossAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"empAge"</span><span class="token punctuation">,</span> empAge<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// {"bossAge":20,"empAge":10}</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置文件中开启矩阵变量功能</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true   </span><span class="token comment" spellcheck="true"># 开启矩阵变量的功能，开启请求参数内容协商模式</span></code></pre><ul><li>@RequestAttribute获取request域属性(HttpServetRequest在request域中添加属性)<ul><li>required默认为true，即作用域中必须有该参数的值，否则会报错</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @RequestAttribute(value = "msg",required = false)     *  required默认为true，即作用域中必须有该参数的值，否则会报错     *  当required为false时，作用域中没有该参数的值时，不会报错，结果中直接不显示，也不显示null     * @param request     * @param msg     * @param code     * @return     */</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"sucess"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">testParam</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>                                         <span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"msg"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String msg<span class="token punctuation">,</span>                                         <span class="token annotation punctuation">@RequestAttribute</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"code"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> Integer code<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object msg1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object hello <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object world <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object message <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"reqMethod_msg"</span><span class="token punctuation">,</span> msg1<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"annotation_msg"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">,</span> world<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> map<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-2-2-Servlet-API"><a href="#4-2-2-Servlet-API" class="headerlink" title="4.2.2 Servlet API"></a>4.2.2 Servlet API</h4><p>WebRequest、ServletRequest、MultipartRequest、 HttpSession、javax.servlet.http.PushBuilder、Principal、InputStream、Reader、HttpMethod、Locale、TimeZone、ZoneId</p><h4 id="4-2-3-复杂参数"><a href="#4-2-3-复杂参数" class="headerlink" title="4.2.3 复杂参数"></a>4.2.3 复杂参数</h4><ul><li><strong>Map</strong>、<strong>Model（map、model里面的数据会被放在request的请求域  request.setAttribute）</strong></li><li><strong>RedirectAttributes（ 重定向携带数据）**</strong>、ServletResponse（response）**</li><li>Errors/BindingResult、SessionStatus、UriComponentsBuilder、ServletUriComponentsBuilder</li></ul><p><strong>Map、Model类型的参数</strong>，会返回 mavContainer.getModel（）；—&gt; BindingAwareModelMap 是Model 也是Map</p><p><strong>mavContainer</strong>.getModel(); 获取到值的</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210315141904.png" style="zoom: 67%;" /><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210315141953.png" style="zoom: 80%;" /><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210315142040.png" style="zoom:67%;" /><h4 id="4-2-4-自定义对象参数"><a href="#4-2-4-自定义对象参数" class="headerlink" title="4.2.4 自定义对象参数"></a>4.2.4 自定义对象参数</h4><p>可以自动类型转换与格式化，可以级联封装。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *     姓名： &lt;input name="userName"/> &lt;br/> *     年龄： &lt;input name="age"/> &lt;br/> *     生日： &lt;input name="birth"/> &lt;br/> *     宠物姓名：&lt;input name="pet.name"/>&lt;br/> *     宠物年龄：&lt;input name="pet.age"/> */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Pet pet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-3-POJO封装过程"><a href="#4-3-POJO封装过程" class="headerlink" title="4.3 POJO封装过程"></a>4.3 POJO封装过程</h3><ul><li><strong>ServletModelAttributeMethodProcessor</strong></li></ul><h3 id="4-4-参数处理过程"><a href="#4-4-参数处理过程" class="headerlink" title="4.4 参数处理过程"></a>4.4 参数处理过程</h3><ul><li>HandlerMapping中找到能处理请求的Handler（Controller.method()）</li><li>为当前Handler 找一个适配器 HandlerAdapter； <strong>RequestMappingHandlerAdapter</strong></li><li>适配器执行目标方法并确定方法参数的每一个值</li></ul><p>xxx</p><h2 id="五、Web开发—数据响应和内容协商"><a href="#五、Web开发—数据响应和内容协商" class="headerlink" title="五、Web开发—数据响应和内容协商"></a>五、Web开发—数据响应和内容协商</h2><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316155944.jpg" style="zoom: 67%;" /><h3 id="5-1-响应JSON"><a href="#5-1-响应JSON" class="headerlink" title="5.1 响应JSON"></a>5.1 响应JSON</h3><h4 id="5-1-1-jackson-jar-ResponseBody"><a href="#5-1-1-jackson-jar-ResponseBody" class="headerlink" title="5.1.1  jackson.jar+@ResponseBody"></a>5.1.1  jackson.jar+@ResponseBody</h4><p>给前端自动返回json数据；</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>web场景已经自动引入了json场景<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>1、返回值解析器</p><p>XXX</p><p>2、返回值解析器原理</p><p>XXX</p><h4 id="5-1-2-SpringMVC到底支持哪些返回值"><a href="#5-1-2-SpringMVC到底支持哪些返回值" class="headerlink" title="5.1.2 SpringMVC到底支持哪些返回值"></a>5.1.2 SpringMVC到底支持哪些返回值</h4><pre class=" language-java"><code class="language-java">ModelAndViewModelViewResponseEntity ResponseBodyEmitterStreamingResponseBodyHttpEntityHttpHeadersCallableDeferredResultListenableFutureCompletionStageWebAsyncTask有 <span class="token annotation punctuation">@ModelAttribute</span> 且为对象类型的<span class="token annotation punctuation">@ResponseBody</span> 注解 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> RequestResponseBodyMethodProcessor；</code></pre><h4 id="5-1-3-HTTPMessageConverter原理"><a href="#5-1-3-HTTPMessageConverter原理" class="headerlink" title="5.1.3 HTTPMessageConverter原理"></a>5.1.3 HTTPMessageConverter原理</h4><p>HttpMessageConverter接口主要提供以下几个方法：</p><p>（1）canRead 是否可以读</p><p>（2）canWrite 是否可以写</p><p>（3）read() 读数据</p><p>（4）write() 写数据</p><p>1、MessageConverter规范</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316161112.png" style="zoom:80%;" /><p>HttpMessageConverter: 看是否支持将 此 Class类型的对象，转为MediaType类型的数据。</p><p>例如：Person对象转为JSON。或者 JSON转为Person</p><p>2、默认的MessageConverter</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316161304.png" style="zoom: 80%;" /><p>0 - 只支持Byte类型的</p><p>1 - String</p><p>2 - String</p><p>3 - Resource</p><p>4 - ResourceRegion</p><p>5 - DOMSource.<strong>class \</strong> SAXSource.<strong>class</strong>) \ StAXSource.<strong>class \</strong>StreamSource.<strong>class \</strong>Source.<strong>class</strong></p><p><strong>6 -</strong> MultiValueMap</p><p>7 - <strong>可支持所有类型（一直返回true）</strong></p><p><strong>8 - true</strong></p><p><strong>9 - 支持注解方式xml处理的</strong></p><p>最终 MappingJackson2HttpMessageConverter  把对象转为JSON（利用底层的jackson的objectMapper转换的）</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316161457.png" style="zoom:80%;" /><h3 id="5-2-内容协商"><a href="#5-2-内容协商" class="headerlink" title="5.2 内容协商"></a>5.2 内容协商</h3><p>根据客户端接收能力不同，返回不同媒体类型的数据。</p><h4 id="5-2-1-引入xml依赖"><a href="#5-2-1-引入xml依赖" class="headerlink" title="5.2.1 引入xml依赖"></a>5.2.1 引入xml依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="5-2-2-postman分别测试返回json和xml"><a href="#5-2-2-postman分别测试返回json和xml" class="headerlink" title="5.2.2 postman分别测试返回json和xml"></a>5.2.2 postman分别测试返回json和xml</h4><p>只需要改变<font color=#FF0000 >请求头中Accept字段。</font>Http协议中规定的，告诉服务器本客户端可以接收的数据类型。</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/1111.png" alt=""></p><h4 id="5-2-3-开启浏览器参数方式内容协商功能"><a href="#5-2-3-开启浏览器参数方式内容协商功能" class="headerlink" title="5.2.3 开启浏览器参数方式内容协商功能"></a>5.2.3 开启浏览器参数方式内容协商功能</h4><p>为了方便内容协商，可以在SpringBoot的yaml配置文件中开启基于请求参数的内容协商功能。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">contentnegotiation</span><span class="token punctuation">:</span>      <span class="token key atrule">favor-parameter</span><span class="token punctuation">:</span> <span class="token boolean important">true  </span><span class="token comment" spellcheck="true">#开启请求参数内容协商模式</span></code></pre><p>配置开启内容协商模式后，通过在<font color=#FF0000 >发送的请求后面加上format参数</font>来选择返回的数据类型</p><p>浏览器端发送请求：</p><p><a href="http://localhost:8080/test/person?format=json" target="_blank" rel="noopener">http://localhost:8080/test/person?format=json</a><br><a href="http://localhost:8080/test/person?format=xml" target="_blank" rel="noopener">http://localhost:8080/test/person?format=xml</a></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316163017.png" alt=""></p><p>确定客户端接收什么样的内容类型；</p><ol><li>Parameter策略优先确定是要返回json数据（获取请求头中的format的值）<ol><li>浏览器端不传参数或者是没匹配到，就是 “*/ *” 都能匹配，然后按权重匹配，最高权重直接匹配到第一个，而第一个就是json</li></ol></li><li>最终进行内容协商返回给客户端json即可。</li></ol><h4 id="5-2-4-内容协商原理"><a href="#5-2-4-内容协商原理" class="headerlink" title="5.2.4 内容协商原理"></a>5.2.4 内容协商原理</h4><p> XXX</p><h4 id="5-2-5-自定义-MessageConverter"><a href="#5-2-5-自定义-MessageConverter" class="headerlink" title="5.2.5 自定义 MessageConverter"></a>5.2.5 自定义 MessageConverter</h4><p>XXX</p><h2 id="六、Web开发—视图解析与模板引擎"><a href="#六、Web开发—视图解析与模板引擎" class="headerlink" title="六、Web开发—视图解析与模板引擎"></a>六、Web开发—视图解析与模板引擎</h2><p>视图解析：<strong>SpringBoot默认不支持 JSP，需要引入第三方模板引擎技术实现页面渲染。</strong></p><h3 id="6-1-视图解析"><a href="#6-1-视图解析" class="headerlink" title="6.1 视图解析"></a>6.1 视图解析</h3><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316163713.jpg" style="zoom:67%;" /><h4 id="6-1-1-视图解析原理流程"><a href="#6-1-1-视图解析原理流程" class="headerlink" title="6.1.1 视图解析原理流程"></a>6.1.1 视图解析原理流程</h4><p>XXXX</p><h3 id="6-2-模板引擎-Thymeleaf"><a href="#6-2-模板引擎-Thymeleaf" class="headerlink" title="6.2 模板引擎-Thymeleaf"></a>6.2 模板引擎-Thymeleaf</h3><h4 id="6-2-1-thymeleaf简介"><a href="#6-2-1-thymeleaf简介" class="headerlink" title="6.2.1 thymeleaf简介"></a>6.2.1 thymeleaf简介</h4><p>现代化、服务端Java模板引擎</p><h4 id="6-2-2-基本语法"><a href="#6-2-2-基本语法" class="headerlink" title="6.2.2 基本语法"></a>6.2.2 基本语法</h4><p>1、表达式</p><table><thead><tr><th>表达式名字</th><th>语法</th><th>用途</th></tr></thead><tbody><tr><td><font color=#FF0000 >变量取值</font></td><td>${…}</td><td>获取请求域、session域、对象等值</td></tr><tr><td>选择变量</td><td>*{…}</td><td>获取上下文对象值</td></tr><tr><td>消息</td><td>#{…}</td><td>获取国际化等值</td></tr><tr><td><font color=#FF0000 >链接</font></td><td>@{…}</td><td>生成链接</td></tr><tr><td>片段表达式</td><td>~{…}</td><td>jsp:include 作用，引入公共页面片段</td></tr></tbody></table><p>2、字面量</p><ul><li>文本值: <strong>‘one text’</strong> <strong>,</strong> <strong>‘Another one!’</strong> <strong>,…</strong></li><li>数字: <strong>0</strong> <strong>,</strong> <strong>34</strong> <strong>,</strong> <strong>3.0</strong> <strong>,</strong> <strong>12.3</strong> <strong>,…</strong></li><li>布尔值: <strong>true</strong> <strong>,</strong> <strong>false</strong></li><li>空值: <strong>null</strong></li><li>变量： one，two，…. 变量不能有空格</li></ul><p>3、文本操作</p><ul><li><font color=#FF0000 >字符串拼接</font>: <strong>+</strong></li><li><font color=#FF0000 >变量替换</font>: <strong>|The name is ${name}|</strong> </li></ul><p>4、数学运算</p><p>运算符: + , - , * , / , %</p><p>5、布尔运算</p><ul><li>运算符:  <strong>and</strong> <strong>,</strong> <strong>or</strong></li><li>一元运算: <strong>!</strong> <strong>,</strong> <strong>not</strong> </li></ul><p>6、比较运算</p><ul><li>比较: <strong>&gt;</strong> <strong>,</strong> <strong>&lt;</strong> <strong>,</strong> <strong>&gt;=</strong> <strong>,</strong> <strong>&lt;=</strong> <strong>(</strong> <strong>gt</strong> <strong>,</strong> <strong>lt</strong> <strong>,</strong> <strong>ge</strong> <strong>,</strong> <strong>le</strong> <strong>)</strong></li><li>等式: <strong>==</strong> <strong>,</strong> <strong>!=</strong> <strong>(</strong> <strong>eq</strong> <strong>,</strong> <strong>ne</strong> <strong>)</strong> </li></ul><p>7、条件运算</p><ul><li>If-then: <strong>(if) ? (then)</strong></li><li>If-then-else: <strong>(if) ? (then) : (else)</strong></li><li>Default: (value) <strong>?: (defaultvalue)</strong> </li></ul><p>8、特殊操作</p><p>无操作： _</p><h4 id="6-2-3-设置属性值"><a href="#6-2-3-设置属性值" class="headerlink" title="6.2.3 设置属性值"></a>6.2.3 设置属性值</h4><ul><li>设置单个值</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subscribe.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/subscribe}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Subscribe!<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{subscribe.submit}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>设置多个值</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../images/gtvglogo.png<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/images/gtvglogo.png},title<span class="token punctuation">=</span>#{logo},alt<span class="token punctuation">=</span>#{logo}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>所有h5兼容的标签写法：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes" target="_blank" rel="noopener">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#setting-value-to-specific-attributes</a></p><h4 id="6-2-4-迭代"><a href="#6-2-4-迭代" class="headerlink" title="6.2.4 迭代"></a>6.2.4 迭代</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prod : ${prods}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Onions<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.price}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${prod.inStock}? #{true} : #{false}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- user表示循环变量，stat：可以用来设置索引 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gradeX<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user,stat:${users.records}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${stat.count}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.email}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- /delete/1?pn=3 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/delete/{id}(id<span class="token punctuation">=</span>${user.id},pn<span class="token punctuation">=</span>${users.current}) }<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-danger btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span></code></pre><h4 id="6-4-5-条件运算"><a href="#6-4-5-条件运算" class="headerlink" title="6.4.5  条件运算"></a>6.4.5  条件运算</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>comments.html<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/product/comments(prodId<span class="token punctuation">=</span>${prod.id})}<span class="token punctuation">"</span></span>   <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not #lists.isEmpty(prod.comments)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>view<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><h3 id="6-3-thymeleaf使用"><a href="#6-3-thymeleaf使用" class="headerlink" title="6.3 thymeleaf使用"></a>6.3 thymeleaf使用</h3><h4 id="6-3-1-引入Starter"><a href="#6-3-1-引入Starter" class="headerlink" title="6.3.1 引入Starter"></a>6.3.1 引入Starter</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="6-3-2-自动配置好了thymeleaf"><a href="#6-3-2-自动配置好了thymeleaf" class="headerlink" title="6.3.2 自动配置好了thymeleaf"></a>6.3.2 自动配置好了thymeleaf</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ThymeleafProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> TemplateMode<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> SpringTemplateEngine<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> WebMvcAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebFluxAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThymeleafAutoConfiguration</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></code></pre><p>自动配好的策略：</p><ol><li>所有thymeleaf的配置值都在 ThymeleafProperties</li><li>配置好了 <strong>SpringTemplateEngine</strong> </li><li><strong>配好了</strong> <strong>ThymeleafViewResolver</strong> </li><li>我们只需要直接开发页面</li><li>配置了默认文件路径在 /templates/ 下，默认后缀是 .html</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_PREFIX <span class="token operator">=</span> <span class="token string">"classpath:/templates/"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_SUFFIX <span class="token operator">=</span> <span class="token string">".html"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//xxx.html</span></code></pre><h4 id="6-3-3-页面开发"><a href="#6-3-3-页面开发" class="headerlink" title="6.3.3 页面开发"></a>6.3.3 页面开发</h4><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>哈哈<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- ${link}:是将link中的值取出，作为URL         @{link}：是直接将link作为URL    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.atguigu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${link}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去百度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>www.atguigu.com<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{link}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>去百度2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="6-4-构建后台管理系统"><a href="#6-4-构建后台管理系统" class="headerlink" title="6.4 构建后台管理系统"></a>6.4 构建后台管理系统</h3><h4 id="6-4-1-项目创建"><a href="#6-4-1-项目创建" class="headerlink" title="6.4.1 项目创建"></a>6.4.1 项目创建</h4><p>自动创建时，选取以下内容：thymeleaf、web-starter、devtools、lombok</p><h4 id="6-4-2-静态资源处理"><a href="#6-4-2-静态资源处理" class="headerlink" title="6.4.2 静态资源处理"></a>6.4.2 静态资源处理</h4><p>自动配置好，我们只需要把所有静态资源放到 static 文件夹下</p><h4 id="6-4-3-路径构建"><a href="#6-4-3-路径构建" class="headerlink" title="6.4.3 路径构建"></a>6.4.3 路径构建</h4><p>th:action=”@{/login}”</p><h4 id="6-4-4-模板抽取"><a href="#6-4-4-模板抽取" class="headerlink" title="6.4.4 模板抽取"></a>6.4.4 模板抽取</h4><p>th:insert/replace/include</p><h4 id="6-4-5-页面跳转"><a href="#6-4-5-页面跳转" class="headerlink" title="6.4.5 页面跳转"></a>6.4.5 页面跳转</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">main</span><span class="token punctuation">(</span>User user<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把登陆成功的用户保存起来</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录成功重定向到main.html;  重定向防止表单重复提交</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/main.html"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"账号密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回到登录页面</span>        <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="6-4-6-数据渲染"><a href="#6-4-6-数据渲染" class="headerlink" title="6.4.6 数据渲染"></a>6.4.6 数据渲染</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dynamic_table"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">dynamic_table</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//表格内容的遍历</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span> <span class="token string">"123444"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">,</span> <span class="token string">"aaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"hehe "</span><span class="token punctuation">,</span> <span class="token string">"aaddd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"table/dynamic_table"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>display table table-bordered<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden-table-info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>#<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gradeX<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user,stats:${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${stats.count}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Trident<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.userName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Internet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token punctuation">></span></span>[[${user.password}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><h2 id="七、Web开发—拦截器"><a href="#七、Web开发—拦截器" class="headerlink" title="七、Web开发—拦截器"></a>七、Web开发—拦截器</h2><p>1、编写一个<font color=#0000FF >拦截器实现HandlerInterceptor接口</font></p><p>2、拦截器注册到容器中<font color=#0000FF >（实现WebMvcConfigurer的addInterceptors）</font></p><p>3、<font color=#0000FF >指定拦截规则</font>【如果是拦截所有，静态资源也会被拦截】</p><h3 id="7-1-HandlerInterceptor-接口"><a href="#7-1-HandlerInterceptor-接口" class="headerlink" title="7.1 HandlerInterceptor 接口"></a>7.1 HandlerInterceptor 接口</h3><p>配置自定义的拦截器，实现HandlerInterceptor 接口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 登录检查 * 1、配置好拦截器要拦截哪些请求 * 2、把这些配置放在容器中 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 目标方法执行之前     * @param request     * @param response     * @param handler     * @return     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String requestURI <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"preHandle拦截的请求路径是{}"</span><span class="token punctuation">,</span>requestURI<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录检查逻辑</span>        HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object loginUser <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//放行</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拦截住。未登录。跳转到登录页</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"请先登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//        re.sendRedirect("/");</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 目标方法执行完成以后     * @param request     * @param response     * @param handler     * @param modelAndView     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"postHandle执行{}"</span><span class="token punctuation">,</span>modelAndView<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 页面渲染以后     * @param request     * @param response     * @param handler     * @param ex     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"afterCompletion执行异常{}"</span><span class="token punctuation">,</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-2-配置拦截器"><a href="#7-2-配置拦截器" class="headerlink" title="7.2 配置拦截器"></a>7.2 配置拦截器</h3><p>在Config类中注册自定义的拦截器</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 1、编写一个拦截器实现HandlerInterceptor接口 * 2、拦截器注册到容器中（实现WebMvcConfigurer的addInterceptors） * 3、指定拦截规则【如果是拦截所有，静态资源也会被拦截】 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoginInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//所有请求都被拦截包括静态资源</span>                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span><span class="token string">"/login"</span><span class="token punctuation">,</span><span class="token string">"/css/**"</span><span class="token punctuation">,</span><span class="token string">"/fonts/**"</span><span class="token punctuation">,</span><span class="token string">"/images/**"</span><span class="token punctuation">,</span><span class="token string">"/js/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//放行的请求</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-3-拦截器原理"><a href="#7-3-拦截器原理" class="headerlink" title="7.3 拦截器原理"></a>7.3 拦截器原理</h3><p>XXX</p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316171132.png" style="zoom: 67%;" /><h2 id="八、Web开发—文件上传"><a href="#八、Web开发—文件上传" class="headerlink" title="八、Web开发—文件上传"></a>八、Web开发—文件上传</h2><h3 id="8-1-页面表单"><a href="#8-1-页面表单" class="headerlink" title="8.1 页面表单"></a>8.1 页面表单</h3><ul><li><p>表单提交中设计到文件上传时，<font color=#FF0000 >method必须是<strong>post</strong></font>，并且必须加上<font color=#FF0000 > <strong>enctype=”multipart/form-data”</strong></font></p></li><li><p><font color=#FF0000 >id=”<strong>exampleInputFile</strong>“：表示单文件上传</font></p></li><li><p><font color=#FF0000 ><strong>multiple</strong>：表示多文件上传</font></p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/upload}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputEmail1<span class="token punctuation">"</span></span>               <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Enter email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>头像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headerImg<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>exampleInputFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生活照<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>photos<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h3 id="8-2-文件上传代码"><a href="#8-2-文件上传代码" class="headerlink" title="8.2 文件上传代码"></a>8.2 文件上传代码</h3><ul><li><font color=#FF0000 ><strong>MultipartFile</strong>：用来接收单个图片</font></li><li><font color=#FF0000 ><strong>MultipartFile[]</strong>：用来接收多个图片</font></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * MultipartFile 自动封装上传过来的文件     * @param email     * @param username     * @param headerImg     * @param photos     * @return     */</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span> String email<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"headerImg"</span><span class="token punctuation">)</span> MultipartFile headerImg<span class="token punctuation">,</span>                     <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"photos"</span><span class="token punctuation">)</span> MultipartFile<span class="token punctuation">[</span><span class="token punctuation">]</span> photos<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"上传的信息：email={}，username={}，headerImg={}，photos={}"</span><span class="token punctuation">,</span>             email<span class="token punctuation">,</span>username<span class="token punctuation">,</span>headerImg<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>photos<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>headerImg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//保存到文件服务器，OSS服务器</span>        String originalFilename <span class="token operator">=</span> headerImg<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headerImg<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"H:\\cache\\"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>photos<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MultipartFile photo <span class="token operator">:</span> photos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>photo<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                String originalFilename <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"H:\\cache\\"</span><span class="token operator">+</span>originalFilename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"main"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="8-2-文件上传自动配置原理"><a href="#8-2-文件上传自动配置原理" class="headerlink" title="8.2 文件上传自动配置原理"></a>8.2 文件上传自动配置原理</h3><p>XXX</p><h2 id="九、Web开发—异常处理"><a href="#九、Web开发—异常处理" class="headerlink" title="九、Web开发—异常处理"></a>九、Web开发—异常处理</h2><h3 id="9-1-错误处理的默认规则"><a href="#9-1-错误处理的默认规则" class="headerlink" title="9.1 错误处理的默认规则"></a>9.1 错误处理的默认规则</h3><ul><li>默认情况下，Spring Boot提供<code>/error</code>处理所有错误的映射</li></ul><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316172324.png" alt=""></p><ul><li>对于机器客户端，它将生成JSON响应，其中包含错误，HTTP状态和异常消息的详细信息。对于浏览器客户端，响应一个“ whitelabel”错误视图，以HTML格式呈现相同的数据</li></ul><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316172340.png" alt=""></p><ul><li>要对其进行自定义，添加<code>View</code>解析为<code>error</code></li><li>要完全替换默认行为，可以实现 <code>ErrorController</code>并注册该类型的Bean定义，或添加<code>ErrorAttributes类型的组件</code>以使用现有机制但替换其内容。</li><li>error/下的4xx，5xx页面会被自动解析；</li></ul><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316172449.png" alt=""></p><h3 id="9-2-定制错误处理逻辑"><a href="#9-2-定制错误处理逻辑" class="headerlink" title="9.2 定制错误处理逻辑"></a>9.2 定制错误处理逻辑</h3><p>XXX</p><h3 id="9-3-异常处理自动配置原理"><a href="#9-3-异常处理自动配置原理" class="headerlink" title="9.3 异常处理自动配置原理"></a>9.3 异常处理自动配置原理</h3><p>XXX</p><h3 id="9-4-异常处理步骤流程"><a href="#9-4-异常处理步骤流程" class="headerlink" title="9.4 异常处理步骤流程"></a>9.4 异常处理步骤流程</h3><p>XXX</p><h2 id="十、Web开发—Web原生组件注入（Servlet、Filter、Listener）"><a href="#十、Web开发—Web原生组件注入（Servlet、Filter、Listener）" class="headerlink" title="十、Web开发—Web原生组件注入（Servlet、Filter、Listener）"></a>十、Web开发—Web原生组件注入（Servlet、Filter、Listener）</h2><h3 id="10-1-使用Servlet-API"><a href="#10-1-使用Servlet-API" class="headerlink" title="10.1 使用Servlet API"></a>10.1 使用Servlet API</h3><ul><li><p>@ServletComponentScan(basePackages = <strong>“com.atguigu.admin”</strong>) :指定原生Servlet组件都放在那里</p></li><li><p>@WebServlet(urlPatterns = <strong>“/my”</strong>)：效果：直接响应，<strong>没有经过Spring的拦截器？</strong></p><ul><li>根据精确优先原则，DispatcherServlet处理”/“请求，MyServlet处理”/my”请求，更精确，所以由原生的servlet（Tomcat）处理,而只有由DispatcherServlet处理的请求才会经过spring的拦截器</li><li><font color=#FF0000 >因此优先来到/my路径,而不是先到/路径,因此不会走Spring流程,而是走Tomcat流程,故/my路径不会被拦截器拦截</font></li></ul></li><li><p>@WebFilter(urlPatterns={<strong>“/css/*“</strong>,<strong>“/images/*“</strong>})</p></li><li><p>@WebListener</p></li></ul><p><strong>扩展</strong>：<strong>DispatchServlet 如何注册进来</strong></p><ul><li>容器中自动配置了  DispatcherServlet  属性绑定到 WebMvcProperties；对应的配置文件配置项是 <strong>spring.mvc。</strong></li><li><strong>通过</strong> <strong>ServletRegistrationBean</strong><DispatcherServlet> 把 DispatcherServlet  配置进来。</li><li>默认映射的是 / 路径。</li></ul><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210316184621.png" style="zoom:80%;" /><p>Tomcat-Servlet；</p><p>多个Servlet都能处理到同一层路径，精确优选原则</p><p>A： /my/</p><p>B： /my/1</p><h3 id="10-2-使用RegistrationBean"><a href="#10-2-使用RegistrationBean" class="headerlink" title="10.2 使用RegistrationBean"></a>10.2 使用RegistrationBean</h3><p><code>ServletRegistrationBean</code>、<code>FilterRegistrationBean</code>和<code>ServletListenerRegistrationBean</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRegistConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">myServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyServlet myServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token punctuation">(</span>myServlet<span class="token punctuation">,</span><span class="token string">"/my"</span><span class="token punctuation">,</span><span class="token string">"/my02"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MyFilter myFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        return new FilterRegistrationBean(myFilter,myServlet());</span>        FilterRegistrationBean filterRegistrationBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>myFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterRegistrationBean<span class="token punctuation">.</span><span class="token function">setUrlPatterns</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"/my"</span><span class="token punctuation">,</span><span class="token string">"/css/*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filterRegistrationBean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletListenerRegistrationBean <span class="token function">myListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        MySwervletContextListener mySwervletContextListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySwervletContextListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBean</span><span class="token punctuation">(</span>mySwervletContextListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="十一、Web开发—嵌入式Servlet容器"><a href="#十一、Web开发—嵌入式Servlet容器" class="headerlink" title="十一、Web开发—嵌入式Servlet容器"></a>十一、Web开发—嵌入式Servlet容器</h2><h3 id="11-1-切换嵌入式Servlet容器"><a href="#11-1-切换嵌入式Servlet容器" class="headerlink" title="11.1 切换嵌入式Servlet容器"></a>11.1 切换嵌入式Servlet容器</h3><ul><li><p>默认支持的webServer</p><ul><li><code>Tomcat</code>, <code>Jetty</code>, or <code>Undertow</code></li><li><code>ServletWebServerApplicationContext 容器启动寻找ServletWebServerFactory 并引导创建服务器</code></li></ul></li><li><p>切换服务器</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>原理<ul><li>SpringBoot应用启动发现当前是Web应用。web场景包-导入tomcat</li><li>web应用会创建一个web版的ioc容器 <code>ServletWebServerApplicationContext</code> </li><li><code>ServletWebServerApplicationContext</code>  启动的时候寻找 <strong><code>ServletWebServerFactory</code></strong><code>（Servlet 的web服务器工厂---&gt; Servlet 的web服务器）</code>  </li><li>SpringBoot底层默认有很多的WebServer工厂；<code>TomcatServletWebServerFactory</code>, <code>JettyServletWebServerFactory</code>, or <code>UndertowServletWebServerFactory</code></li><li><code>底层直接会有一个自动配置类。ServletWebServerFactoryAutoConfiguration</code></li><li><code>ServletWebServerFactoryAutoConfiguration导入了ServletWebServerFactoryConfiguration（配置类）</code></li><li><code>ServletWebServerFactoryConfiguration 配置类 根据动态判断系统中到底导入了那个Web服务器的包。（默认是web-starter导入tomcat包），容器中就有 TomcatServletWebServerFactory</code></li><li><code>TomcatServletWebServerFactory 创建出Tomcat服务器并启动；TomcatWebServer 的构造器拥有初始化方法initialize---this.tomcat.start();</code></li><li><code>内嵌服务器，就是手动把启动服务器的代码调用（tomcat核心jar包存在）</code></li></ul></li></ul><h3 id="11-2-定制Servlet容器"><a href="#11-2-定制Servlet容器" class="headerlink" title="11.2 定制Servlet容器"></a>11.2 定制Servlet容器</h3><ul><li><p>实现  <strong>WebServerFactoryCu</strong>stomizer<ConfigurableServletWebServerFactory> </p><ul><li>把配置文件的值和<strong><code>ServletWebServerFactory 进行绑定</code></strong></li></ul></li><li><p>修改配置文件 <strong>server.xxx</strong></p></li><li><p>直接自定义 <strong>ConfigurableServletWebServerFactory</strong> </p></li></ul><p><strong>xxxxx</strong><font color=#FF0000 >Customizer</font>：<strong>定制化器，可以改变xxxx的默认规则</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span>WebServerFactoryCustomizer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ConfigurableServletWebServerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomizationBean</span> <span class="token keyword">implements</span> <span class="token class-name">WebServerFactoryCustomizer</span><span class="token operator">&lt;</span>ConfigurableServletWebServerFactory<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span>ConfigurableServletWebServerFactory server<span class="token punctuation">)</span> <span class="token punctuation">{</span>        server<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="十二、Web开发—定制化原理"><a href="#十二、Web开发—定制化原理" class="headerlink" title="十二、Web开发—定制化原理"></a>十二、Web开发—定制化原理</h2><h3 id="12-1-定制化的常见方式"><a href="#12-1-定制化的常见方式" class="headerlink" title="12.1 定制化的常见方式"></a>12.1 定制化的常见方式</h3><ul><li>修改配置文件；</li><li><strong>xxxxxCustomizer；</strong></li><li><strong>编写自定义的配置类  xxxConfiguration；+</strong> <strong>@Bean替换、增加容器中默认组件；视图解析器</strong> </li><li><font color=#FF0000 ><strong>Web应用 编写一个配置类实现 WebMvcConfigurer 即可定制化web功能；+ @Bean给容器中再扩展一些组件</strong></font></li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdminWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ul><li>@EnableWebMvc + WebMvcConfigurer —— @Bean  可以全面接管SpringMVC，所有规则全部自己重新配置； 实现定制和扩展功能<ul><li>原理</li><li>1、WebMvcAutoConfiguration  默认的SpringMVC的自动配置功能类。静态资源、欢迎页…..</li><li>2、一旦使用 @EnableWebMvc 、。会 @Import(DelegatingWebMvcConfiguration.<strong>class</strong>)</li><li>3、<strong>DelegatingWebMvcConfiguration</strong> 的 作用，只保证SpringMVC最基本的使用<ul><li>把所有系统中的 WebMvcConfigurer 拿过来。所有功能的定制都是这些 WebMvcConfigurer  合起来一起生效</li><li>自动配置了一些非常底层的组件。<strong>RequestMappingHandlerMapping</strong>、这些组件依赖的组件都是从容器中获取</li><li><strong>public class</strong> DelegatingWebMvcConfiguration <strong>extends</strong> <strong>WebMvcConfigurationSupport</strong></li></ul></li><li>4、<strong>WebMvcAutoConfiguration</strong> 里面的配置要能生效 必须  @ConditionalOnMissingBean(<strong>WebMvcConfigurationSupport</strong>.<strong>class</strong>)</li><li>5、@EnableWebMvc  导致了 <strong>WebMvcAutoConfiguration  没有生效。</strong></li></ul></li></ul><h3 id="12-2-原理分析套路"><a href="#12-2-原理分析套路" class="headerlink" title="12.2 原理分析套路"></a>12.2 原理分析套路</h3><p><font color=#FF0000 ><strong>场景starter</strong></font> - <strong>xxxxAutoConfiguration - 导入xxx组件 - 绑定xxxProperties</strong> – <font color=#FF0000 ><strong>绑定配置文件项</strong> </font></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java框架 </tag>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot】02-SpringBoot入门</title>
      <link href="/2021/03/12/springboot-02-springboot-ru-men/"/>
      <url>/2021/03/12/springboot-02-springboot-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SpringBoot入门"><a href="#一、SpringBoot入门" class="headerlink" title="一、SpringBoot入门"></a>一、SpringBoot入门</h2><h3 id="1-1-前置条件"><a href="#1-1-前置条件" class="headerlink" title="1.1 前置条件"></a>1.1 前置条件</h3><ul><li>Java 8</li><li>Maven 3.3+</li><li>idea 2019</li></ul><p><strong>Maven设置</strong></p><p>修改maven下的conf\settings.xml文件</p><pre class=" language-xml"><code class="language-xml">1、修改成本地仓库<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>D:/Program Files/Programming tool/Maven3.6/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span>2、修改镜像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 阿里镜像地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span>3、配置jdk 1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 配置JDK --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span></code></pre><h3 id="1-2-入门程序—HelloWord"><a href="#1-2-入门程序—HelloWord" class="headerlink" title="1.2 入门程序—HelloWord"></a>1.2 入门程序—HelloWord</h3><p>需求：浏览器发送/hello请求，响应 Hello，Spring Boot 2 </p><h4 id="1-2-1-创建Maven工程"><a href="#1-2-1-创建Maven工程" class="headerlink" title="1.2.1 创建Maven工程"></a>1.2.1 创建Maven工程</h4><h4 id="1-2-2-引入依赖"><a href="#1-2-2-引入依赖" class="headerlink" title="1.2.2 引入依赖"></a>1.2.2 引入依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h4 id="1-2-3-创建主程序"><a href="#1-2-3-创建主程序" class="headerlink" title="1.2.3 创建主程序"></a>1.2.3 创建主程序</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**   * 主程序类   * @SpringBootApplication：这是一个SpringBoot应用   */</span> <span class="token annotation punctuation">@SpringBootApplication</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h4 id="1-2-4-编写业务"><a href="#1-2-4-编写业务" class="headerlink" title="1.2.4 编写业务"></a>1.2.4 编写业务</h4><p>&emsp;&emsp;@RestController 是将@Controller和@ResponseBody合二为一，该注解告诉Spring将得到的字符串直接返回给调用者。</p><pre class=" language-Java"><code class="language-Java">@RestController public class HelloController {     @RequestMapping("/hello")     public String handle01(){         return "Hello, Spring Boot 2!";     }  }</code></pre><h4 id="1-2-5-测试"><a href="#1-2-5-测试" class="headerlink" title="1.2.5 测试"></a>1.2.5 测试</h4><p>&emsp;&emsp;直接运行main方法，即可。</p><h4 id="1-2-6-简化配置"><a href="#1-2-6-简化配置" class="headerlink" title="1.2.6 简化配置"></a>1.2.6 简化配置</h4><p>&emsp;&emsp;使用application.properties或者是application.yaml文件，进行配置。</p><h4 id="1-2-7-简化部署"><a href="#1-2-7-简化部署" class="headerlink" title="1.2.7 简化部署"></a>1.2.7 简化部署</h4><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 简化部署：项目打成jar包 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><p>&emsp;&emsp;把项目打成jar包，直接在目标服务器执行即可。</p><h2 id="二、了解自动配置原理"><a href="#二、了解自动配置原理" class="headerlink" title="二、了解自动配置原理"></a>二、了解自动配置原理</h2><h3 id="2-1-SpringBoot特点"><a href="#2-1-SpringBoot特点" class="headerlink" title="2.1 SpringBoot特点"></a>2.1 SpringBoot特点</h3><h4 id="2-1-1-依赖管理"><a href="#2-1-1-依赖管理" class="headerlink" title="2.1.1 依赖管理"></a>2.1.1 依赖管理</h4><ul><li>父项目做依赖管理</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>spring-boot-starter-parent的父项目如下几乎声明了所有开发中常用的依赖的版本号,会自动版本仲裁机制<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><ul><li>开发导入starter场景启动器<ul><li>见到很多spring-boot-starter-*： *代表的就是某种场景</li><li>只要引入starter，那么这个场景的所有常规需要的依赖便会自动引入</li><li>SpringBoot多有支持的场景：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a> </li><li>第三方提供的简化开发的场景启动器，格式如下：*-spring-boot-starter</li><li>spring-boot-starter是所有场景启动器的最底层依赖</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li><p>无需关注版本号，自动版本仲裁</p><ul><li>引入依赖默认都可以不写版本 </li><li>引入非版本仲裁的jar，要写版本号。</li></ul></li><li><p>可以修改默认版本号</p><ul><li>第一种方法：查看spring-boot-dependencies里面规定当前依赖的版本 用的 key。</li><li>第二种方法： 在当前项目里面重写配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mysql.version</span><span class="token punctuation">></span></span>5.1.43<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mysql.version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre></li></ul><h4 id="2-1-2-自动配置"><a href="#2-1-2-自动配置" class="headerlink" title="2.1.2 自动配置"></a>2.1.2 自动配置</h4><ul><li><p>自动配好Tomcat</p><ul><li>引入Tomcat依赖。</li><li>配置Tomcat</li></ul></li><li><p>自动配好SpringMVC</p><ul><li>引入SpringMVC全套组件</li><li>自动配好SpringMVC常用组件（功能）</li></ul></li><li><p>自动配好Web常见功能，如：字符编码问题</p><ul><li>SpringBoot帮我们配置好了所有web开发的常见场景</li></ul></li><li><p>默认的包结构</p><ul><li><p>主程序所在包及其下面的所有子包里面的组件都会被默认扫描进来</p></li><li><p>想要改变扫描路径，使用 @SpringBootApplication(scanBasePackages=”com.jie”) 或者是使用 @ComponentScan(“com.jie”)</p></li></ul></li></ul><pre class=" language-java"><code class="language-java">scanBasePackages <span class="token operator">=</span> <span class="token string">"com.jie"</span> <span class="token operator">:</span>设置默认扫描包扫描路径，方便将main程序所在包的外面包的组件全部扫描进来</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token punctuation">(</span>scanBasePackages<span class="token operator">=</span><span class="token string">"com.jie"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//该注解等同于下面的三个注释</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.jie"</span><span class="token punctuation">)</span></code></pre><ul><li>各种配置拥有默认值<ul><li>默认配置最终都是映射到某个类上，如：文件上传–MultipartProperties</li><li>配置文件的值最终会绑定每个类上，这个类会在容器中创建对象</li></ul></li><li><font color=#FF0000 >按需加载</font>所有自动配置项<ul><li>非常多的starter</li><li>引入了哪些场景这个场景的自动配置才会开启</li><li>SpringBoot所有的自动配置功能都在 spring-boot-autoconfigure 包里面</li></ul></li></ul><h3 id="2-2-容器功能"><a href="#2-2-容器功能" class="headerlink" title="2.2 容器功能"></a>2.2 容器功能</h3><h4 id="2-2-1-组件添加"><a href="#2-2-1-组件添加" class="headerlink" title="2.2.1 组件添加"></a>2.2.1 组件添加</h4><h5 id="1、-Configuration"><a href="#1、-Configuration" class="headerlink" title="1、@Configuration"></a>1、@Configuration</h5><ul><li>基本使用</li><li><strong>Full模式与Lite模式</strong><ul><li>示例</li><li>最佳实践<ul><li>配置 类组件之间<font color=#FF0000 >无依赖关系用Lite模式</font>加速容器启动过程，减少判断</li><li>配置类组件之间<font color=#FF0000 >有依赖关系用Full模式</font>，方法会被调用得到之前<font color=#FF0000 >单实例组件</font></li></ul></li></ul></li></ul><p><strong>注意：</strong></p><ol><li>@Configuration：表明是一个配置类，相当于原来的配置文件，配置类本身也是一个组件</li><li>配置类里面使用@Bean标注在方法上给容器注册组件，默认是<font color=#FF0000 >单例</font>的<ol><li>默认以方法名作为组件id（也可以在@Bean中指定名称），返回类型就是组件类型。返回的值就是组件在容器中的实例</li><li>单例模式：外部无论对配置类中的这个组件注册方法调用多少次，获取的都是之前注册容器中的单实例对象</li></ol></li><li>proxyBeanMethods：代理bean的方法<ol><li>Full模式：proxyBeanMethods = true</li><li>Lite模式：proxyBeanMethods = false</li><li>组件依赖</li></ol></li></ol><pre class=" language-java"><code class="language-java">######Configuration使用示例######<span class="token comment" spellcheck="true">/** * 1、配置类里面使用@Bean标注在方法上给容器注册组件，默认也是单例的 * 2、配置类本身也是组件 * 3、proxyBeanMethods：代理bean的方法 *      Full模式：proxyBeanMethods = true *      Lite模式：proxyBeanMethods = false *      组件依赖 *      使用： *          配置类组件之间无依赖关系用Lite模式加速容器启动过程，减少判断 *          配置类组件之间有依赖关系，方法会被调用得到之前单实例组件，用Full模式 */</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// @Configuration：告诉springboot 这是一个配置类，相当于原来的配置文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * /@Bean：给容器添加组件 以方法名作为组件的id，返回类型就是组件类型。返回的值就是组件在容器中的实例     * 单例模式：外部无论对配置类中的这个组件注册方法调用多少次，获取的都是之前注册容器中的单实例对象     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> User <span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// User组件依赖了Pet组件</span>        user<span class="token punctuation">.</span><span class="token function">setPet</span><span class="token punctuation">(</span><span class="token function">tomcatPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 默认以方法名作为组件id，但是也可以在@Bean中指定名称</span>    <span class="token keyword">public</span> Pet <span class="token function">tomcatPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token string">"tomcat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>######<span class="token annotation punctuation">@Configuration</span>测试代码如下######<span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.jie"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、返回IOC容器</span>        ConfigurableApplicationContext run <span class="token operator">=</span> SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、查看容器里面的组件</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3、从容器中获取组件</span>        Pet tom01 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> Pet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pet tom02 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> Pet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"组件:"</span><span class="token operator">+</span><span class="token punctuation">(</span>tom01 <span class="token operator">==</span> tom02<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>        <span class="token comment" spellcheck="true">// 配置类本身也是组件</span>        MyConfig bean <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>MyConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果@Configuration(proxyBeanMethods = true)代理对象调用方法，</span>        <span class="token comment" spellcheck="true">//  SpringBoot总会先检查这个组件是否在容器中，保持组件的单实例</span>        User user <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user1 <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">user01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bean:"</span><span class="token operator">+</span><span class="token punctuation">(</span>user <span class="token operator">==</span> user1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果@Configuration(proxyBeanMethods = true)：true</span>        <span class="token comment" spellcheck="true">// 如果@Configuration(proxyBeanMethods = false)：false</span>        User user01 <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user01"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Pet tom <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span>Pet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户的宠物："</span><span class="token operator">+</span><span class="token punctuation">(</span>user01<span class="token punctuation">.</span><span class="token function">getPet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> tom<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2、-Bean、-Component、-Controller、-Service、-Repository"><a href="#2、-Bean、-Component、-Controller、-Service、-Repository" class="headerlink" title="2、@Bean、@Component、@Controller、@Service、@Repository"></a>2、@Bean、@Component、@Controller、@Service、@Repository</h5><h5 id="3、-ComponentScan、-Import"><a href="#3、-ComponentScan、-Import" class="headerlink" title="3、@ComponentScan、@Import"></a>3、@ComponentScan、@Import</h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 4、@Import({User.class, DBHelper.class}) * 给容器中自动创建出这两个类型的组件、默认组件的名字就是全类名 */</span> <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> DBHelper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//告诉SpringBoot这是一个配置类 == 配置文件 </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h5 id="4、-Conditional"><a href="#4、-Conditional" class="headerlink" title="4、@Conditional"></a>4、@Conditional</h5><p>条件装配：满足Conditional指定的条件，才进行组件注入</p><p><strong>注意：</strong></p><ol><li>使用@ConditionalOnBean需要注意Bean注册的先后顺序，onClass则不用</li><li>相关注解写在类上时，只有当容器中存在了才会加载该内中的容器</li><li>当我们把@Conditional这个注解放到类上面。那么这个配置类也不能注入到容器里面</li></ol><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210313105215.png" style="zoom:80%;" /><h4 id="2-2-2-原生配置文件引入"><a href="#2-2-2-原生配置文件引入" class="headerlink" title="2.2.2 原生配置文件引入"></a>2.2.2 原生配置文件引入</h4><h5 id="1、-ImportResource"><a href="#1、-ImportResource" class="headerlink" title="1、@ImportResource"></a>1、@ImportResource</h5><p>&emsp;&emsp;直接读取原来的xml配置文件</p><pre class=" language-xml"><code class="language-xml">===================beans.xml===================<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> &lt;beans xmlns="http://www.springframework.org/schema/beans"        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"        xmlns:context="http://www.springframework.org/schema/context"        xsi:schemaLocation="http://www.springframework.org/schema/bean                           http://www.springframework.org/schema/beans/spring-beans.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>haha<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.boot.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zhangsan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hehe<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.atguigu.boot.bean.Pet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tomcat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>测试<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>     <span class="token keyword">boolean</span> haha <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"haha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> hehe <span class="token operator">=</span> run<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token string">"hehe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"haha："</span><span class="token operator">+</span>haha<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true </span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hehe："</span><span class="token operator">+</span>hehe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span></code></pre><h4 id="2-2-3-配置绑定"><a href="#2-2-3-配置绑定" class="headerlink" title="2.2.3 配置绑定"></a>2.2.3 配置绑定</h4><p>&emsp;&emsp;原来的方法：使用Java读取到properties文件中的内容，并且把它封装到JavaBean中，以供随时使用</p><h5 id="1、在实体类上加注解-Component-ConfigurationProperties"><a href="#1、在实体类上加注解-Component-ConfigurationProperties" class="headerlink" title="1、在实体类上加注解 @Component + @ConfigurationProperties"></a>1、在实体类上加注解 @Component + @ConfigurationProperties</h5><p><strong>注意：</strong></p><ol><li>@Component：表明将实体类加入到容器中</li><li>@ConfigurationProperties(prefix = “mycar”)：表明在配置文件中，设置该实体类值的前缀是什么</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 只有在容器中的组件，才会拥有SpringBoot提供的强大功能 */</span><span class="token annotation punctuation">@ToString</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"mycar"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String brand<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer price<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2、在config类上加注解-EnableConfigurationProperties-在实体类上加-ConfigurationProperties"><a href="#2、在config类上加注解-EnableConfigurationProperties-在实体类上加-ConfigurationProperties" class="headerlink" title="2、在config类上加注解@EnableConfigurationProperties + 在实体类上加 @ConfigurationProperties"></a>2、在config类上加注解@EnableConfigurationProperties + 在实体类上加 @ConfigurationProperties</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>Car<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1、开启Car配置绑定功能 </span><span class="token comment" spellcheck="true">//2、把这个Car这个组件自动注册到容器中 </span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-自动配置原理入门"><a href="#2-3-自动配置原理入门" class="headerlink" title="2.3 自动配置原理入门"></a>2.3 自动配置原理入门</h3><h4 id="2-3-1-引导加载自动配置类"><a href="#2-3-1-引导加载自动配置类" class="headerlink" title="2.3.1 引导加载自动配置类"></a>2.3.1 引导加载自动配置类</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span> <span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span><span class="token punctuation">{</span><span class="token punctuation">}</span> </code></pre><h5 id="1、-SpringBootConfiguration"><a href="#1、-SpringBootConfiguration" class="headerlink" title="1、@SpringBootConfiguration"></a>1、@SpringBootConfiguration</h5><p>&emsp;&emsp;@Configuration。代表当前是一个配置类</p><h5 id="2、-ComponentScan"><a href="#2、-ComponentScan" class="headerlink" title="2、@ComponentScan"></a>2、@ComponentScan</h5><p>&emsp;&emsp;指定扫描哪些，Spring注解；</p><h5 id="3、-EnableAutoConfiguration"><a href="#3、-EnableAutoConfiguration" class="headerlink" title="3、@EnableAutoConfiguration"></a>3、@EnableAutoConfiguration</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigurationPackage</span> <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>(1) @AutoConfigurationPackage </p><p>&emsp;&emsp;自动配置包，指定了默认的包规则</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationPackages<span class="token punctuation">.</span>Registrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//给容器中导入一个组件 </span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">AutoConfigurationPackage</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//利用Registrar给容器中导入一系列组件 </span><span class="token comment" spellcheck="true">//将指定的一个包下的所有组件导入进来？MainApplication 所在包下。</span></code></pre><p>(2) @Import(AutoConfigurationImportSelector.class)</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span>、利用<span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>给容器中批量导入一些组件 <span class="token number">2</span>、调用List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span>获取到所有需要导入到容器中的配置类 <span class="token number">3</span>、利用工厂加载 Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> <span class="token function">loadSpringFactories</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ClassLoader classLoader<span class="token punctuation">)</span>；得到所有的组件 <span class="token number">4</span>、从META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factories位置来加载一个文件。     默认扫描我们当前系统里面所有META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factories位置的文件     spring<span class="token operator">-</span>boot<span class="token operator">-</span>autoconfigure<span class="token operator">-</span><span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">.</span>RELEASE<span class="token punctuation">.</span>jar包里面也有META<span class="token operator">-</span>INF<span class="token operator">/</span>spring<span class="token punctuation">.</span>factories </code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210313143555.png" alt=""></p><p>&emsp;&emsp;文件里面写死了spring-boot一启动就要给容器中加载的所有配置类 ，总共有127个（后续版本有可能改变）。</p><h4 id="2-3-2-按需开启自动配置项"><a href="#2-3-2-按需开启自动配置项" class="headerlink" title="2.3.2 按需开启自动配置项"></a>2.3.2 按需开启自动配置项</h4><p>&emsp;&emsp;虽然我们127个场景的所有自动配置启动的时候默认全部加载。xxxxAutoConfiguration ，但是按照<font color=#0000FF >条件装配规则（@Conditional）</font>，最终会按需配置。</p><h4 id="2-3-3-修改默认配置"><a href="#2-3-3-修改默认配置" class="headerlink" title="2.3.3 修改默认配置"></a>2.3.3 修改默认配置</h4><p>&emsp;&emsp;SpringBoot默认会在底层配好所有的组件。但是如果用户自己配置了以用户的优先</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span> <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>MultipartResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//容器中有这个类型组件 </span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span>MULTIPART_RESOLVER_BEAN_NAME<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//容器中没有这个名字 multipartResolve</span><span class="token keyword">public</span> MultipartResolver <span class="token function">multipartResolver</span><span class="token punctuation">(</span>MultipartResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//给@Bean标注的方法传入了对象参数，这个参数的值就会从容器中找。 </span>    <span class="token comment" spellcheck="true">//SpringMVC multipartResolver。防止有些用户配置的文件上传解析器名称不符合规范，通过该方法统一改成默认名称。</span>    <span class="token comment" spellcheck="true">// Detect if the user has created a MultipartResolver but named it incorrectly </span>    <span class="token keyword">return</span> resolver<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h4 id="2-3-4-总结"><a href="#2-3-4-总结" class="headerlink" title="2.3.4 总结"></a>2.3.4 总结</h4><ol><li>SpringBoot先加载所有的自动配置类  xxxxxAutoConfiguration</li><li>生效的配置类就会给容器中装配很多组件，只要容器中有这些组件，相当于这些功能就有了</li><li>每个自动配置类按照条件进行生效，默认都会绑定配置文件指定的值。xxxxProperties里面拿。xxxProperties和配置文件进行了绑定</li><li>定制化配置<ul><li>用户直接自己@Bean替换底层的组件</li><li>用户去看这个组件是获取的配置文件什么值就去修改。</li></ul></li></ol><p><font color=#FF0000 ><strong>xxxxxAutoConfiguration —&gt; 组件  —&gt; xxxxProperties里面拿值  —-&gt; application.properties</strong></font></p><h2 id="三、开发小技巧"><a href="#三、开发小技巧" class="headerlink" title="三、开发小技巧"></a>三、开发小技巧</h2><h3 id="3-1-Lombok"><a href="#3-1-Lombok" class="headerlink" title="3.1 Lombok"></a>3.1 Lombok</h3><p>简化JavaBean开发。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 简化JavaBean开发 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>简化JavaBean开发<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment" spellcheck="true">/** * 用户 * 使用lombok简化JavaBean开发，使用注解方式开发 */</span><span class="token annotation punctuation">@Data</span>   <span class="token comment" spellcheck="true">// 生成get/set方法</span><span class="token annotation punctuation">@ToString</span>   <span class="token comment" spellcheck="true">// 生成toString方法</span><span class="token annotation punctuation">@EqualsAndHashCode</span>  <span class="token comment" spellcheck="true">// 生成hashCode</span><span class="token annotation punctuation">@NoArgsConstructor</span>  <span class="token comment" spellcheck="true">// 生成无参构造器</span><span class="token comment" spellcheck="true">//@AllArgsConstructor     // 生成全参构造器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Pet pet<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 因为该构造器中没有包含全部参数，所以需要自定义生成</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>简化日志开发<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>     <span class="token annotation punctuation">@Slf4j</span>     <span class="token annotation punctuation">@RestController</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>         <span class="token keyword">public</span> String <span class="token function">handle01</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>             log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求进来了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token string">"Hello, Spring Boot 2!"</span><span class="token operator">+</span><span class="token string">"你好："</span><span class="token operator">+</span>name<span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><h3 id="3-2-dev-tools"><a href="#3-2-dev-tools" class="headerlink" title="3.2 dev-tools"></a>3.2 dev-tools</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 热部署 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>&emsp;&emsp;项目或者页面修改以后：Ctrl+F9，进行重新编译</p><h3 id="3-3-Spring-Initailizr（项目初始化向导）"><a href="#3-3-Spring-Initailizr（项目初始化向导）" class="headerlink" title="3.3 Spring Initailizr（项目初始化向导）"></a>3.3 Spring Initailizr（项目初始化向导）</h3><h4 id="3-3-1-选择我们需要的开发场景"><a href="#3-3-1-选择我们需要的开发场景" class="headerlink" title="3.3.1 选择我们需要的开发场景"></a>3.3.1 选择我们需要的开发场景</h4><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210313145734.png" alt=""></p><h4 id="3-3-2-自动依赖引入"><a href="#3-3-2-自动依赖引入" class="headerlink" title="3.3.2 自动依赖引入"></a>3.3.2 自动依赖引入</h4><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210313145813.png" alt=""></p><h4 id="3-3-3-自动创建项目结构"><a href="#3-3-3-自动创建项目结构" class="headerlink" title="3.3.3 自动创建项目结构"></a>3.3.3 自动创建项目结构</h4><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210313145850.png" alt=""></p><h4 id="3-3-4-自动编写好主配置类"><a href="#3-3-4-自动编写好主配置类" class="headerlink" title="3.3.4 自动编写好主配置类"></a>3.3.4 自动编写好主配置类</h4><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210313145923.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot】01-SpringBoot简介</title>
      <link href="/2021/03/12/springboot-01-springboot-jian-jie/"/>
      <url>/2021/03/12/springboot-01-springboot-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring的生态"><a href="#一、Spring的生态" class="headerlink" title="一、Spring的生态"></a>一、Spring的生态</h2><p>&emsp;&emsp;<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noopener">https://spring.io/projects/spring-boot</a></p><p>&emsp;&emsp;Spring生态涵盖了：</p><p>&emsp;&emsp;1、web开发</p><p>&emsp;&emsp;2、数据访问</p><p>&emsp;&emsp;3、安全控制</p><p>&emsp;&emsp;4、分布式</p><p>&emsp;&emsp;5、消息服务</p><p>&emsp;&emsp;6、移动开发</p><p>&emsp;&emsp;7、批处理</p><p>&emsp;&emsp;……</p><h2 id="二、Spring5重大升级"><a href="#二、Spring5重大升级" class="headerlink" title="二、Spring5重大升级"></a>二、Spring5重大升级</h2><h3 id="2-1-响应式编程"><a href="#2-1-响应式编程" class="headerlink" title="2.1 响应式编程"></a>2.1 响应式编程</h3><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/image-20210312204934170.png" alt=""></p><h3 id="2-2-内部源码设计"><a href="#2-2-内部源码设计" class="headerlink" title="2.2 内部源码设计"></a>2.2 内部源码设计</h3><p>&emsp;&emsp;基于Java8的一些新特性，如：接口默认实现。重新设计源码架构。</p><h2 id="三、SpringBoot"><a href="#三、SpringBoot" class="headerlink" title="三、SpringBoot"></a>三、SpringBoot</h2><p>&emsp;&emsp;SpringBoot能快速创建出生产级别的Spring应用。</p><h3 id="3-1-SpringBoot优点"><a href="#3-1-SpringBoot优点" class="headerlink" title="3.1 SpringBoot优点"></a>3.1 SpringBoot优点</h3><ul><li>创建独立Spring应用</li><li>内嵌web服务器</li><li>自动starter依赖，简化构建配置</li><li>自动配置Spring以及第三方功能</li><li>提供生产级别的监控、健康检查及外部化配置</li><li>无代码生成、无需编写XML</li></ul><p>&emsp;&emsp;SpringBoot是整合Spring技术栈的一站式框架。<br>&emsp;&emsp;SpringBoot是简化Spring技术栈的快速开发脚手架。</p><h2 id="四、时代背景"><a href="#四、时代背景" class="headerlink" title="四、时代背景"></a>四、时代背景</h2><h3 id="4-1-微服务"><a href="#4-1-微服务" class="headerlink" title="4.1 微服务"></a>4.1 微服务</h3><ul><li>微服务是一种架构风格 </li><li>一个应用拆分为一组小型服务 </li><li>每个服务运行在自己的进程内，也就是可独立部署和升级 </li><li>服务之间使用轻量级HTTP交互 </li><li>服务围绕业务功能拆分 </li><li>可以由全自动部署机制独立部署 </li><li>去中心化，服务自治。服务可以使用不同的语言、不同的存储技术</li></ul><h3 id="4-2-分布式"><a href="#4-2-分布式" class="headerlink" title="4.2 分布式"></a>4.2 分布式</h3><p><strong>1、分布式的困难</strong></p><ul><li>远程调用</li><li>服务发现</li><li>负载均衡</li><li>服务容错</li><li>配置管理</li><li>服务监控</li><li>链路追踪</li><li>日志管理</li><li>任务调度</li><li>……</li></ul><p><strong>2、分布式的解决</strong></p><ul><li>SpringBoot + SpringCloud</li></ul><h3 id="4-3-云原生"><a href="#4-3-云原生" class="headerlink" title="4.3 云原生"></a>4.3 云原生</h3><p><strong>上云的困难</strong></p><ul><li>服务自愈</li><li>弹性伸缩</li><li>服务隔离</li><li>自动化部署</li><li>灰度发布</li><li>流量治理</li><li>……</li></ul><h2 id="五、如何学习SpringBoot"><a href="#五、如何学习SpringBoot" class="headerlink" title="五、如何学习SpringBoot"></a>五、如何学习SpringBoot</h2><p><strong>1、官网文档架构</strong></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210312210711.png" alt=""></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210312210735.png" alt=""></p><p><strong>2、查看版本新特性</strong></p><p>&emsp;&emsp;<a href="https://github.com/spring-projects/spring-boot/wiki#release-notes" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/wiki#release-notes</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Java框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-递归】递归</title>
      <link href="/2020/07/26/shu-ju-jie-gou-di-gui-di-gui/"/>
      <url>/2020/07/26/shu-ju-jie-gou-di-gui-di-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="一、递归的解题模板"><a href="#一、递归的解题模板" class="headerlink" title="一、递归的解题模板"></a>一、递归的解题模板</h2><h3 id="1-1-解题步骤"><a href="#1-1-解题步骤" class="headerlink" title="1.1 解题步骤"></a>1.1 解题步骤</h3><ol><li>判断当前情况是否非法，如果非法就立即返回，这一步也被称为完整性检查（Sanity Check）。例如，看看当前处理的情况是否越界，是否出现了不满足条件的情况。通常，这一部分代码都是写在最前面的。</li><li>判断是否满足结束递归的条件。在这一步当中，处理的基本上都是一些推导过程当中所定义的初始情况。</li><li>将问题的规模缩小，递归调用。在归并排序和快速排序中，我们将问题的规模缩小了一半，而在汉诺塔和解码的例子中，我们将问题的规模缩小了一个。</li><li>利用在小规模问题中的答案，结合当前的数据进行整合，得出最终的答案。</li></ol><h3 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h3><pre class=" language-java"><code class="language-java">function <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一步：判断输入或者状态是否非法？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token operator">/</span>state is invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第二步：判读递归是否应当结束?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>match condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> some value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步：缩小问题规模</span>    result1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>    result2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 第四步: 整合结果</span>    <span class="token keyword">return</span> <span class="token function">combine</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-递归复杂度分析"><a href="#1-3-递归复杂度分析" class="headerlink" title="1.3 递归复杂度分析"></a>1.3 递归复杂度分析</h3><p>&emsp;&emsp;分析递归算法推荐两种方法：迭代法和公式法</p><ol><li><p><strong>迭代法</strong></p><p>&emsp;&emsp;假设这个递归函数的运行时间是 T(n)。两次调用递归函数，每次都使问题的规模减少 1 个，得到两倍的 T(n-1)。因此得出：T(n) = 1 + 2×T(n - 1) + 1，即T(n) = 2×T(n - 1) + O(1)。用迭代法将 T(n) 进行展开。</p><img src="../images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%80%92%E5%BD%92%E3%80%91%E9%80%92%E5%BD%92/image-20200726171421540.png" style="zoom: 67%;" /></li></ol><ol start="2"><li><strong>公式法</strong></li></ol><p>&emsp;&emsp;当递归函数的时间执行函数满足如下的关系式时，我们可以利用公式法：T(n) = a×T(n/b) + f(n)。</p><p>&emsp;&emsp;<font color=#FF0000 >其中，f(n) 是每次递归完毕之后额外的计算执行时间。例如，在归并排序中，每次递归处理完两边的数组后，我们需要执行合并的操作，那么这个操作的执行时间就是 f(n)。</font></p><img src="../images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%80%92%E5%BD%92%E3%80%91%E9%80%92%E5%BD%92/image-20200726171958756.png" alt="image-20200726171958756" style="zoom:67%;" /><h2 id="二、回溯的解题模板"><a href="#二、回溯的解题模板" class="headerlink" title="二、回溯的解题模板"></a>二、回溯的解题模板</h2><h3 id="2-1-解题步骤"><a href="#2-1-解题步骤" class="headerlink" title="2.1 解题步骤"></a>2.1 解题步骤</h3><ol><li>判断当前情况是否非法，如果非法就立即返回；</li><li>当前情况是否已经满足递归结束条件，如果是就将当前结果保存起来并返回；</li><li>当前情况下，遍历所有可能出现的情况并进行下一步的尝试；</li><li>递归完毕后，立即回溯，回溯的方法就是取消前一步进行的尝试。</li></ol><h3 id="2-2-代码模板"><a href="#2-2-代码模板" class="headerlink" title="2.2 代码模板"></a>2.2 代码模板</h3><pre class=" language-java"><code class="language-java">function <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一步：判断输入或者状态是否非法？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token operator">/</span>state is invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第二步：判读递归是否应当结束?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>match condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> some value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历所有可能出现的情况</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>all possible cases<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第三步: 尝试下一步的可能性</span>        solution<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">case</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 递归</span>        result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 第四步：回溯到上一步</span>        solution<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">case</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-例题分析"><a href="#2-3-例题分析" class="headerlink" title="2.3 例题分析"></a>2.3 例题分析</h3><p>&emsp;&emsp;LeetCode 第 39 题：给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><ul><li>所有数字（包括 target）都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p>&emsp;&emsp;<strong>回溯法思路</strong></p><ol><li>从一个空的集合开始，小心翼翼地往里面添加元素。</li><li>每次添加，检查一下当前的总和是否等于给定的目标。</li><li>如果总和已经超出了目标，说明没有必要再尝试其他的元素了，返回并尝试其他的元素；</li><li>如果总和等于目标，就把当前的组合添加到结果当中，表明我们找到了一种满足要求的组合，同时返回，并试图寻找其他的集合。</li></ol><p>&emsp;&emsp;<strong>代码实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results<span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> results <span class="token operator">-</span> 换另外一种颜色高亮<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> results<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> backtracking <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> solution<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        solution<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> solution<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>        solution<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;在主函数里：</p><ol><li>定义一个 results 数组用来保存最终的结果；</li><li>调用函数 backtracking，并将初始的情况以及 results 传递进去，这里的初始情况就是从第一个元素开始尝试，而且初始的子集为空。</li></ol><p>&emsp;&emsp;在 backtracking 函数里：</p><ol><li>检查当前的元素总和是否已经超出了目标给定的值，每添加进一个新的元素时，就将它从目标总和中减去；</li><li>如果总和已经超出了目标给定值，就立即返回，去尝试其他的数值；<br> 如果总和刚好等于目标值，就把当前的子集添加到结果中。</li></ol><p>&emsp;&emsp;在循环体内：</p><ol><li>每次添加了一个新的元素，立即递归调用 backtracking，看是否找到了合适的子集</li><li>递归完毕后，要把上次尝试的元素从子集里删除，这是最重要的。</li></ol><p>&emsp;&emsp;以上，就完成了回溯。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 递归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门</title>
      <link href="/2020/05/07/pa-chong-ru-men/"/>
      <url>/2020/05/07/pa-chong-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="一、爬虫的基本套路"><a href="#一、爬虫的基本套路" class="headerlink" title="一、爬虫的基本套路"></a>一、爬虫的基本套路</h2><p>&emsp;&emsp;1.打开资源</p><p>&emsp;&emsp;2.定位资源</p><p>&emsp;&emsp;3.解析资源</p><p>&emsp;&emsp;4.下载资源</p><h3 id="1-1-打开目标网址"><a href="#1-1-打开目标网址" class="headerlink" title="1.1 打开目标网址"></a>1.1 打开目标网址</h3><p>&emsp;&emsp;在python中，可以使用 <strong>requests</strong> 这一工具包来发送HTTP请求。为了了解程序所“看到” 页面是什么样子的，我们需要把程序所得到HTML文件保存到本地，然后再用浏览器打开，就能和程序感同身受了。从而达到“人机合一”的境界。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印请求结果的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印请求到的网页源码</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>&emsp;&emsp;代码解析：</p><p>&emsp;&emsp;第3行：使用<code>requests</code>类库，以<code>get</code>的方式请求网址，并将服务器返回的结果封装成一个对象，用变量<code>response</code>来接收它。</p><p>&emsp;&emsp;第4行：一般可以根据状态码来判断是否请求成功，正常的状态码是200，异常状态码就很多了，比如404（找不到网页）、301（重定向）等。</p><p>&emsp;&emsp;第5行：打印网页的源码。注意，只是源码。不像是浏览器，在获取到源码之后，还会进一步地取请求源码中引用的图片等信息，如果有JS，浏览器还会执行JS，对页面显示的内容进行修改。使用requests进行请求，我们能够直接获取到的，只有最初始的网页源码。也正是因为这样，不加载图片、不执行JS等等，爬虫请求的速度会非常快。</p><p>&emsp;&emsp;在浏览器打开result.html是这样子的</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OThjMWJkOTg3MQ.jpg" alt=""></p><p>&emsp;&emsp;这怎么和在浏览器中看到的不一样呢？</p><p>&emsp;&emsp;这个时候我就要亮出一件绝世宝贝————Chrome调试台（按F12）来给您分析一波了。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OTg0NGM5YWNmYg.jpg" alt=""></p><p>&emsp;&emsp;其实我们在浏览器中看到的页面并不仅仅是HTML页面，而是css、js、html以及各种媒体资源综合在一起并有浏览器最终渲染而出页面，红框的部分，标出了在这个过程中所加载的各个资源。</p><h3 id="1-2-找到目标资源"><a href="#1-2-找到目标资源" class="headerlink" title="1.2 找到目标资源"></a>1.2 找到目标资源</h3><p>&emsp;&emsp;写过前端页面的朋友都知道CSS样式用过各种选择器来绑定到对应的节点上，那么我们也可以通过CSS的选择器来选中我们想要的元素，从而提取信息。Chrome中已经准备了CSS选择器神器，可以生成我们想要元素的选择器。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OThlMTA1YmZhOQ.jpg" alt="复制css选择器"></p><h3 id="1-3-解析页面"><a href="#1-3-解析页面" class="headerlink" title="1.3 解析页面"></a>1.3 解析页面</h3><p>&emsp;&emsp;这个时候要介绍页面解析神器<strong>pyquery</strong>，这个工具库可以通过我们所复制的CSS选择器，在 HTML 页面中查找对应元素，并且能很便捷地提取各种属性。</p><p>&emsp;&emsp;将代码改成如下这样：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqurl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始解析</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把复制的选择器粘贴进去</span>    <span class="token comment" spellcheck="true"># 选择对应的节点</span>    imgElement <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'body > div:nth-child(5) > div > div > div:nth-child(2) > ul > li:nth-child(3) > a > img'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提取属性，获取图片链接</span>    imgSrc <span class="token operator">=</span> imgElement<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将图片链接输出在屏幕上</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span></code></pre><h3 id="1-4-存储目标"><a href="#1-4-存储目标" class="headerlink" title="1.4 存储目标"></a>1.4 存储目标</h3><p>&emsp;&emsp;下载图片的过程其实和抓取HTML页面的流程是一样的，也是利用 <strong>requests</strong> 发送请求从而获取到数据流再保存到本地。</p><pre class=" language-Python"><code class="language-Python">import requestsfrom pyquery import PyQuery as pqurl = "https://www.nanrentu.cc/sgtp/"response = requests.get(url)if response.status_code == 200:    with open("result.html",'w',encoding="utf-8") as f:        f.write(response.text)    doc = pq(response.text)    imgElement = doc('body > div:nth-child(5) > div > div > div:nth-child(2) > ul > li:nth-child(3) > a > img')    imgSrc = imgElement.attr('src')    print(imgSrc)    # 下载图片    imgResponse = requests.get(imgSrc)    if imgResponse.status_code == 200:        # 填写文件路径 以二进制的形式写入文件        with open('./images/boy.jpg', 'wb') as f:            f.write(imgResponse.content)            f.close()</code></pre><h2 id="二、爬虫升级"><a href="#二、爬虫升级" class="headerlink" title="二、爬虫升级"></a>二、爬虫升级</h2><p>&emsp;&emsp;通过上述步骤我们只能获取到一张图片，那接下来，我们就<font color=#FF0000 >升级一波选择器</font>，将图片全部下载下来。</p><h3 id="2-1-重构代码"><a href="#2-1-重构代码" class="headerlink" title="2.1 重构代码"></a>2.1 重构代码</h3><p>&emsp;&emsp;为了以后写代码方便，要先进行一个简单的重构，让代码条理更清晰。</p><p>&emsp;&emsp;&emsp;1.增加入口函数</p><p>&emsp;&emsp;&emsp;2.封装对于图片的操作</p><p>&emsp;&emsp;重构后的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">def</span> <span class="token function">saveImage</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgResponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>    fileName <span class="token operator">=</span> <span class="token string">"./images/%s.jpg"</span> <span class="token operator">%</span> name    <span class="token keyword">if</span> imgResponse<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imgResponse<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseUrl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        imgElement <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'body > div:nth-child(5) > div > div > div:nth-child(2) > ul > li:nth-child(3) > a > img'</span><span class="token punctuation">)</span>        imgSrc <span class="token operator">=</span> imgElement<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>        saveImage<span class="token punctuation">(</span>imgSrc<span class="token punctuation">,</span><span class="token string">'boy'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-2-升级选择器"><a href="#2-2-升级选择器" class="headerlink" title="2.2 升级选择器"></a>2.2 升级选择器</h3><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OTk2NjY2MzAwZg.jpg" alt=""></p><p>&emsp;&emsp;多拿着鼠标点点这个调试台，一层层地看这个HTML文件的元素层级，找到其中相同重复的地方，这就是我们的突破口所在。</p><p>&emsp;&emsp;我们可以看出图片都在一个类名为 h-piclist 的 <ul> 标签中，那么我们可写出以下的选择器 <font color=#FF0000 ><code>.h-piclist &gt; li &gt; a &gt; img</code></font>。这样就选中了这一页所有的图片元素。接着用一个 for 循环遍历就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token comment" spellcheck="true"># 引入UUID为图片命名</span><span class="token keyword">import</span> uuid<span class="token keyword">def</span> <span class="token function">saveImage</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgResponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>    fileName <span class="token operator">=</span> <span class="token string">"./images/%s.jpg"</span> <span class="token operator">%</span> name    <span class="token keyword">if</span> imgResponse<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imgResponse<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseUrl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 选则这一页中所有的目标图片元素</span>        imgElements <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.h-piclist > li > a > img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 遍历这些图片元素</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> imgElements<span class="token punctuation">:</span>            imgSrc <span class="token operator">=</span> i<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>            saveImage<span class="token punctuation">(</span>imgSrc<span class="token punctuation">,</span>uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hex<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="三、爬虫伪装"><a href="#三、爬虫伪装" class="headerlink" title="三、爬虫伪装"></a>三、爬虫伪装</h2><p>&emsp;&emsp;爬虫的伪装，目的是为了让对方网站更加确信来访者不是爬虫程序，而是一个活生生的人。人们通过操控浏览器来访问网站，那么爬虫程序只需要模仿浏览器就可以了。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100548544.png" alt=""></p><p>&emsp;&emsp;打开Chrome并打开调试台，切换到NetWork选项卡，此时访问 <a href="https://www.nanrentu.cc/sgtp/，" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/，</a> 这是时候会看到调试台里出现了很多链接信息，这么多链接到底哪个是我们所需要的呢？回想一下上一篇内容，首先是要获得HTML文档，再从此文档中提取出图片的链接，所以目标有了，就是找到浏览器获取到这个HTML文档的那个链接。</p><p>&emsp;&emsp;Chrome知道这么多链接信息肯定会让开发者陷入茫然，所以给链接进行了归类，点击上方Doc分类，再点击那唯一的一条链接，就会看到获取此HTML文档链接的详细信息了。此时我们关注主要Request Headers 这个里面的内容。浏览器通过http协议与服务器交互获取信息，爬虫是通过模仿浏览器发出http协议获取信息，其中最重要的一个模仿点就是Request Headers。</p><h3 id="3-1-http协议里面的“瓶瓶罐罐”"><a href="#3-1-http协议里面的“瓶瓶罐罐”" class="headerlink" title="3.1 http协议里面的“瓶瓶罐罐”"></a>3.1 http协议里面的“瓶瓶罐罐”</h3><pre class=" language-html"><code class="language-html">:authority: www.nanrentu.cc:method: GET   // 自定义请求头 请求方法:path: /sgtp/  // 自定义请求头 请求路径:scheme: https // 自定义请求头 请求方式// 所接受的内容格式accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9// 所接受的编码方式accept-encoding: gzip, deflate, br// 所接受的语言accept-language: zh-CN,zh;q=0.9// 缓存控制：告诉服务器客户端希望得到一个最新的资源cache-control: max-age=0cookie: UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661; CNZZDATA1274895726=1196969733-1583323670-%7C1583752625; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583756721sec-fetch-dest: documentsec-fetch-mode: navigatesec-fetch-site: nonesec-fetch-user: ?1// 屏蔽HTTPS页面出现HTTP请求警报upgrade-insecure-requests: 1user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</code></pre><p>&emsp;&emsp;这么多的信息不用都给爬虫加上，因为这网站的防爬措施等级不高，暂时只要关键的两个就可以了。</p><ul><li><font color=#FF0000 >cookie</font>： 这是存储在浏览器里面一段文本，有时包含了验证信息和一些特殊的请求信息</li><li><font color=#FF0000 >user-agent</font>：用于标识此请求是由什么工具所发出的</li></ul><pre class=" language-Python"><code class="language-Python"># 建立一个名叫headers的字典headers = {    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',    'cookie': 'UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; CNZZDATA1274895726=1196969733-1583323670-%7C1583925652; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661,1583926583; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583926583'}# 发送请求时带上请求头response = requests.get(baseUrl,headers=headers)</code></pre><h3 id="3-2-顺藤摸瓜"><a href="#3-2-顺藤摸瓜" class="headerlink" title="3.2 顺藤摸瓜"></a>3.2 顺藤摸瓜</h3><p>&emsp;&emsp;一个网站是由若干个网页组合而成的，网页中充满着各种超链接，从这网页链接到那个网页，如果我们想要更多图片，那就得首先分析出串联起他们那些超链接，然后就可以顺藤摸瓜咯。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100632511.png" alt=""></p><p>&emsp;&emsp;当把鼠标发放到标题上时，标题的颜色发生了变化，证明这一元素为超连接，点击标题浏览器会自动打开一个tab标签页，来显示网页，注意到下方的页码标签，是这些元素串联起了整个图集。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100726373.png" alt=""></p><p>&emsp;&emsp;点击“末页”观察url发生了什么变化</p><p>&emsp;&emsp;末页的url：<a href="https://www.nanrentu.cc/sgtp/36805_7.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805_7.html</a></p><p>&emsp;&emsp;首页的url：<a href="https://www.nanrentu.cc/sgtp/36805.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805.html</a></p><h4 id="3-2-1-提取标题链接"><a href="#3-2-1-提取标题链接" class="headerlink" title="3.2.1 提取标题链接"></a>3.2.1 提取标题链接</h4><p>&emsp;&emsp;打开调试台切换到Elements选项卡就能开始探索提取了。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316101245659.png" alt="提取标题链接"></p><h4 id="3-2-2-提取末页链接，得到组图页数"><a href="#3-2-2-提取末页链接，得到组图页数" class="headerlink" title="3.2.2 提取末页链接，得到组图页数"></a>3.2.2 提取末页链接，得到组图页数</h4><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100817850.png" alt=""></p><p>&emsp;&emsp;通过观察HTML元素结构，可发现包含末页的 <li> 标签为其父元素<ul>的倒数第二个子元素，所以可得出以下的css选择器</p><p>&emsp;&emsp;<font color=#FF0000 >.page &gt; ul &gt; li:nth-last-child(2) &gt; a</font></p><h4 id="3-2-3-根据首尾链接构造URL"><a href="#3-2-3-根据首尾链接构造URL" class="headerlink" title="3.2.3 根据首尾链接构造URL"></a>3.2.3 根据首尾链接构造URL</h4><p>&emsp;&emsp;为了构造url更加方便，我们可以把首页 <a href="https://www.nanrentu.cc/sgtp/36805.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805.html</a> 变为 <a href="https://www.nanrentu.cc/sgtp/36805_1.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805_1.html</a>, 在浏览器中打开带有后缀的这个网址，依然能够成功访问到首页，不要问我为什么？这可能就是程序员之间的一种默契吧~</p><h4 id="3-2-4-存储图片，摸瓜成功"><a href="#3-2-4-存储图片，摸瓜成功" class="headerlink" title="3.2.4 存储图片，摸瓜成功"></a>3.2.4 存储图片，摸瓜成功</h4><pre class=" language-Python"><code class="language-Python">import requestsfrom pyquery import PyQuery as pqimport uuidheaders = {    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',    'cookie': 'UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; CNZZDATA1274895726=1196969733-1583323670-%7C1583925652; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661,1583926583; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583926583'}def saveImage(imgUrl,name):    imgResponse = requests.get(imgUrl)    fileName = "./images/%s.jpg" % name    if imgResponse.status_code == 200:        with open(fileName, 'wb') as f:            f.write(imgResponse.content)            f.close()def getPic(urlArray):    for url in urlArray:        res = requests.get(url,headers=headers)        if res.status_code == 200:            doc = pq(res.text)            imgSrc = doc('.info-pic-list > a > img').attr('src')            print(imgSrc)            saveImage(imgSrc,uuid.uuid1().hex)def createUrl(indexUrl,allPage):    baseUrl = indexUrl.split('.html')[0]    urlArray = []    for i in range(1,allPage):        tempUrl = baseUrl+"_"+str(i)+".html"        urlArray.append(tempUrl)    return urlArraydef getBoys(link):    # 摸瓜第1步：获取首页连接    picIndex = link.attr('href')    #  摸瓜第2步：打开首页，提取末页链接，得出组图页数    res = requests.get(picIndex,headers=headers)    print("当前正在抓取的 picIndex: " + picIndex)    if res.status_code == 200:        with open("picIndex.html",'w',encoding="utf-8") as f:            f.write(res.text)        doc = pq(res.text)        lastLink = doc('.page > ul > li:nth-last-child(2) > a').attr('href')        # 字符串分割，得出全部的页数        if(lastLink is None):            return        # 以.html 为分割符进行分割，取结果数组中的第一项        temp = lastLink.split('.html')[0]        # 再以下划线 _ 分割，取结果数组中的第二项,再转为数值型        allPage = int(temp.split('_')[1])        # 摸瓜第3步：根据首尾链接构造url        urlArray = createUrl(picIndex,allPage)        # 摸瓜第4步：存储图片，摸瓜成功        getPic(urlArray)def main():    baseUrl = "https://www.nanrentu.cc/sgtp/"    response = requests.get(baseUrl,headers=headers)    if response.status_code == 200:        with open("index.html",'w',encoding="utf-8") as f:            f.write(response.text)        doc = pq(response.text)        # 得到所有图集的标题连接        titleLinks = doc('.h-piclist > li > a').items()        # 遍历这些连接        for link in titleLinks:            getBoys(link)if __name__ == "__main__":    main()</code></pre><p>&emsp;&emsp;回顾整个爬虫程序，它是连续式流水线作业，每一步之间都是环环相扣，所以在写程序前自己一定要把整个流水线的每个环节都考虑清楚，把它们之间的顺序依赖关系化成一个简易的流程图，对着流程图再写程序就会清晰很多。我们可以把每一个模块都写成一个函数，先对函数做好单元测试，再把这些函数按顺序组合起来就行啦。</p><p>&emsp;&emsp;这个流程图只用单项箭头画出了获取一张图片的全部过程。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzAzLzEyLzhlb2FEQS5wbmc.jpg" alt="爬虫流程"></p><h2 id="四、提高爬虫速率——多线程"><a href="#四、提高爬虫速率——多线程" class="headerlink" title="四、提高爬虫速率——多线程"></a>四、提高爬虫速率——多线程</h2><p>&emsp;&emsp;当然在整个程序当中，不可能一开始就搞个并行执行，串行是并行的基础，它们两者相辅相成。只有当程序出现分支（进入for循环）此时多线程可以派上用场，为每一个分支开启一个线程从而加速程序的执行。</p><p>&emsp;&emsp;对于萌新可以粗暴简单地理解：<font color=#FF0000 >没有for循环，就不用多线程</font>。</p><p>&emsp;&emsp;对于有一定编程经验的同学可以这样理解：<font color=#FF0000 >当程序中出现耗时操作时，要另开一个线程处理此操作。所谓耗时操做比如：文件IO、网络IO……</font>。</p><h3 id="4-1-定义一个线程类"><a href="#4-1-定义一个线程类" class="headerlink" title="4.1 定义一个线程类"></a>4.1 定义一个线程类</h3><p>&emsp;&emsp;Python3中提供了<a href="https://www.runoob.com/python3/python3-multithreading.html" target="_blank" rel="noopener">threading</a>模块用于帮助用户构建多线程程序。我们首先将基于此模块来自定义一个线程类，用于消灭遍历图集时所需要的等待。</p><h4 id="4-1-1-线程ID"><a href="#4-1-1-线程ID" class="headerlink" title="4.1.1 线程ID"></a>4.1.1 线程ID</h4><p>&emsp;&emsp;程序执行时会开启很多个线程，为了后期方便管理这些线程，可以在线程类的构造方法中添加threadID这一参数，为每个线程赋予唯一的ID号。</p><h4 id="4-1-2-所执行目标方法的参数"><a href="#4-1-2-所执行目标方法的参数" class="headerlink" title="4.1.2 所执行目标方法的参数"></a>4.1.2 所执行目标方法的参数</h4><p>&emsp;&emsp;一般来说定义一个线程类主要目的是让此线程去执行一个耗时的方法，所以这个线程类的构造方法中所需要传入所要执行目的方法的参数。比如 handleTitleLinks 这个类主要用来执行getBoys() （参见文末中的完整代码）这一方法。getBoys() 所需一个标题的连接作为参数，所以在handleTitleLinks的构造方法中也需要传入一个链接。</p><h4 id="4-1-3-调用目标方法"><a href="#4-1-3-调用目标方法" class="headerlink" title="4.1.3 调用目标方法"></a>4.1.3 调用目标方法</h4><p>&emsp;&emsp;线程类需要一个run(),在此方法中传入参数，调用所需执行的目标方法即可。</p><pre class=" language-Python"><code class="language-Python">class handleTitleLinks (threading.Thread):    def __init__(self,threadID,link):        threading.Thread.__init__(self)        self.threadID = threadID        self.link = link    def run(self):        print ("start handleTitleLinks：" + self.threadID)        getBoys(self.link)        print ("exit handleTitleLinks：" + self.threadID)</code></pre><h3 id="4-2-实例化线程对象代替目标方法"><a href="#4-2-实例化线程对象代替目标方法" class="headerlink" title="4.2 实例化线程对象代替目标方法"></a>4.2 实例化线程对象代替目标方法</h3><p>&emsp;&emsp;当把线程类定义好之后，找到曾经耗时的目标方法，实例化一个线程对象将其代替即可。</p><pre class=" language-Python"><code class="language-Python">def main():    baseUrl = "https://www.nanrentu.cc/sgtp/"    response = requests.get(baseUrl,headers=headers)    if response.status_code == 200:        with open("index.html",'w',encoding="utf-8") as f:            f.write(response.text)        doc = pq(response.text)        # 得到所有图集的标题连接        titleLinks = doc('.h-piclist > li > a').items()        # 遍历这些连接        for link in titleLinks:            # 替换目标方法，开启线程            handleTitleLinks(uuid.uuid1().hex,link).start()            # getBoys(link)</code></pre><h3 id="4-3-如法炮制"><a href="#4-3-如法炮制" class="headerlink" title="4.3 如法炮制"></a>4.3 如法炮制</h3><p>&emsp;&emsp;我们已经定义了一个线程去处理每个图集，但是在处理每个图集的过程中还会有分支（参见程序并行执行图）去下载图集中的图片。此时需要再定义一个线程用来下载图片，即定义一个线程去替换getImg()。</p><pre class=" language-Python"><code class="language-Python">class handleGetImg (threading.Thread):    def __init__(self,threadID,urlArray):        threading.Thread.__init__(self)        self.threadID = threadID        self.url = url    def run(self):        print ("start handleGetImg：" + self.threadID)        getPic(self.urlArray)        print ("exit handleGetImg：" + self.threadID)</code></pre><h3 id="4-4-完整代码"><a href="#4-4-完整代码" class="headerlink" title="4.4 完整代码"></a>4.4 完整代码</h3><pre class=" language-Python"><code class="language-Python">#!/usr/bin/python3import requestsfrom pyquery import PyQuery as pqimport uuidimport threadingheaders = {    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',    'cookie': 'UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; CNZZDATA1274895726=1196969733-1583323670-%7C1583925652; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661,1583926583; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583926583'}def saveImage(imgUrl,name):    imgResponse = requests.get(imgUrl)    fileName = "./images/%s.jpg" % name    if imgResponse.status_code == 200:        with open(fileName, 'wb') as f:            f.write(imgResponse.content)            f.close()# 根据链接找到图片并下载           def getImg(url):    res = requests.get(url,headers=headers)    if res.status_code == 200:        doc = pq(res.text)        imgSrc = doc('.info-pic-list > a > img').attr('src')        print(imgSrc)        saveImage(imgSrc,uuid.uuid1().hex)# 遍历组图链接def getPic(urlArray):    for url in urlArray:        # 替换方法        handleGetImg(uuid.uuid1().hex,url).start()        # getImg(url)def createUrl(indexUrl,allPage):    baseUrl = indexUrl.split('.html')[0]    urlArray = []    for i in range(1,allPage):        tempUrl = baseUrl+"_"+str(i)+".html"        urlArray.append(tempUrl)    return urlArraydef getBoys(link):    # 摸瓜第1步：获取首页连接    picIndex = link.attr('href')    #  摸瓜第2步：打开首页，提取末页链接，得出组图页数    res = requests.get(picIndex,headers=headers)    print("当前正在抓取的 picIndex: " + picIndex)    if res.status_code == 200:        with open("picIndex.html",'w',encoding="utf-8") as f:            f.write(res.text)        doc = pq(res.text)        lastLink = doc('.page > ul > li:nth-last-child(2) > a').attr('href')        # 字符串分割，得出全部的页数        if(lastLink is None):            return        # 以.html 为分割符进行分割，取结果数组中的第一项        temp = lastLink.split('.html')[0]        # 再以下划线 _ 分割，取结果数组中的第二项,再转为数值型        allPage = int(temp.split('_')[1])        # 摸瓜第3步：根据首尾链接构造url        urlArray = createUrl(picIndex,allPage)        # 摸瓜第4步：存储图片，摸瓜成功        getPic(urlArray)def main():    baseUrl = "https://www.nanrentu.cc/sgtp/"    response = requests.get(baseUrl,headers=headers)    if response.status_code == 200:        with open("index.html",'w',encoding="utf-8") as f:            f.write(response.text)        doc = pq(response.text)        # 得到所有图集的标题连接        titleLinks = doc('.h-piclist > li > a').items()        # 遍历这些连接        for link in titleLinks:            # 替换方法，开启线程            handleTitleLinks(uuid.uuid1().hex,link).start()            # getBoys(link)# 处理组图链接的线程类class handleTitleLinks (threading.Thread):    def __init__(self,threadID,link):        threading.Thread.__init__(self)        self.threadID = threadID        self.link = link    def run(self):        print ("start handleTitleLinks：" + self.threadID)        getBoys(self.link)        print ("exit handleTitleLinks：" + self.threadID)# 下载图片的线程类class handleGetImg (threading.Thread):    def __init__(self,threadID,url):        threading.Thread.__init__(self)        self.threadID = threadID        self.url = url    def run(self):        print ("start handleGetImg：" + self.threadID)        getImg(self.url)        print ("exit handleGetImg：" + self.threadID)if __name__ == "__main__":    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业二】逻辑回归-收入分类</title>
      <link href="/2020/04/22/zuo-ye-er-luo-ji-hui-gui-shou-ru-fen-lei/"/>
      <url>/2020/04/22/zuo-ye-er-luo-ji-hui-gui-shou-ru-fen-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="一、作业要求"><a href="#一、作业要求" class="headerlink" title="一、作业要求"></a>一、作业要求</h2><p>&emsp;&emsp;根据收集来的资料，判断每个人其年收入是否高于50000美元，用<strong>Logistic regression</strong>和<strong>Generative model</strong>两种方法来实现</p><p>&emsp;&emsp;数据下载地址：<a href="https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A" target="_blank" rel="noopener">https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A</a> </p><p>&emsp;&emsp;提取码：vcj8</p><h2 id="二、Logistic-regression实现"><a href="#二、Logistic-regression实现" class="headerlink" title="二、Logistic regression实现"></a>二、<strong>Logistic regression</strong>实现</h2><pre class=" language-Python"><code class="language-Python">import numpy as npimport matplotlib as mplimport matplotlib.pyplot as pltimport pandas as pdnp.random.seed(0)</code></pre><h3 id="2-1-添加路径"><a href="#2-1-添加路径" class="headerlink" title="2.1 添加路径"></a>2.1 添加路径</h3><pre class=" language-python"><code class="language-python">X_train_file <span class="token operator">=</span> <span class="token string">'./data/X_train'</span>Y_train_file <span class="token operator">=</span> <span class="token string">'./data/Y_train'</span>X_test_file <span class="token operator">=</span> <span class="token string">'./data/X_test'</span>output_file <span class="token operator">=</span> <span class="token string">'./output/output_{}.csv'</span>   <span class="token comment" spellcheck="true">#用于测试集的预测输出</span></code></pre><h3 id="2-2-加载数据"><a href="#2-2-加载数据" class="headerlink" title="2.2 加载数据"></a>2.2 加载数据</h3><p>&emsp;&emsp;加载数据,直接导入已经处理好的数据X_train,Y_train,X_test</p><pre class=" language-Python"><code class="language-Python">def _datapreprocess(X_train_file, Y_train_file, X_test_file):    with open(X_train_file) as f:        next(f)        # s.strip(rm) ：删除s字符串中开头、结尾处，位于 rm删除序列的字符        # split ：分割；[1:]是取第1列之后的        X_train_all = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)    with open(Y_train_file) as f:        next(f)        Y_train_all = np.array([line.strip('\n').split(',')[1]  for line in f], dtype=float)    with open(X_test_file) as f:        next(f)        X_test = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)    return X_train_all, Y_train_all, X_test</code></pre><h3 id="2-3-归一化"><a href="#2-3-归一化" class="headerlink" title="2.3 归一化"></a>2.3 归一化</h3><p>&emsp;&emsp;编写一个_normalize()函数对数据进行预处理：归一化，即每个数据特征的均值和标准差进行归一化</p><pre class=" language-Python"><code class="language-Python">def _normalize(X, train=True, specified_column=None, X_mean=None, X_std=None):    # 此函数对 X 的特定列进行归一化    # 均值和方差在处理测试数据时，还会再用    # 参数解析：    #     X：要被处理的数据    #     train：为true时，处理训练数据；为false时，处理测试数据    #     specified_column：被归一化的特定列的索引，若为false，则所有列都被归一化    if specified_column == None:        #为每个数据添加索值        specified_column = np.arange(X.shape[1])    if train:        #求取每个数据的平均值和标准差        X_mean = np.mean(X[:, specified_column], 0).reshape(1,-1)        X_std = np.std(X[:, specified_column], 0).reshape(1,-1)    #归一化数据        X[:, specified_column] = (X[:, specified_column] - X_mean) / (X_std + 1e-8)    #返回归一化后的数据，均值，标准差    return X, X_mean, X_std</code></pre><h3 id="2-4-分割验证集"><a href="#2-4-分割验证集" class="headerlink" title="2.4 分割验证集"></a>2.4 分割验证集</h3><p>&emsp;&emsp;根据valid_ratio来划分训练集和验证集</p><pre class=" language-Python"><code class="language-Python">def _train_valid_split(X, Y, valid_ratio = 0.25):    train_size = int(len(X) * (1 - valid_ratio))    X_train = X[:train_size]    X_valid = X[train_size:]    Y_train = Y[:train_size]    Y_valid = Y[train_size:]    return X_train, X_valid, Y_train, Y_valid</code></pre><h3 id="2-5-打乱数据"><a href="#2-5-打乱数据" class="headerlink" title="2.5 打乱数据"></a>2.5 打乱数据</h3><p>&emsp;&emsp;打乱数据顺序，类似于重新洗牌，进行分批次训练（即每次将一部分数据喂给模型进行训练，计算损失）</p><pre class=" language-Python"><code class="language-Python">#打乱数据顺序，重新为minibatch分配def _shuffle(X, Y):    # 该函数打散两个等长的list/array----- X 和 Y    randomize = np.arange(len(X))  # 返回len(X)的序列    np.random.shuffle(randomize)    X_train = X[randomize]    Y_train = Y[randomize]    return X_train, Y_train</code></pre><h3 id="2-6-激活函数"><a href="#2-6-激活函数" class="headerlink" title="2.6 激活函数"></a>2.6 激活函数</h3><pre class=" language-Python"><code class="language-Python">def _sigmoid(z):    # numpy.clip(a, a_min, a_max, out=None): clip这个函数将将数组中的元素限制在a_min, a_max之间，    # 大于a_max的就使得它等于 a_max，小于a_min,的就使得它等于a_min。    return np.clip(1 / (1.0 + np.exp(-z)), 1e-8, 1-(1e-8)) # 相当于结果是在 0 ~ 1</code></pre><h3 id="2-7-前向传播"><a href="#2-7-前向传播" class="headerlink" title="2.7 前向传播"></a>2.7 前向传播</h3><p>&emsp;&emsp;前向传播然后利用sigmoid激活函数计算激活值</p><pre class=" language-Python"><code class="language-Python">def _f(X, w, b):    # logistic regression    # 参数解析：    #     X：输入数据-------> [batch_size, data_dimension]    #     w: 权重-----------> [data_dimension, ]    #     b: 偏置 ----------> 标量    # 输出：    #     预测概率    output = _sigmoid(np.matmul(X, w) + b) #  np.matmul：两个numpy数组的矩阵相乘    return output</code></pre><p>&emsp;&emsp;<font color=#FF0000 >matmul与dot</font>的差异主要在两个方面：</p><p>&emsp;&emsp;&emsp;（1）不允许乘标量</p><p>&emsp;&emsp;&emsp;（2）stack的矩阵将矩阵按元素对待被一起广播</p><h3 id="2-8-预测"><a href="#2-8-预测" class="headerlink" title="2.8 预测"></a>2.8 预测</h3><pre class=" language-Python"><code class="language-Python">def _predict(X, w, b):    predict = np.round(_f(X, w, b)).astype(np.int)   # round(x) ：返回浮点数x的四舍五入值。    return predict</code></pre><h3 id="2-9-准确度"><a href="#2-9-准确度" class="headerlink" title="2.9 准确度"></a>2.9 准确度</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422212816090.png" alt="acc计算公式"></p><pre class=" language-Python"><code class="language-Python">def _accuracy(Y_pred, Y_label):    acc = 1 - np.mean(np.abs(Y_pred - Y_label))    return acc</code></pre><h3 id="2-10-交叉熵"><a href="#2-10-交叉熵" class="headerlink" title="2.10 交叉熵"></a>2.10 交叉熵</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213215418.png" alt="均方差"></p><p>   &emsp;&emsp;<strong>逻辑回归配合MSE损失函数时，采用梯度下降法进行学习时，会出现模型一开始训练时，学习速率非常慢的情况</strong></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213405553.png" alt="交叉熵-二分类"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213434442.png" alt="交叉熵-多分类"></p><pre class=" language-Python"><code class="language-Python">def _cross_entropy_loss(y_pred, Y_label): # 在计算交叉熵时，后面还要再除个 N     cross_entropy = -np.dot(Y_label, np.log(y_pred)) - np.dot((1 - Y_label), np.log(1 - y_pred))    return cross_entropy</code></pre><h3 id="2-11-计算梯度"><a href="#2-11-计算梯度" class="headerlink" title="2.11 计算梯度"></a>2.11 计算梯度</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213621460.png" alt="梯度更新"></p><pre class=" language-Python"><code class="language-Python">def _gradient(X, Y_label, w, b):    y_pred = _f(X, w, b)    pred_error = Y_label - y_pred    w_grad = -np.sum(pred_error * X.T, 1)  # error与X.T乘完后再加 1    b_grad = -np.sum(pred_error)    return w_grad, b_grad</code></pre><h3 id="2-12-训练"><a href="#2-12-训练" class="headerlink" title="2.12 训练"></a>2.12 训练</h3><p>&emsp;    我们使用小批次梯度下降法来训练。训练资料被分成许多小批次，针封每一个小批次，我们分别计算其梯度以及损失，并根据该批次来更新模型的参数。当一次epoch完成，也就是整个训练集的所有小批次都被使用过一次以后，我们将所有训练资料打散并且重新分成新的小批次，进行下一个epoch，直到事先设定的epochs数量完成为止。</p><p>&emsp;&emsp;针对每个epoch训练的步骤：for epoch in range(epochs)<br>    &emsp;&emsp;&emsp;&emsp;1. 打散：对X_train，Y_train打散<br>    &emsp;&emsp;&emsp;&emsp;2. 分批次训练：for idx in range(int(np.floor(train_size / batch_size)))<br>        &emsp;&emsp;&emsp;&emsp;2.1 取小批次的 X 和 Y<br>        &emsp;&emsp;&emsp;&emsp;2.2 计算小批次的 w 和 b<br>        &emsp;&emsp;&emsp;&emsp;2.3 更新 w 和 b<br>    &emsp;&emsp;&emsp;&emsp;3.计算训练集和验证集的准确率和损失值<br>        &emsp;&emsp;&emsp;&emsp;3.1 计算y_pred(float型) ——&gt; 计算交叉熵时用<br>        &emsp;&emsp;&emsp;&emsp;3.2 计算Y_pred（四舍五入） ——&gt; 计算准确率时用<br>        &emsp;&emsp;&emsp;&emsp;3.3 计算准确率<br>        &emsp;&emsp;&emsp;&emsp;3.4 计算损失值</p><pre class=" language-Python"><code class="language-Python">def train(X_train, Y_train, X_valid, Y_valid, data_dim, train_size, valid_size, epochs, batch_size, lr):    # 将w和b初始化为0    w = np.zeros((data_dim))    #  w.shape -------> (510, )    b = np.zeros((1, ))         #  b.shape -------> (1, )    epochs = epochs    batch_size = batch_size    lr = lr    # 创建列表用来保存训练集和验证集的损失值和准确度    train_loss = []    valid_loss = []    train_acc = []    valid_acc = []    # 用来更新学习率    step = 1    # 训练    for epoch in range(epochs):        # 每个epoch都会重新洗牌        X_train, Y_train = _shuffle(X_train, Y_train)        # 分批次训练        for idx in range(int(np.floor(train_size / batch_size))):            X = X_train[idx*batch_size : (idx + 1)*batch_size]            Y = Y_train[idx*batch_size : (idx + 1)*batch_size]            # 计算梯度值            w_grad, b_grad = _gradient(X, Y, w, b)            # 更新参数w和b            # 学习率随着迭代时间增加而减少            w -= lr / np.sqrt(step) * w_grad            b -= lr / np.sqrt(step) * b_grad            step += 1        # 参数总共更新了max_iter × （train_size/batch_size）次             # 计算训练集的损失值和准确度        y_train_pred = _f(X_train, w, b)        Y_train_pred = np.round(y_train_pred)        train_acc.append(_accuracy(Y_train_pred, Y_train))        train_loss.append(_cross_entropy_loss(y_train_pred, Y_train) / train_size)        # 计算验证集的损失值和准确度        y_valid_pred = _f(X_valid, w, b)        Y_valid_pred = np.round(y_valid_pred)        valid_acc.append(_accuracy(Y_valid_pred, Y_valid))        valid_loss.append(_cross_entropy_loss(y_valid_pred, Y_valid) / valid_size)    return train_acc, train_loss, valid_acc, valid_loss, w, b</code></pre><h3 id="2-13-画损失和准确率曲线"><a href="#2-13-画损失和准确率曲线" class="headerlink" title="2.13 画损失和准确率曲线"></a>2.13 画损失和准确率曲线</h3><pre class=" language-Python"><code class="language-Python">def plot_curve(train_acc, train_loss, valid_acc, valid_loss):    # train_acc, train_loss, valid_acc, valid_loss长度都为epochs    # loss    plt.plot(train_loss)    plt.plot(valid_loss)    plt.title('Loss')    plt.legend(['train', 'valid'])    plt.savefig('./output/loss.png')    plt.show()    # acc    plt.plot(train_acc)    plt.plot(valid_acc)    plt.title('Acc')    plt.legend(['train', 'valid'])    plt.savefig('./output/acc.png')    plt.show()</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422214032989.png" alt="损失和准确率曲线图"></p><h3 id="2-14-预测"><a href="#2-14-预测" class="headerlink" title="2.14 预测"></a>2.14 预测</h3><pre class=" language-Python"><code class="language-Python">def test(X_test, w, b, output_file, X_test_file):    predictions = _predict(X_test, w, b)    with open(output_file.format('logistic'), 'w') as f:        f.write('id,label\n')        for i, label in enumerate(predictions):            f.write('{},{}\n'.format(i, label))    # 打印一下数据前10项特征对应的权重    ind = np.argsort(np.abs(w))[::-1]    with open(X_test_file) as f:        content = f.readline().strip('\n').split(',')    features = np.array(content)    for i in ind[0:10]:        print(features[i], w[i])</code></pre><h3 id="2-15-main-函数"><a href="#2-15-main-函数" class="headerlink" title="2.15 main()函数"></a>2.15 main()函数</h3><pre class=" language-Python"><code class="language-Python">def main():    # 1.添加路径    X_train_file = './data/X_train'    Y_train_file = './data/Y_train'    X_test_file = './data/X_test'    output_file = './output/output_{}.csv'   #用于测试集的预测输出    # 2.加载数据    X_train_all, Y_train_all, X_test = _datapreprocess(X_train_file, Y_train_file, X_test_file)    #print(X_train_all.shape[1], Y_train_all.shape, X_test.shape)    # 3.归一化X_train 和 X_test数据    X_train_all, X_mean, X_std = _normalize(X_train_all, train=True)    X_test, _, _ = _normalize(X_test, train=False, specified_column=None, X_mean=X_mean, X_std=X_std )    # 4.设置训练集-验证集    valid_ratio = 0.1    X_train, X_valid, Y_train, Y_valid = _train_valid_split(X_train_all, Y_train_all, valid_ratio=valid_ratio)    train_size = X_train.shape[0]    valid_size = X_valid.shape[0]    test_size = X_test.shape[0]    data_dim = X_train.shape[1]#     print('Size of training set:{}'.format(train_size))#     print('Size of validation set:{}'.format(valid_size))#     print('Size of testing set:{}'.format(test_size))#     print('Dimension of data:{}'.format(data_dim))    # 5.训练  设置其他超参数（迭代次数，分批次大小，学习率）    epochs = 10    batch_size = 8    lr = 0.2    train_acc, train_loss, valid_acc, valid_loss, w, b = train(X_train,                                                                Y_train,                                                                X_valid,                                                                Y_valid,                                                                data_dim,                                                               train_size,                                                               valid_size,                                                               epochs,                                                                batch_size,                                                                lr)#     print('Training loss:{}'.format(train_loss[-1]))#     print('Validation loss:{}'.format(valid_loss[-1]))#     print('Training accuracy:{}'.format(train_acc[-1]))#     print('Validation accuracy:{}'.format(valid_acc[-1]))    # 6.画准确率曲线    plot_curve(train_acc, train_loss, valid_acc, valid_loss)    # 7.预测    test(X_test, w, b, output_file, X_test_file)if __name__ == '__main__':    main()</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215828322.png" alt="逻辑回归结果"></p><h2 id="三、Generative-model实现"><a href="#三、Generative-model实现" class="headerlink" title="三、Generative model实现"></a>三、<strong>Generative model</strong>实现</h2><p>&emsp;&emsp;生成概率模型其实是先假设数据的概率分布（正太、伯努利、泊松），然后用概率公式去计算x所属于的类型p(C1∣x)</p><p>&emsp;&emsp;一般的，我们假设x的分布为高斯分布（最为常见的概率分布模型），为什么会往往选择高斯分布呢，概率论中的中心极限定理告诉我们答案。</p><p>&emsp;&emsp;一维的概率分布一般是钟形曲线，大家都比较了解，那么高维的分布是（均值为μ,协方差为∑）：</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422214527857.png" alt="高维高斯分布函数"></p><p>&emsp;&emsp;如果假设高斯分布是独立的，则所用方法就是朴素贝叶斯分类。理论细节推导，请参考李宏毅老师的教学：Classification (v3).pdf</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422214747409.png" alt="朴素贝叶斯分类"></p><p>&emsp;&emsp;Generative model方法跟Logistic regression方法类似，不同之处在于Generative model可以直接计算出w和b的最佳解，而Logistic regression是将w和b进行初始化，通过迭代训练来更新w和b。</p><h3 id="3-1-加载数据"><a href="#3-1-加载数据" class="headerlink" title="3.1 加载数据"></a>3.1 加载数据</h3><p>&emsp;&emsp;训练集与测试集的处理方式跟logistic regression一模一样，然而因为generative model有可解析的最佳解，因此不必使用到验证集（valid_ratio = 0）</p><pre class=" language-Python"><code class="language-Python"># 加载数据,我们直接导入已经处理好的数据X_train,Y_train,X_testwith open(X_train_file) as f:    next(f)    # s.strip(rm) ：删除s字符串中开头、结尾处，位于 rm删除序列的字符    # split ：分割；[1:]是取第1列之后的    X_train_all = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)with open(Y_train_file) as f:    next(f)    Y_train_all = np.array([line.strip('\n').split(',')[1]  for line in f], dtype=float)with open(X_test_file) as f:    next(f)    X_test = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)# 归一化数据X_train_all, X_mean, X_std = _normalize(X_train_all, train=True)X_test, _, _ = _normalize(X_test, train=False, specified_column=None, X_mean=X_mean, X_std=X_std )X_train, X_valid, Y_train, Y_valid = _train_valid_split(X_train_all, Y_train_all, valid_ratio=0)train_size = X_train.shape[0]valid_size = X_valid.shape[0]test_size = X_test.shape[0]data_dim = X_train.shape[1]print(X_train_all.shape[1], Y_train_all.shape, X_test.shape)print('Size of training set:{}'.format(train_size))print('Size of validation set:{}'.format(valid_size))print('Size of testing set:{}'.format(test_size))print('Dimension of data:{}'.format(data_dim))</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215003200.png" alt="数据集大小"></p><h3 id="3-2-分别计算两个类别的均值和协方差"><a href="#3-2-分别计算两个类别的均值和协方差" class="headerlink" title="3.2 分别计算两个类别的均值和协方差"></a>3.2 分别计算两个类别的均值和协方差</h3><p>&emsp;&emsp;我们假设数据点服从高维高斯分布，那么，我们需要找到这个高斯分布的函数，也就是为μ,和协方差∑。<br> &emsp;&emsp;这个函数满足，它的所有数据点的生成概率是最大的，假设有79个数据点，他的高斯函数的求法</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215158987.png" alt="求高斯函数的均值和协方差"></p><pre class=" language-Python"><code class="language-Python"># 计算均值X_train_0 = np.array([x for x, y in zip(X_train_all, Y_train_all) if y == 0])X_train_1 = np.array([x for x, y in zip(X_train_all, Y_train_all) if y == 1])print('X_train_0.shape:', X_train_0.shape, '\n', 'X_train_1.shape:', X_train_1.shape)mean_0 = np.mean(X_train_0, axis= 0)mean_1 = np.mean(X_train_1, axis= 0)print('mean_0.shape:', mean_0.shape, '\n', 'mean_1.shape:', mean_1.shape)# 计算协方差(两类共享一个协方差)cov_0 = np.zeros((data_dim, data_dim))cov_1 = np.zeros((data_dim, data_dim))for x in X_train_0:    cov_0 += np.dot(np.transpose([x - mean_0]), [x - mean_0]) / X_train_0.shape[0]for x in X_train_1:    cov_1 += np.dot(np.transpose([x - mean_1]), [x - mean_1]) / X_train_1.shape[0]# 两类共享一个协方差cov = (cov_0 * X_train_0.shape[0] + cov_1 * X_train_1.shape[0]) / (X_train_0.shape[0] + X_train_1.shape[0])</code></pre><h3 id="3-3-计算-w-和-b"><a href="#3-3-计算-w-和-b" class="headerlink" title="3.3 计算 w 和 b"></a>3.3 计算 w 和 b</h3><p>&emsp;&emsp;权重矩阵与偏差向量可以直接被计算出来<br>&emsp;&emsp;下面是计算w和b的原理图，由最大似然估计和贝叶斯公式推导而来，有兴趣的同学可以自己按照视频内容推导一下</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215411870.png" alt="计算 w 和 b"></p><pre class=" language-Python"><code class="language-Python"># 计算协方差矩阵的逆# 由于协方差矩阵可能几乎是奇异的，因此np.linalg.inv() 可能会产生较大的数值误差# 通过SVD分解，可以高效准确地求逆矩阵u, s, v = np.linalg.svd(cov, full_matrices=False)inv = np.matmul(v.T * 1 / s, u.T)# 计算 w 和 b w = np.dot(inv, mean_0 - mean_1)b = (-0.5) * np.dot(mean_0, np.dot(inv, mean_0)) + 0.5 * np.dot(mean_1, np.dot(inv, mean_1))\            + np.log(float(X_train_0.shape[0]) / X_train_1.shape[0])# 计算训练集上的准确率Y_train_pred = 1- _predict(X_train , w, b)train_acc = _accuracy(Y_train_pred, Y_train)print(train_acc)</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215519240.png" alt="生成模型的准确率结果"></p><h3 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h3><pre class=" language-Python"><code class="language-Python"># 预测 测试集的labelpredictions = 1 - _predict(X_test, w, b)with open(output_file.format('generative'), 'w') as f:    f.write('id,label\n')    for i, label in  enumerate(predictions):        f.write('{},{}\n'.format(i, label))# 打印一下数据前10项特征对应的权重ind = np.argsort(np.abs(w))[::-1]with open(X_test_file) as f:    content = f.readline().strip('\n').split(',')features = np.array(content)for i in ind[0:10]:    print(features[i], w[i])</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215706038.png" alt="生成模型测试结果"></p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 逻辑回归 </tag>
            
            <tag> 概率生成模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-二分法】二分搜索法</title>
      <link href="/2020/04/18/shu-ju-jie-gou-er-fen-fa-er-fen-sou-suo-fa/"/>
      <url>/2020/04/18/shu-ju-jie-gou-er-fen-fa-er-fen-sou-suo-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-二分搜索法定义"><a href="#1-二分搜索法定义" class="headerlink" title="1.二分搜索法定义"></a>1.二分搜索法定义</h3><p>&emsp;&emsp;<strong>二分查找</strong>（英语：binary search），也称<strong>折半搜索</strong>（英语：half-interval search）、<strong>对数搜索</strong>（英语：logarithmic search），是一种在<font color=#FF0000 ><strong>有序数组</strong></font>中查找某一特定元素的<font color=#FF0000 ><strong>搜索算法</strong></font>。</p><p>&emsp;&emsp;搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；</p><p>&emsp;&emsp;如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。</p><p>&emsp;&emsp;如果在某一步骤数组为空，则代表找不到。</p><p>&emsp;&emsp;这种搜索算法每一次比较都使搜索范围缩小一半。</p><h3 id="2-二分搜索法代码"><a href="#2-二分搜索法代码" class="headerlink" title="2.二分搜索法代码"></a>2.二分搜索法代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;对于上面这段代码而言，问题出在第 6 行代码处：</p><pre class=" language-java"><code class="language-java">mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;这句代码在 min 和 max 很大的时候，会出现溢出的情况，从而导致数组访问出错。</p><p>&emsp;&emsp;那怎么改进呢？一般的做法是这样的：<font color=#FF0000 ><strong>将加法变成减法</strong></font>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 防止溢出</span>            mid <span class="token operator">=</span>  min <span class="token operator">+</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;还有一种更高逼格的写法，也是官方的二分搜索法的实现写法：使用 <font color=#FF0000 ><strong>位运算</strong></font>。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无符号位运算符的优先级较低，先括起来</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用"+"，然后"无符号右移(java才有)"是推荐写法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-二分搜索模板"><a href="#3-二分搜索模板" class="headerlink" title="3.二分搜索模板"></a>3.二分搜索模板</h3><p>&emsp;&emsp;参考文章：<a href="https://mp.weixin.qq.com/s/1ojQ9aHdTTz8-Vt9fSAI8w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1ojQ9aHdTTz8-Vt9fSAI8w</a></p><h4 id="3-1模板一"><a href="#3-1模板一" class="headerlink" title="3.1模板一"></a>3.1模板一</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 防止计算越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;二分查找算法如果没有实现好，会有两种后果：</p><ul><li>&emsp;&emsp;<font color=#FF0000 >死循环</font></li><li>&emsp;&emsp;<font color=#FF0000 >跳过本该查找的位置</font></li></ul><h4 id="3-2-模板二"><a href="#3-2-模板二" class="headerlink" title="3.2 模板二"></a>3.2 模板二</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>根据条件返回 end 或者 start</code></pre><p>&emsp;&emsp;但是这个模版也有不好的地方，如果输入数组是 [1]，那么 while 循环结束后，要么是 start 超出数组范围，要么是 end 变成 -1，也就是说最后你不仅需要判断 start 和 end 对应的元素是不是要找的元素，还需要判断 start 和 end 是否是在合法的范围内，如果你这样做了，程序不会出错，你习惯了上面的模版，你可以继续使用，但是要知道会存在这么一个情况。</p><h4 id="3-3-模板三"><a href="#3-3-模板三" class="headerlink" title="3.3 模板三"></a>3.3 模板三</h4><ul><li><p>（1）<font color=#FF0000 ><strong>首先把循环可以进行的条件写成 <code>while(left &lt; right)</code>，在退出循环的时候，一定有 <code>left == right</code> 成立，此时返回 <code>left</code> 或者 <code>right</code> 都可以</strong></font></p></li><li><p>（2）思考左、右边界，如果左、右边界不包括目标数值，会导致错误结果</p><ul><li>&emsp;如果 <code>left</code> 和 <code>right</code> 表示的是数组的索引，就要考虑“索引是否有效” ，即“索引是否越界” 是重要的定界依据；</li><li>&emsp;左右边界一定要包括目标元素。</li></ul></li><li><p>（3）中位数先写 <code>int mid = (left + right) &gt;&gt;&gt; 1 ;</code> 根据循环里分支的编写情况，再做调整</p><p>&emsp;当数组的元素个数是偶数的时候，中位数有左中位数和右中位数之分。</p><p>&emsp;使用 <code>int mid = left + (right - left) / 2 ;</code> 得到左中位数的索引；</p><p>&emsp;使用 <code>int mid = left + (right - left + 1) / 2 ;</code> 得到右中位数的索引。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            等价于<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            等价于<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;什么时候使用左中位数，什么时候使用右中位数呢？选中位数的依据是为了避免死循环，得根据分支的逻辑来选择中位数，而分支逻辑的编写也有技巧。</p><ul><li>（4）先写逻辑上容易想到的分支逻辑，这个分支逻辑通常是<font color=#FF0000 >排除中位数的逻辑</font></li><li>（5）循环内只写两个分支，一个分支排除中位数，另一个分支不排除中位数，循环中不单独对中位数作判断</li></ul><p>&emsp;&emsp;既然是“夹逼”法，没有必要在每一轮循环开始前单独判断当前中位数是否是目标元素，因此分支数少了一支，代码执行效率更高。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640.webp" alt="二分查找模板"></p><p>&emsp;&emsp;还以 LeetCode 第 35 题为例，通过之前的分析，我们需要找到“大于或者等于目标值的第 1 个数的<strong>索引</strong>”。对于这道题而言：</p><p>&emsp;&emsp;1. 如果中位数小于目标值，它就应该被排除，左边界 <code>left</code> 就至少是 <code>mid + 1</code>；</p><p>&emsp;&emsp;2. 如果中位数大于等于目标值，还不能够肯定它就是我们要找的数，因为要找的是等于目标值的第 1 个数的<strong>索引</strong>，<strong>中位数以及中位数的左边都有可能是符合题意的数</strong>，因此右边界就不能把 <code>mid</code> 排除，因此右边界 <code>right</code> 至多是 <code>mid</code>，此时右边界不向左边收缩。</p><ul><li>（6）根据<font color=#FF0000 >分支逻辑选择中位数的类型</font>，可能是左中位数，也可能是右位数，选择的标准是避免死循环</li></ul><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640.jpg" alt="造成死循环的代码"></p><p><strong>&emsp;&emsp;选择中位数的依据是</strong>：避免出现死循环。我们需要确保：</p><blockquote><p>1、如果分支的逻辑，在选择左边界的时候，不能排除中位数，那么中位数就选“右中位数”，只有这样区间才会收缩，否则进入死循环；</p><p>2、同理，如果分支的逻辑，在选择右边界的时候，不能排除中位数，那么中位数就选“左中位数”，只有这样区间才会收缩，否则进入死循环。</p></blockquote><p>&emsp;&emsp;<strong>！！！每次可以用<code>left = 3</code>，<code>right = 4</code>来测试下是否会陷入死循环</strong></p><ul><li>（7）退出循环的时候，可能需要对“夹逼”剩下的那个数单独做一次判断，这一步称之为“后处理</li></ul><p>&emsp;&emsp;二分查找法之所以高效，是因为它利用了数组有序的特点，在每一次的搜索过程中，都可以排除将近一半的数，<font color=#FF0000 ><strong>使得搜索区间越来越小，直到区间成为一个数</strong></font>。回到这一节最开始的疑问：“区间左右边界相等（即收缩成 1 个数）时，这个数是否会漏掉”，解释如下：</p><p>&emsp;&emsp;1、<font color=#FF0000 ><strong>如果你的业务逻辑保证了你要找的数一定在左边界和右边界所表示的区间里出现</strong></font>，那么可以放心地返回 <code>left</code> 或者 <code>right</code>，无需再做判断；</p><p>&emsp;&emsp;2、如果你的业务逻辑不能保证你要找的数一定在左边界和右边界所表示的区间里出现，那么只要在退出循环以后，再针对<font color=#FF0000 > <code>nums[left]</code> </font>或者 <font color=#FF0000 ><code>nums[right]</code> </font>（此时 <code>nums[left] == nums[right]</code>）单独作一次判断，看它是不是你要找的数即可，这一步操作常常叫做“后处理”。</p><p>&emsp;&emsp;<strong>！！！如果你能确定候选区间里目标元素一定存在，则不必做“后处理”。</strong></p><ul><li>（8）取中位数的时候，要避免在计算上出现整型溢出</li></ul><p>&emsp;&emsp;<font color=#FF0000 ><code>int mid = left + (right - left) / 2;</code> </font> <code>right - left</code> 也有可能超过 int 类型能表示的最大值，只不过一般情况下 <code>left</code> 和 <code>right</code> 表示的是数组索引值，<code>left</code> 是非负数，因此 <code>right - left</code> 溢出的可能性很小。因此，它是正确的写法。</p><p>&emsp;&emsp;<font color=#FF0000 >int mid = (left + right) &gt;&gt;&gt; 1;</font><strong>如果这样写， <code>left + right</code> 在发生整型溢出以后，会变成负数，此时如果除以 2 ，<code>mid</code> 是一个负数，但是经过无符号右移，可以得到在不溢出的情况下正确的结果</strong>。</p><p>&emsp;&emsp;在 Java 中，无符号右移运算符 <code>&gt;&gt;&gt;</code> 和右移运算符 <code>&gt;&gt;</code> 的区别如下：</p><p>&emsp;&emsp;1. 右移运算符 <code>&gt;&gt;</code>：在右移时，丢弃右边指定位数，左边补上符号位；</p><p>&emsp;&emsp;2. 无符号右移运算符 <code>&gt;&gt;&gt;</code> ：在右移时，丢弃右边指定位数，左边补上 0，也就是说，对于正数来说，二者一样，而负数通过 <code>&gt;&gt;&gt;</code> 后能变成正数。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><h4 id="4-1技巧"><a href="#4-1技巧" class="headerlink" title="4.1技巧"></a>4.1技巧</h4><blockquote><p>先写分支逻辑，并且先写排除中位数的逻辑分支（因为更多时候排除中位数的逻辑容易想，但是前面我也提到过，这并不绝对），另一个分支的逻辑你就不用想了，写出第 1 个分支的反面代码即可（下面的说明中有介绍），再根据分支的情况选择使用左中位数还是右中位数；</p></blockquote><p>&emsp;&emsp;我简单总结了一下，左右分支的规律就如下两点：</p><p>&emsp;&emsp;（1）如果第 1 个分支的逻辑是“左边界排除中位数”（<font color=#FF0000 ><code>left = mid + 1</code></font>），那么第 2 个分支的逻辑就一定是“右边界不排除中位数”（<font color=#FF0000 ><code>right = mid</code></font>），反过来也成立；</p><p>&emsp;&emsp;（2）如果第 2 个分支的逻辑是“右边界排除中位数”（<font color=#FF0000 ><code>right = mid - 1</code></font>），那么第 2 个分支的逻辑就一定是“左边界不排除中位数”（<font color=#FF0000 ><code>left = mid</code></font>），反之也成立。</p><h4 id="4-2-注意事项"><a href="#4-2-注意事项" class="headerlink" title="4.2 注意事项"></a>4.2 注意事项</h4><blockquote><p>左中位数还是右中位数选择的标准根据分支的逻辑而来，标准是每一次循环都应该让区间收缩，当候选区间只剩下 2 个元素的时候，为了避免死循环发生，选择正确的中位数类型。如果你实在很晕，不防就使用有 2 个元素的测试用例，就能明白其中的原因，另外在代码出现死循环的时候，建议你可以将左边界、右边界、你选择的中位数的值，还有分支逻辑都打印输出一下，出现死循环的原因就一目了然了；</p></blockquote><blockquote><p>如果能确定要找的数就在候选区间里，那么退出循环的时候，区间最后收缩成为 1 个数后，直接把这个数返回即可；如果你要找的数有可能不在候选区间里，区间最后收缩成为 1 个数后，还要单独判断一下这个数是否符合题意。</p></blockquote><h4 id="4-3-参考模板"><a href="#4-3-参考模板" class="headerlink" title="4.3 参考模板"></a>4.3 参考模板</h4><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640-1587455129065.jpg" alt=""></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640-1587455139736.webp" alt="img"></p><p>&emsp;&emsp;<strong>说明</strong>：一般是先默认将中位数写成左中位数，再根据分支的情况，看看是否有必要调整成右中位数，即是不是要在 <code>(right - left)</code> 这个括号里面加 1 。</p><blockquote><p><font color=#FF0000 ><strong>虽说是两个模板，区别在于选中位数，中位数根据分支逻辑来选，原则是区间要收缩，且不出现死循环，退出循环的时候，视情况，有可能需要对最后剩下的数单独做判断</strong>。</font></p></blockquote><h4 id="4-4-递归代码模板"><a href="#4-4-递归代码模板" class="headerlink" title="4.4 递归代码模板"></a>4.4 递归代码模板</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 二分搜索函数的定义里，除了要指定数组 nums 和目标查找数 target 之外，还要指定查找区间的起点和终点位置，分别用 low 和 high 去表示。</span><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为了避免无限循环，先判断，如果起点位置大于终点位置，表明这是一个非法的区间，已经尝试了所有的搜索区间还是没能找到结果，返回 -1。 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">></span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 取正中间那个数的下标 middle。    </span>    <span class="token keyword">int</span> middle <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 判断一下正中间的那个数是不是要找的目标数 target，是，就返回下标 middle。        </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果发现目标数在左边，就递归地从左半边进行二分搜索。    </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> low<span class="token punctuation">,</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//否则从右半边递归地进行二分搜索。}</span></code></pre><h4 id="4-5-非递归代码模板"><a href="#4-5-非递归代码模板" class="headerlink" title="4.5 非递归代码模板"></a>4.5 非递归代码模板</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在 while 循环里，判断搜索的区间范围是否有效    </span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 计算正中间的数的下标        </span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断正中间的那个数是不是要找的目标数 target。如果是，就返回下标 middle    </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> middle<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果发现目标数在左边，调整搜索区间的终点为 middle - 1；否则，调整搜索区间的起点为 middle + 1    </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   high <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    low <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果超出了搜索区间，表明无法找到目标数，返回 -1      </span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;<strong>核心步骤</strong></p><ol><li>确定搜索的范围和区间</li><li>取中间的数判断是否满足条件</li><li>如果不满足条件，判定应该往哪个半边继续进行搜索</li></ol><h4 id="4-6-二分搜素的变形"><a href="#4-6-二分搜素的变形" class="headerlink" title="4.6 二分搜素的变形"></a>4.6 二分搜素的变形</h4><h5 id="4-6-1-找确定的边界"><a href="#4-6-1-找确定的边界" class="headerlink" title="4.6.1 找确定的边界"></a>4.6.1 找确定的边界</h5><p>&emsp;&emsp;边界分上边界和下边界，有时候也被成为右边界和左边界。确定的边界指边界的数值等于要找的目标数。</p><p>&emsp;&emsp;把第一次出现的地方叫下边界（lower bound），把最后一次出现的地方叫上边界（upper bound）。</p><p>&emsp;&emsp;那么成为 8 的下边界的条件应该有两个：</p><ol><li>该数必须是 8；</li><li>该数的左边一个数必须不是 8：</li></ol><ul><li>8 的左边有数，那么该数必须小于 8；</li><li>8 的左边没有数，即 8 是数组的第一个数。</li></ul><p>&emsp;&emsp;而成为 8 的上边界的条件也应该有两个：</p><ol><li>该数必须是 8；</li><li>该数的右边一个数必须不是 8：</li></ol><ul><li>8 的右边有数，那么该数必须大于8；</li><li>8 的右边没有数，即 8 是数组的最后一个数。</li></ul><h5 id="4-6-2-找模糊的边界"><a href="#4-6-2-找模糊的边界" class="headerlink" title="4.6.2 找模糊的边界"></a>4.6.2 找模糊的边界</h5><p>&emsp;&emsp;二分搜索可以用来查找一些模糊的边界。模糊的边界指，边界的值并不等于目标的值，而是大于或者小于目标的值。</p><p>&emsp;&emsp;判断一个数是不是第一个大于 6 的数，只要它满足如下的条件：</p><ol><li>该数要大于 6；</li><li>该数有可能是数组里的第一个数，或者它之前的一个数比 6 小。</li></ol><h5 id="4-6-3-旋转过的排序数组"><a href="#4-6-3-旋转过的排序数组" class="headerlink" title="4.6.3 旋转过的排序数组"></a>4.6.3 旋转过的排序数组</h5><p>&emsp;<strong>&emsp;如何判断左边是不是排好序的那个部分呢？</strong></p><ul><li>只要比较 nums[low] 和 nums[middle]。nums[low] &lt;= nums[middle] 时，能判定左边这部分一定是排好序的，否则，右边部分一定是排好序的。</li></ul><p>&emsp;&emsp;<strong>判定某一边是排好序的，有什么用处呢？能准确地判断目标值是否在这个区间里。</strong></p><ul><li>如果 nums[low] &lt;= target &amp;&amp; target &lt; nums[middle]，则应该在这个区间里搜索目标值。反之，目标值肯定在另外一边。</li></ul><h5 id="4-6-4-不定长的边界"><a href="#4-6-4-不定长的边界" class="headerlink" title="4.6.4 不定长的边界"></a>4.6.4 不定长的边界</h5><p>&emsp;&emsp;可以把这个问题看成是不知道长度的数组，数组从头开始记录都是时间戳，到了某个位置就成为了空：{2019-01-14, 2019-01-17, … , 2019-08-04, …. , null, null, null …}。</p><p>&emsp;&emsp;借用二分搜索的思想，反着进行搜索：</p><ol><li>一开始设置 low = 0，high = 1</li><li>只要 logs[high] 不为 null，high *= 2</li><li>当 logs[high] 为 null 的时候，可以在区间 [0, high] 进行普通的二分搜索</li></ol>]]></content>
      
      
      <categories>
          
          <category> 二分法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】LeetCode 第 41 号问题：缺失的第一个正数</title>
      <link href="/2020/04/17/shu-ju-jie-gou-shu-zu-leetcode-di-41-hao-wen-ti-que-shi-de-di-yi-ge-zheng-shu/"/>
      <url>/2020/04/17/shu-ju-jie-gou-shu-zu-leetcode-di-41-hao-wen-ti-que-shi-de-di-yi-ge-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>&emsp;&emsp;给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-41-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/image-20200417165014091.png" alt=""></p><h3 id="2-题目解析"><a href="#2-题目解析" class="headerlink" title="2.题目解析"></a>2.题目解析</h3><p>&emsp;&emsp;这道题如果不加上  <em>O(n)</em> 时间和  <em>O(1)</em> 空间这样的限定条件，应该再简单不过，但是加上了这两个要求，一下子使问题变得棘手。</p><p>&emsp;&emsp;首先这道题给定的条件很有限，输入参数就 <font color=#FF0000 ><strong>只有数组</strong></font> ，如果非要用  <em>O(n)</em> 时间和  <em>O(1)</em> 空间来做的话，表示我们除了<font color=#FF0000 ><strong>输入数组</strong></font>以外，不能借助任何其他的数据结构。</p><p>&emsp;&emsp;数组应该是属于一类最最基础的数据结构，除去 length 之外，<font color=#FF0000 >就只有两个属性 <em>index*和 *value</em></font>，那这道题就变成了 <font color=#FF0000 ><strong>如何利用数组的 value 和 index 之间的关系来找到最小缺失正整数</strong> </font>，如果想到了这一点，就已经成功了一半。</p>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】如何高效对有序数组/链表去重？</title>
      <link href="/2020/04/15/shu-ju-jie-gou-shu-zu-shu-zu-ji-qiao/"/>
      <url>/2020/04/15/shu-ju-jie-gou-shu-zu-shu-zu-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数组简介"><a href="#1-数组简介" class="headerlink" title="1.数组简介"></a>1.数组简介</h3><p>&emsp;&emsp;数组，将元素存储到内存的连续位置中，是最基本的数据结构。在任何和编程相关的面试中，都会被问到和数组相关的问题，可以说是非常热门的考题之一。比如：将数组反转、对数组进行排序、搜索数组中的元素等。</p><h3 id="2-数组优缺点"><a href="#2-数组优缺点" class="headerlink" title="2.数组优缺点"></a>2.数组优缺点</h3><h4 id="2-1优点"><a href="#2-1优点" class="headerlink" title="2.1优点"></a>2.1优点</h4><p>&emsp;&emsp;数组数据结构的主要优点是如果知道索引就可以通过 O(l) 进行快速搜索，</p><h4 id="2-2数组缺点"><a href="#2-2数组缺点" class="headerlink" title="2.2数组缺点"></a>2.2数组缺点</h4><p>&emsp;&emsp;在数组中添加和删除元素的速度会很慢，因为数组一旦被创建，就无法更改其大小。如果需要创建更长或更短的数组，得先创建一个新数组，再把原数组中的所有元素复制到新创建的数组中。</p><h3 id="3-数组解题技巧"><a href="#3-数组解题技巧" class="headerlink" title="3.数组解题技巧"></a>3.数组解题技巧</h3><ul><li>&emsp;&lt;1&gt; 对于数组来说，<font color=#FF0000 >在尾部插入、删除元素是比较高效的</font>，时间复杂度是 O(1)，但是如果在中间或者开头插入、删除元素，就会涉及数据的搬移，时间复杂度为 O(N)。我们要<font color=#FF0000 >尽可能只对数组尾部的元素进行操作</font>，以避免额外的时间复杂度。</li><li>&emsp;&lt;2&gt; <strong>对于数组相关的算法问题，有一个通用的技巧：要尽量避免在中间删除元素，那我就先想办法把这个元素换到最后去</strong>。这样的话，最终待删除的元素都拖在数组尾部，一个一个 pop 掉就行了，每次操作的时间复杂度也就降低到 O(1) 了。按照这个思路呢，又可以衍生出解决类似需求的通用方式：<font color=#FF0000 >快慢指针</font>。</li><li>&emsp;&lt;3&gt;当从头到尾遍历数组，感到复杂时，可以尝试<font color=#FF0000 >从尾到头遍历。</font></li></ul><h3 id="4-精选面试题：如何高效对有序数组-链表去重？"><a href="#4-精选面试题：如何高效对有序数组-链表去重？" class="headerlink" title="4.精选面试题：如何高效对有序数组/链表去重？"></a>4.精选面试题：如何高效对有序数组/链表去重？</h3><p>&emsp;&emsp;先看题目</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210412154029.png" alt="题目"></p><p>&emsp;&emsp;显然，由于数组已经排序，所以重复的元素一定连在一起，找出它们并不难，但如果使用暴力解法的话，整个时间复杂度是会达到 O(N^2)。而且题目要求我们原地修改，也就是说不能用辅助数组，空间复杂度得是 O(1)。</p><p>&emsp;&emsp;我们使用快慢指针进行解题：让慢指针<code>slow</code>走左后面，快指针<code>fast</code>走在前面探路，找到一个不重复的元素就告诉<code>slow</code>并让<code>slow</code>前进一步。这样当<code>fast</code>指针遍历完整个数组<code>nums</code>后，<code>nums[0..slow]</code>就是不重复元素，之后的所有元素都是重复元素。</p><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                slow<span class="token operator">++</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fast<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] = "</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span>  <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> list<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            slow <span class="token operator">+=</span> <span class="token number">1</span>            list<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>        fast <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list[%d]=%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>&emsp;&emsp;C语言代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arraylength<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            slow <span class="token operator">++</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span><span class="token punctuation">{</span>            fast <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d]:%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arraylength <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;看下算法执行的过程：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210412154055.gif" alt="有序数组去重"></p><p>&emsp;&emsp;再简单扩展一下，如果给你一个有序链表，如何去重呢？其实和数组是一模一样的，唯一的区别是把数组赋值操作变成操作指针而已：</p><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java"></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-python"><code class="language-python"></code></pre><p>&emsp;&emsp;看下算法执行的过程：</p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210412154106.gif" alt="有序链表去重"></p>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业一】线性回归-PM2.5预测</title>
      <link href="/2020/04/13/zuo-ye-yi-xian-xing-hui-gui-pm2.5-yu-ce/"/>
      <url>/2020/04/13/zuo-ye-yi-xian-xing-hui-gui-pm2.5-yu-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="一、作业说明及数据获取"><a href="#一、作业说明及数据获取" class="headerlink" title="一、作业说明及数据获取"></a>一、作业说明及数据获取</h2><p>给定训练集train.csv，要求根据前9个小时的空气监测情况预测第10个小时的PM2.5含量。</p><p>训练集介绍：</p><ul><li><p>(1) CSV文件，包含台湾丰原地区240天的气象观测资料(取每个月前20天的数据做训练集，12月X20天=240天，每月后10天数据用于测试，对学生不可见);</p></li><li><p>(2) 每天的监测时间点为0时，1时……到23时，共24个时间节点;</p></li><li><p>(3) 每天的检测指标包括CO、NO、PM2.5、PM10等气体浓度，是否降雨、刮风等气象信息，共计18项；</p></li><li><p>(4) 数据下载地址：<a href="https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A" target="_blank" rel="noopener">https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A</a> </p><p>​    提取码：vcj8</p></li></ul><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413153133242.png" alt="train.csv文件内容"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413153302263.png" alt="test.csv文件部分内容"></p><h2 id="二、程序实现"><a href="#二、程序实现" class="headerlink" title="二、程序实现"></a>二、程序实现</h2><h3 id="2-1-加载CSV文件"><a href="#2-1-加载CSV文件" class="headerlink" title="2.1 加载CSV文件"></a>2.1 加载CSV文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_csv</span><span class="token punctuation">(</span>train_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> usecols<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># usecols=range(3,27)：表示选择第3列到第27列数据</span><span class="token comment" spellcheck="true">#     pf = pd.read_csv(path, encoding='big5')</span><span class="token comment" spellcheck="true">#     data = pf.iloc[:, 3:]  # 另一种选择数据的方法</span>    <span class="token keyword">return</span> data</code></pre><h3 id="2-2-数据预处理"><a href="#2-2-数据预处理" class="headerlink" title="2.2 数据预处理"></a>2.2 数据预处理</h3><p>&emsp;&emsp;浏览数据可知，数据中存在一定量的空数据NR，且多存在于RAINFALL一项。对于空数据，常规的处理方法无非就是删除法和补全法两种。查阅资料后发现，RAINFALL表示当天对应时间点是否降雨，有降雨值为1，无降雨值为NR，类似于布尔变量。因此可以采用补全法处理空数据：将空数据NR全部补为0即可。</p><p>&emsp;&emsp;根据作业要求可知，需要用到连续9个时间点的气象观测数据，来预测第10个时间点的PM2.5含量。针对每一天来说，其包含的信息维度为(18,24)(18项指标，24个时间节点)。可以将0到8时的数据截取出来，形成一个维度为(18,9)的数据帧，作为训练数据，将9时的PM2.5含量取出来，作为该训练数据对应的label；同理可取1到9时的数据作为训练用的数据帧，10时的PM2.5含量作为label……以此分割，可将每天的信息分割为15个shape为(18,9)的数据帧和与之对应的15个label。</p><p>&emsp;&emsp;训练集中共包含240天的数据，因此共可获得240X15=3600个数据帧和与之对应的3600个label。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dataprocess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将空数据NR替换为0</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># data ----> [4320, 24]</span><span class="token comment" spellcheck="true">#   data[data == 'NR'] = 0.0  </span>    <span class="token comment" spellcheck="true"># 将data数据类型转换为&lt;class 'numpy.ndarray'></span><span class="token comment" spellcheck="true">#   array = np.array(data).astype(float)</span>    array <span class="token operator">=</span> data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># array ----> [4320, 24]</span>    <span class="token comment" spellcheck="true"># 第一种训练集数据划分：每天24小时，可以将0到8时的数据截取出来，形成一个维度为(18,9)的数        据帧，作为训练数据，将9时的PM2.5含量取出来，作为该训练数据对应的label；同理可取1到9时       的数据作为训练用的数据帧，10时的PM2.5含量作为label......以此分割，可将每天的信息分       割为15个shape为(18,9)的数据帧和与之对应的15个label。</span>    x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4320</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mat 是作为一个整体添加的，相当于x_list里的一个元素, x_list的个数相当于样本的个数</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x ----> [3600, 162]</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># y ----> [3600, 1]</span><span class="token comment" spellcheck="true">#     x_list, y_list = [], []</span><span class="token comment" spellcheck="true">#     month_data = {}</span><span class="token comment" spellcheck="true">#     for month in range(12):</span><span class="token comment" spellcheck="true">#         sample = np.empty([18, 480])</span><span class="token comment" spellcheck="true">#         for day in range(20):</span><span class="token comment" spellcheck="true">#             sample[:, day * 24 : (day+1) *24] = array[18 * (20*month+day): 18 * (20*month+day+1), :]</span><span class="token comment" spellcheck="true">#         month_data[month] = sample</span><span class="token comment" spellcheck="true">#     for i in range(12):</span><span class="token comment" spellcheck="true">#         for j in range(480-9):</span><span class="token comment" spellcheck="true">#             mat = month_data[i][:, j:j+9]</span><span class="token comment" spellcheck="true">#             label = month_data[i][9,j+9]</span><span class="token comment" spellcheck="true">#             x_list.append(mat)</span><span class="token comment" spellcheck="true">#             y_list.append(label)</span><span class="token comment" spellcheck="true">#         x = np.array(x_list).reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#         y = np.array(y_list).reshape(-1,1)</span><span class="token comment" spellcheck="true">#     x_train = x[:int(len(x)*0.8),:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     x_validation = x[int(len(x)*0.8):,:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     y_train = y[:int(len(y)*0.8)]</span><span class="token comment" spellcheck="true">#     y_validation = y[int(len(y)*0.8)]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y</code></pre><p>&emsp;&emsp;第二种训练集数据划分：在从csv文件中提取数据帧和label时，第一种方法是以天为单位，每天分割出15个数据帧和15个label。事实上，时间是连续的，可以将每月的20天首尾连接，再从其中分割数据帧和label，可使数据帧样本数量大大提升。</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/20200410145553875.png" alt="提取特征"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/20200410150256239.png" alt="提取特征"></p><pre class=" language-python"><code class="language-python">     x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 將原始 4320 * 24 的数据依照每个月分成 12个18 (features) * 480 (hours) 的数据。 </span>     month_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">for</span> month <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         sample <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> day <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             sample<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> day <span class="token operator">*</span> <span class="token number">24</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">18</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>month<span class="token operator">+</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>month<span class="token operator">+</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>         month_data<span class="token punctuation">[</span>month<span class="token punctuation">]</span> <span class="token operator">=</span> sample     <span class="token comment" spellcheck="true"># 每个月20天有 480hrs，每 9 小时形成一个 data，每月有 471 个 data，故总数据为 471 * 12 个 ，而每个 data 有 9 * 18 的 features (一小时 18 个 features * 9 小时)。对应的 labels 有 471 * 12 个(第 10 个小时的 PM2.5)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">480</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             mat <span class="token operator">=</span> month_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>             label <span class="token operator">=</span> month_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>             x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>             y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>         x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x ----> [5652, 162]</span>         y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># y ----> [5652, 1]</span></code></pre><h3 id="2-3-标准化"><a href="#2-3-标准化" class="headerlink" title="2.3 标准化"></a>2.3 标准化</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200419210629193.png" alt="标准化两种形式"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#12 * 471</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#18 * 9 </span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x</code></pre><h3 id="2-4-训练train"><a href="#2-4-训练train" class="headerlink" title="2.4 训练train"></a>2.4 训练train</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_real <span class="token operator">=</span> y    learning_rate <span class="token operator">=</span> lr    iter_time <span class="token operator">=</span> epochs    dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在原x数据后面再加一维  x1 ----> [3600, 163]</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x1_transpose <span class="token operator">=</span> x1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>    w_adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 损失函数loss用rmse</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># print(loss.shape)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 变量w的梯度 w_gradient -----> [163, 1]</span>        w_gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1_transpose<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 变量w的梯度平方和</span>        w_adagrad <span class="token operator">+=</span> w_gradient <span class="token operator">**</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># 梯度更新</span>        w <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> w_gradient <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>w_adagrad <span class="token operator">+</span> eps<span class="token punctuation">)</span>    <span class="token keyword">return</span> w</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413161334114.png" alt="训练结果"></p><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span><span class="token punctuation">:</span>    pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'big5'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> pf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    test_data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> test_data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> float<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x_test<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i <span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test</code></pre><h3 id="2-6-main-函数"><a href="#2-6-main-函数" class="headerlink" title="2.6 main()函数"></a>2.6 main()函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span> <span class="token string">'./data/train.csv'</span>    data <span class="token operator">=</span> load_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> dataprocess<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    lr <span class="token operator">=</span> <span class="token number">100</span>    epochs <span class="token operator">=</span> <span class="token number">1000</span>    w <span class="token operator">=</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">,</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_path <span class="token operator">=</span> <span class="token string">'./data/test.csv'</span>    x_test <span class="token operator">=</span> test<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span>    w1 <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">)</span>    y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将预测结果保存到submit.csv</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/submit.csv'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>        csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(header)</span>        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(row)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-7-整体代码"><a href="#2-7-整体代码" class="headerlink" title="2.7 整体代码"></a>2.7 整体代码</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> csv<span class="token keyword">def</span> <span class="token function">load_csv</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> usecols<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     pf = pd.read_csv(path, encoding='big5')</span><span class="token comment" spellcheck="true">#     data = pf.iloc[:, 3:]</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">dataprocess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#   data[data == 'NR'] = 0.0  </span><span class="token comment" spellcheck="true">#   array = np.array(data).astype(float)</span>    array <span class="token operator">=</span> data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4320</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mat 是作为一个整体添加的，相当于x_list里的一个元素, x_list的个数相当于样本的个数</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>          y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#     month_data = {}</span><span class="token comment" spellcheck="true">#     for month in range(12):</span><span class="token comment" spellcheck="true">#         sample = np.empty([18, 480])</span><span class="token comment" spellcheck="true">#         for day in range(20):</span><span class="token comment" spellcheck="true">#             sample[:, day * 24 : (day+1) *24] = array[18 * (20*month+day): 18 * (20*month+day+1), :]</span><span class="token comment" spellcheck="true">#         month_data[month] = sample</span><span class="token comment" spellcheck="true">#     x_list, y_list = [], []</span><span class="token comment" spellcheck="true">#     for i in range(12):</span><span class="token comment" spellcheck="true">#         for j in range(480-9):</span><span class="token comment" spellcheck="true">#             mat = month_data[i][:, j:j+9]</span><span class="token comment" spellcheck="true">#             label = month_data[i][9,j+9]</span><span class="token comment" spellcheck="true">#             x_list.append(mat)</span><span class="token comment" spellcheck="true">#             y_list.append(label)</span><span class="token comment" spellcheck="true">#         x = np.array(x_list).reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#         y = np.array(y_list).reshape(-1,1)</span><span class="token comment" spellcheck="true">#     x_train = x[:int(len(x)*0.8),:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     x_validation = x[int(len(x)*0.8):,:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     y_train = y[:int(len(y)*0.8)]</span><span class="token comment" spellcheck="true">#     y_validation = y[int(len(y)*0.8)]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y<span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#12 * 471</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#18 * 9 </span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_real <span class="token operator">=</span> y    learning_rate <span class="token operator">=</span> lr    iter_time <span class="token operator">=</span> epochs    dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x1_transpose <span class="token operator">=</span> x1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>    learning_rate <span class="token operator">=</span> <span class="token number">100</span>    iter_time <span class="token operator">=</span> <span class="token number">1000</span>    w_adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rmse</span>       <span class="token comment" spellcheck="true"># print(loss.shape)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        w_gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1_transpose<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#dim*1</span>        w_adagrad <span class="token operator">+=</span> w_gradient <span class="token operator">**</span> <span class="token number">2</span>        w <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> w_gradient <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>w_adagrad <span class="token operator">+</span> eps<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># np.save('weight.npy', w)</span>    <span class="token keyword">return</span> w<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span><span class="token punctuation">:</span>    pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'big5'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> pf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    test_data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> test_data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> float<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x_test<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i <span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span> <span class="token string">'./data/train.csv'</span>    data <span class="token operator">=</span> load_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> dataprocess<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    lr <span class="token operator">=</span> <span class="token number">100</span>    epochs <span class="token operator">=</span> <span class="token number">1000</span>    w <span class="token operator">=</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">,</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_path <span class="token operator">=</span> <span class="token string">'./data/test.csv'</span>    x_test <span class="token operator">=</span> test<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span>    w1 <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">)</span>    y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/submit.csv'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>        csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(header)</span>        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(row)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>&emsp;&emsp;保存的submit.csv文件部分内容如下:</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413173310799.png" alt="submit.csv文件部分内容"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性回归 </tag>
            
            <tag> PM2.5预测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2020/04/10/bo-ke-da-jian/"/>
      <url>/2020/04/10/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>&emsp;通过 GitHub + hexo 来搭建个人博客！！</p><p>参考链接：</p><p>&emsp;1.超全面！如何用 GitHub 从零开始搭建一个博客 ？</p><p>&emsp;&emsp;<a href="https://www.cxyxiaowu.com/6407.html" target="_blank" rel="noopener">https://www.cxyxiaowu.com/6407.html</a></p><p>&emsp;2.【新手向】从零开始搭建一个酷炫免费的个人博客</p><p>&emsp;&emsp;<a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484589&amp;idx=1&amp;sn=7ef61ad418eb4b16d3587a5859f5ce8e&amp;chksm=fa0e6b2ccd79e23afc1767f07afeec6f3dd3de0be44be01c7548afd6476015b0c3d91528088c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484589&amp;idx=1&amp;sn=7ef61ad418eb4b16d3587a5859f5ce8e&amp;chksm=fa0e6b2ccd79e23afc1767f07afeec6f3dd3de0be44be01c7548afd6476015b0c3d91528088c&amp;scene=21#wechat_redirect</a></p><h2 id="一、GitHub创建个人仓库"><a href="#一、GitHub创建个人仓库" class="headerlink" title="一、GitHub创建个人仓库"></a>一、GitHub创建个人仓库</h2><p>&emsp;1.登录到 GitHub：<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p><p>&emsp;2.登录成功之后，点击 GitHub 中的 New repository 创建新仓库，仓库的名字可以随便起，不过这个仓库是作为我们的博客仓库的，所以尽量将名字以 {username}.github.io 的形式来起。</p><p>&emsp;&emsp;比如，我的GitHub用户名是lewky，我就会把这个仓库命名为lewky.github.io。（为什么要这样起名，后面会说明）</p><p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410150210713.png" alt=""></p><h2 id="二、相关软件安装及配"><a href="#二、相关软件安装及配" class="headerlink" title="二、相关软件安装及配"></a>二、相关软件安装及配</h2><h3 id="2-1-安装-Node-js"><a href="#2-1-安装-Node-js" class="headerlink" title="2.1 安装 Node.js"></a>2.1 安装 Node.js</h3><p>&emsp;&emsp;首先在自己的电脑上安装 Node.js，下载地址：<a href="https://pan.baidu.com/s/1lOE7p3GIX516fQIW_gAtZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1lOE7p3GIX516fQIW_gAtZg</a> ，提取码：udo2 </p><p>&emsp;&emsp;最好安装这个低版本的，安装高版本的，有可能会报错：</p><p>fatal something’s wrong. maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a> typeerror [err_invalid_arg_type]: <font color=#FF0000 >the “mode” argument must be integer.</font> received an instance of object at copyfile (fs.js:1972:10) at trycatcher (/users/zhouhailin/blog/node_modules/bluebird/js/release/util.js:16:23) at ret (eval at makenodepromisifiedeval (/usr/local/lib/node_modules/hexo-cli/node_modules/bluebird/js/release/promisify.js:184:12), <anonymous>:13:39) at /users/zhouhailin/blog/node_modules/hexo-fs/lib/fs.js:144:39 at trycatcher (/users/zhouhailin/blog/node_modules/bluebird/js/release/util.js:16:23)</p><h3 id="2-2-安装Git"><a href="#2-2-安装Git" class="headerlink" title="2.2 安装Git"></a>2.2 安装Git</h3><p>&emsp;&emsp;这是使用 Git 的目的是为了将我们的网站从本地提交上服务器（GitHub）上面去。我认为 Git 操作是程序员应该具备的一个基本操作，具体的 Git 操作细节可以查看廖雪峰的教程，讲的十分详细： <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p><p>&emsp;&emsp;下载地址同样在上面的百度网盘里</p><h4 id="2-2-1-Git配置"><a href="#2-2-1-Git配置" class="headerlink" title="2.2.1 Git配置"></a>2.2.1 Git配置</h4><p>​        <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410151626711.png" style="zoom:67%;" /></p><p>&emsp;&emsp;进入Git Bash终端进行如下操作，设置user.name 和 user.email 配置信息</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><h4 id="2-2-2-SSH-key的创建与配置"><a href="#2-2-2-SSH-key的创建与配置" class="headerlink" title="2.2.2 SSH key的创建与配置"></a>2.2.2 SSH key的创建与配置</h4><p>&emsp;&emsp;最关键的一步来了，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。</p><p>&emsp;<strong>1.生成RSA密钥对</strong></p><p>&emsp;&emsp;通过注册的邮箱生成 ssh 密钥文件:</p><pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre><p>&emsp;&emsp;然后直接三个回车即可，默认不需要设置密码。最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>。</p><p>&emsp;<strong>2.拷贝密钥</strong></p><p>&emsp;&emsp;打开 <code>id_rsa.pub 文件</code>，将里面的内容全部复制。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410152745234.png" style="zoom:67%;" /><p>&emsp;<strong>3.在 GitHub 上配置SSH key</strong></p><p>&emsp;&emsp;<em>·*</em>进入Setting页面</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410153129263.png" style="zoom:67%;" /><p>&emsp;&emsp;<strong>·</strong>选择 SSH and GPG keys</p><p>&emsp;&emsp;<strong>·</strong>点击 New SSH key</p><p>&emsp;&emsp;<strong>·</strong>填写Title（用来给公钥起一个名字，以便和其他的公钥区分开来）</p><p>&emsp;&emsp;<strong>·</strong>然后在 Key 里将我们刚刚复制的公钥复制进去</p><p>&emsp;&emsp;<strong>·</strong>最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410153702312.png" style="zoom:67%;" /><p>&emsp;<strong>4.测试GitHub SSH</strong></p><p>&emsp;&emsp;添加好 <code>SSH Key</code>后，进行测试。使用 Git Bash 输入：</p><pre><code>ssh -T git@github.com</code></pre><p>&emsp;&emsp;你将会看到：</p><pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>&emsp;&emsp;选择 <code>yes</code></p><pre><code>Hi jiesheng88! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>​        <img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210312160747.png" alt=""></p><p>&emsp;&emsp;如果看到<code>Hi</code>后面是你的用户名，就说明成功了。</p><h3 id="2-3-Hexo安装"><a href="#2-3-Hexo安装" class="headerlink" title="2.3 Hexo安装"></a>2.3 Hexo安装</h3><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>&emsp;&emsp;在使用npm之前可以更改配置，使用国内的镜像加速下载。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token function">npm</span> config <span class="token keyword">set</span> loglevel http<span class="token function">npm</span> config <span class="token keyword">set</span> progress <span class="token boolean">false</span></code></pre><p>&emsp;&emsp;<strong>每输入一行，回车，没有任何提示，说明操作成功</strong></p><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210312171558.png" alt=""></p><p>&emsp;&emsp;<strong>npm的配置被存储在 ~/.npmrc，可以随时改</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> ~/.npmrc</code></pre><p><img src="https://gitee.com/jiesheng8888/imgs/raw/master/PicGoImgs/20210312171914.png" alt=""></p><p>&emsp;&emsp;使用 Git Bash 输入：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>&emsp;&emsp;安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p><h2 id="三、通过hexo搭建博客"><a href="#三、通过hexo搭建博客" class="headerlink" title="三、通过hexo搭建博客"></a>三、通过hexo搭建博客</h2><h3 id="3-1初始化博客"><a href="#3-1初始化博客" class="headerlink" title="3.1初始化博客"></a>3.1初始化博客</h3><p>&emsp;&emsp;在你想创建博客的文件夹下（我是想把博客放在D:\Program Files文件夹下），点击鼠标右键，选择Git Bash Here，即可进入Git Bash 。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410155030466.png" style="zoom:67%;" /><p>&emsp;&emsp;使用 Git Bash 输入，其中myBlog是你要保存的博客文件夹的名称：</p><pre><code>hexo init myBlog</code></pre><p>​    <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410155608097.png" style="zoom: 80%;" /></p><p>&emsp;&emsp;接下来，进入文件夹 <code>myBlog</code>,然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><pre><code>hexo generate</code></pre><p>&emsp;&emsp;可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><p>&emsp;&emsp;然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><pre><code>hexo serve</code></pre><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410155704384.png" style="zoom:80%;" /><p>&emsp;&emsp;然后，打开浏览器输入地址：</p><pre><code>localhost:4000</code></pre><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160053650.png" style="zoom: 80%;" /><p>&emsp;&emsp;执行到这里事实上博客就已经搭建好了，接下来就是去完善它。</p><p><strong>&emsp;！！！注意：下面的命令都是在 <code>myBlog</code>文件里进行操作的。</strong></p><h3 id="3-2-部署"><a href="#3-2-部署" class="headerlink" title="3.2 部署"></a>3.2 部署</h3><p>&emsp;&emsp;接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>&emsp;&emsp;那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><p>&emsp;&emsp;在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。</p><p>&emsp;&emsp;打开myBlog文件夹下的 _config.yml 文件，找到 Deployment 这个地方：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>&emsp;&emsp;把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:/{user}/{repository}.git  branch: master</code></pre><p>&emsp;&emsp;<strong>请注意，这里的仓库地址如果写成：<code>https://github.com/{user}/{repository}.git</code>可能会在后边的部署时无法成功，需要将<code>https://github.com</code>改成<code>git@github.com:</code>。</strong></p><p>&emsp;&emsp;我的就修改为如下内容：</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410162701389.png" style="zoom:80%;" /><p>&emsp;&emsp;另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报错。</p><p>&emsp;&emsp;安装这个插件，在myBlog文件夹下执行安装命令如下：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>&emsp;&emsp;安装成功之后，执行部署命令：</p><pre><code>hexo deploy</code></pre><p>&emsp;&emsp;运行结果类似如下：</p><pre><code>INFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...On branch masternothing to commit, working directory cleanCounting objects: 46, done.Delta compression using up to 8 threads.Compressing objects: 100% (36/36), done.Writing objects: 100% (46/46), 507.66 KiB | 0 bytes/s, done.Total 46 (delta 3), reused 0 (delta 0)remote: Resolving deltas: 100% (3/3), done.To git@github.com:NightTeam/nightteam.github.io.git * [new branch]      HEAD -&gt; masterBranch master set up to track remote branch master from git@github.com:NightTeam/nightteam.github.io.git.INFO  Deploy done: git</code></pre><p>&emsp;&emsp;如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了。</p><p>&emsp;&emsp;通过如下图所示的Settings 进入该仓库的设置页面，找到 Github Pages 这一项，选择以 Master 分支作为 source，然后保存；接下来这个仓库就会被部署到 https://{username}.github.io/{仓库名}。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410163524556.png" style="zoom:80%;" /><p>&emsp;&emsp;如果你希望直接通过 https://{username}.github.io/ 来访问你的博客，可以将仓库名改为 {username}.github.io；这样就不需要在url后边添加上仓库名来访问了。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410163835119.png" style="zoom:80%;" /><p>&emsp;&emsp;比如，我GitHub的usename是jiesheng88，Repository 名称取的是 jiesheng88.github.io，那我就访问 <a href="http://jiesheng88.github.io，" target="_blank" rel="noopener">http://jiesheng88.github.io，</a></p><p>&emsp;&emsp;这时候就可以看到跟本地一模一样的博客内容了（下面是加了主题的）。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410164144550.png" style="zoom:80%;" /><p>&emsp;&emsp;GitHub 的 master 分支实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><p>&emsp;&emsp;如果我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>&emsp;&emsp;具体的添加过程就很简单了，在Git Bash里逐条添加如下命令：</p><pre><code>git initgit checkout -b sourcegit add -Agit commit -m &quot;init blog&quot;git remote add origin git@github.com:{username}/{username}.github.io.gitgit push origin source</code></pre><p>&emsp;&emsp;成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。</p><h3 id="3-3-更换Hexo博客主题"><a href="#3-3-更换Hexo博客主题" class="headerlink" title="3.3 更换Hexo博客主题"></a>3.3 更换Hexo博客主题</h3><p>&emsp;&emsp;hexo 默认的主题可能显得有点呆板，你可以在 <a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">https://hexo.io/themes/index.html</a>&emsp;&emsp;</p><p>&emsp;&emsp;进行主题的挑选更换。将下好的主题安放在<code>themes</code>文件夹内，同时在<code>_config.yml</code>中进行主题修改就好了。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410165053440.png" style="zoom:80%;" /><p>&emsp;&emsp;我选择了<code>hexo-theme-matery</code> 这款主题。具体配置过程，看下面文档说明。</p><p>&emsp;&emsp;Hexo博客主题之hexo-theme-matery的介绍：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24</a></p><p>&emsp;&emsp;一般大佬们提供的主题都会提供文档说明，按照说明进行简单的设置就能拥有一个酷炫的页面了。</p><h3 id="3-4-添加文章"><a href="#3-4-添加文章" class="headerlink" title="3.4 添加文章"></a>3.4 添加文章</h3><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160327894.png" style="zoom:80%;" /><h4 id="3-4-1-直接导入文章"><a href="#3-4-1-直接导入文章" class="headerlink" title="3.4.1 直接导入文章"></a>3.4.1 直接导入文章</h4><p>&emsp;&emsp;你可以将你平时写的文章直接导入到 <code>_posts</code> 文件夹里，注意文章类型得是 <code>md</code>格式。</p><p>&emsp;&emsp;<strong>！！在文章开头通过如下格式添加必要信息：</strong></p><pre><code>---title: 标题 # 自动创建，如 hello-worlddate: 日期 # 自动创建，如 2019-09-22 01:47:21tags: - 标签1- 标签2- 标签3categories:- 分类1- 分类2---</code></pre><h4 id="3-4-2-写新文章"><a href="#3-4-2-写新文章" class="headerlink" title="3.4.2 写新文章"></a>3.4.2 写新文章</h4><p>&emsp;&emsp;你可以执行下列命令来创建一篇新文章。</p><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>&emsp;&emsp;你可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160641123.png" style="zoom:80%;" /><p>&emsp;&emsp;这样在 <code>_posts</code> 文件夹里也生成了一篇新的文章。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160701789.png" style="zoom:80%;" /><h4 id="3-4-3-Markdown-写作"><a href="#3-4-3-Markdown-写作" class="headerlink" title="3.4.3 Markdown 写作"></a>3.4.3 Markdown 写作</h4><p>&emsp;&emsp;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>&emsp;&emsp;这里推荐 Typora 这款 Markdown 写作软件。Typora 是一款免费的 MD 编辑器，它是优雅简洁与强大开放的完美结合体。官网直达 <a href="https://typora.io" target="_blank" rel="noopener">https://typora.io</a></p><h4 id="3-4-4-Typora-插入图片"><a href="#3-4-4-Typora-插入图片" class="headerlink" title="3.4.4 Typora 插入图片"></a>3.4.4 Typora 插入图片</h4><p>&emsp;&emsp;事先声明，所有博客文件均保存在 <code>/source/_posts</code>文件夹下</p><p>&emsp;&emsp;首先在 <code>source</code>目录下建一个文件夹叫images，用来保存博客中的图片</p><p>&emsp;&emsp;然后打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p><p>​    <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410213829004.png" alt="设置根目录"></p><p>&emsp;&emsp;这样的话所有的博客中的图片都将会保存到 <code>/source/images/该博客md文件名/图片名称</code></p><p>&emsp;&emsp;但是仅仅这样设置还不够，这样设置在typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在typora中进行进一步设置。</p><p>&emsp;&emsp;在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>myBlog/source</code>作为其根目录即可。</p><p>&emsp;&emsp;<strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确喔！</strong></p><p>&emsp;&emsp;<strong>也可以使用Gitee+PicGo实现免费图床，这样就可以不用在本地存储图片，可以参考以下博客：</strong></p><p>&emsp;&emsp;1、PicGo + Gitee(码云)实现markdown图床：<a href="https://zhuanlan.zhihu.com/p/102594554" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/102594554</a></p><p>&emsp;&emsp;2、Typora+PicGo图床配置以及PicGo上传失败的解决办法：<a href="https://blog.csdn.net/weixin_42875245/article/details/108554926" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42875245/article/details/108554926</a></p><h2 id="四、部署脚本"><a href="#四、部署脚本" class="headerlink" title="四、部署脚本"></a>四、部署脚本</h2><p>&emsp;&emsp;最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>&emsp;&emsp;这样我们在部署发布的时候只需要执行：</p><pre><code>sh deploy.sh</code></pre><p>&emsp;&emsp;就可以完成博客的更新了，非常简单。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
