<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【数据结构-递归】递归</title>
      <link href="/2020/07/26/shu-ju-jie-gou-di-gui-di-gui/"/>
      <url>/2020/07/26/shu-ju-jie-gou-di-gui-di-gui/</url>
      
        <content type="html"><![CDATA[<h2 id="一、递归的解题模板"><a href="#一、递归的解题模板" class="headerlink" title="一、递归的解题模板"></a>一、递归的解题模板</h2><h3 id="1-1-解题步骤"><a href="#1-1-解题步骤" class="headerlink" title="1.1 解题步骤"></a>1.1 解题步骤</h3><ol><li>判断当前情况是否非法，如果非法就立即返回，这一步也被称为完整性检查（Sanity Check）。例如，看看当前处理的情况是否越界，是否出现了不满足条件的情况。通常，这一部分代码都是写在最前面的。</li><li>判断是否满足结束递归的条件。在这一步当中，处理的基本上都是一些推导过程当中所定义的初始情况。</li><li>将问题的规模缩小，递归调用。在归并排序和快速排序中，我们将问题的规模缩小了一半，而在汉诺塔和解码的例子中，我们将问题的规模缩小了一个。</li><li>利用在小规模问题中的答案，结合当前的数据进行整合，得出最终的答案。</li></ol><h3 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h3><pre class=" language-java"><code class="language-java">function <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一步：判断输入或者状态是否非法？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token operator">/</span>state is invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第二步：判读递归是否应当结束?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>match condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> some value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第三步：缩小问题规模</span>    result1 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>    result2 <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">// 第四步: 整合结果</span>    <span class="token keyword">return</span> <span class="token function">combine</span><span class="token punctuation">(</span>result1<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="1-3-递归复杂度分析"><a href="#1-3-递归复杂度分析" class="headerlink" title="1.3 递归复杂度分析"></a>1.3 递归复杂度分析</h3><p>&emsp;&emsp;分析递归算法推荐两种方法：迭代法和公式法</p><ol><li><p><strong>迭代法</strong></p><p>&emsp;&emsp;假设这个递归函数的运行时间是 T(n)。两次调用递归函数，每次都使问题的规模减少 1 个，得到两倍的 T(n-1)。因此得出：T(n) = 1 + 2×T(n - 1) + 1，即T(n) = 2×T(n - 1) + O(1)。用迭代法将 T(n) 进行展开。</p><img src="../images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%80%92%E5%BD%92%E3%80%91%E9%80%92%E5%BD%92/image-20200726171421540.png" style="zoom: 67%;" /></li></ol><ol start="2"><li><strong>公式法</strong></li></ol><p>&emsp;&emsp;当递归函数的时间执行函数满足如下的关系式时，我们可以利用公式法：T(n) = a×T(n/b) + f(n)。</p><p>&emsp;&emsp;<font color=#FF0000 >其中，f(n) 是每次递归完毕之后额外的计算执行时间。例如，在归并排序中，每次递归处理完两边的数组后，我们需要执行合并的操作，那么这个操作的执行时间就是 f(n)。</font></p><img src="../images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%80%92%E5%BD%92%E3%80%91%E9%80%92%E5%BD%92/image-20200726171958756.png" alt="image-20200726171958756" style="zoom:67%;" /><h2 id="二、回溯的解题模板"><a href="#二、回溯的解题模板" class="headerlink" title="二、回溯的解题模板"></a>二、回溯的解题模板</h2><h3 id="2-1-解题步骤"><a href="#2-1-解题步骤" class="headerlink" title="2.1 解题步骤"></a>2.1 解题步骤</h3><ol><li>判断当前情况是否非法，如果非法就立即返回；</li><li>当前情况是否已经满足递归结束条件，如果是就将当前结果保存起来并返回；</li><li>当前情况下，遍历所有可能出现的情况并进行下一步的尝试；</li><li>递归完毕后，立即回溯，回溯的方法就是取消前一步进行的尝试。</li></ol><h3 id="2-2-代码模板"><a href="#2-2-代码模板" class="headerlink" title="2.2 代码模板"></a>2.2 代码模板</h3><pre class=" language-java"><code class="language-java">function <span class="token function">fn</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一步：判断输入或者状态是否非法？</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token operator">/</span>state is invalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第二步：判读递归是否应当结束?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>match condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> some value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 遍历所有可能出现的情况</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>all possible cases<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第三步: 尝试下一步的可能性</span>        solution<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">case</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 递归</span>        result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 第四步：回溯到上一步</span>        solution<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token keyword">case</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-3-例题分析"><a href="#2-3-例题分析" class="headerlink" title="2.3 例题分析"></a>2.3 例题分析</h3><p>&emsp;&emsp;LeetCode 第 39 题：给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。</p><p>说明：</p><ul><li>所有数字（包括 target）都是正整数。</li><li>解集不能包含重复的组合。</li></ul><p>&emsp;&emsp;<strong>回溯法思路</strong></p><ol><li>从一个空的集合开始，小心翼翼地往里面添加元素。</li><li>每次添加，检查一下当前的总和是否等于给定的目标。</li><li>如果总和已经超出了目标，说明没有必要再尝试其他的元素了，返回并尝试其他的元素；</li><li>如果总和等于目标，就把当前的组合添加到结果当中，表明我们找到了一种满足要求的组合，同时返回，并试图寻找其他的集合。</li></ol><p>&emsp;&emsp;<strong>代码实现</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results<span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> results <span class="token operator">-</span> 换另外一种颜色高亮<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> results<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> backtracking <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> solution<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> results<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        solution<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> solution<span class="token punctuation">,</span> results<span class="token punctuation">)</span><span class="token punctuation">;</span>        solution<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;在主函数里：</p><ol><li>定义一个 results 数组用来保存最终的结果；</li><li>调用函数 backtracking，并将初始的情况以及 results 传递进去，这里的初始情况就是从第一个元素开始尝试，而且初始的子集为空。</li></ol><p>&emsp;&emsp;在 backtracking 函数里：</p><ol><li>检查当前的元素总和是否已经超出了目标给定的值，每添加进一个新的元素时，就将它从目标总和中减去；</li><li>如果总和已经超出了目标给定值，就立即返回，去尝试其他的数值；<br> 如果总和刚好等于目标值，就把当前的子集添加到结果中。</li></ol><p>&emsp;&emsp;在循环体内：</p><ol><li>每次添加了一个新的元素，立即递归调用 backtracking，看是否找到了合适的子集</li><li>递归完毕后，要把上次尝试的元素从子集里删除，这是最重要的。</li></ol><p>&emsp;&emsp;以上，就完成了回溯。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 递归 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫入门</title>
      <link href="/2020/05/07/pa-chong-ru-men/"/>
      <url>/2020/05/07/pa-chong-ru-men/</url>
      
        <content type="html"><![CDATA[<h2 id="一、爬虫的基本套路"><a href="#一、爬虫的基本套路" class="headerlink" title="一、爬虫的基本套路"></a>一、爬虫的基本套路</h2><p>&emsp;&emsp;1.打开资源</p><p>&emsp;&emsp;2.定位资源</p><p>&emsp;&emsp;3.解析资源</p><p>&emsp;&emsp;4.下载资源</p><h3 id="1-1-打开目标网址"><a href="#1-1-打开目标网址" class="headerlink" title="1.1 打开目标网址"></a>1.1 打开目标网址</h3><p>&emsp;&emsp;在python中，可以使用 <strong>requests</strong> 这一工具包来发送HTTP请求。为了了解程序所“看到” 页面是什么样子的，我们需要把程序所得到HTML文件保存到本地，然后再用浏览器打开，就能和程序感同身受了。从而达到“人机合一”的境界。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印请求结果的状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#打印请求到的网页源码</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>&emsp;&emsp;代码解析：</p><p>&emsp;&emsp;第3行：使用<code>requests</code>类库，以<code>get</code>的方式请求网址，并将服务器返回的结果封装成一个对象，用变量<code>response</code>来接收它。</p><p>&emsp;&emsp;第4行：一般可以根据状态码来判断是否请求成功，正常的状态码是200，异常状态码就很多了，比如404（找不到网页）、301（重定向）等。</p><p>&emsp;&emsp;第5行：打印网页的源码。注意，只是源码。不像是浏览器，在获取到源码之后，还会进一步地取请求源码中引用的图片等信息，如果有JS，浏览器还会执行JS，对页面显示的内容进行修改。使用requests进行请求，我们能够直接获取到的，只有最初始的网页源码。也正是因为这样，不加载图片、不执行JS等等，爬虫请求的速度会非常快。</p><p>&emsp;&emsp;在浏览器打开result.html是这样子的</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OThjMWJkOTg3MQ.jpg" alt=""></p><p>&emsp;&emsp;这怎么和在浏览器中看到的不一样呢？</p><p>&emsp;&emsp;这个时候我就要亮出一件绝世宝贝————Chrome调试台（按F12）来给您分析一波了。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OTg0NGM5YWNmYg.jpg" alt=""></p><p>&emsp;&emsp;其实我们在浏览器中看到的页面并不仅仅是HTML页面，而是css、js、html以及各种媒体资源综合在一起并有浏览器最终渲染而出页面，红框的部分，标出了在这个过程中所加载的各个资源。</p><h3 id="1-2-找到目标资源"><a href="#1-2-找到目标资源" class="headerlink" title="1.2 找到目标资源"></a>1.2 找到目标资源</h3><p>&emsp;&emsp;写过前端页面的朋友都知道CSS样式用过各种选择器来绑定到对应的节点上，那么我们也可以通过CSS的选择器来选中我们想要的元素，从而提取信息。Chrome中已经准备了CSS选择器神器，可以生成我们想要元素的选择器。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OThlMTA1YmZhOQ.jpg" alt="复制css选择器"></p><h3 id="1-3-解析页面"><a href="#1-3-解析页面" class="headerlink" title="1.3 解析页面"></a>1.3 解析页面</h3><p>&emsp;&emsp;这个时候要介绍页面解析神器<strong>pyquery</strong>，这个工具库可以通过我们所复制的CSS选择器，在 HTML 页面中查找对应元素，并且能很便捷地提取各种属性。</p><p>&emsp;&emsp;将代码改成如下这样：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pqurl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 开始解析</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把复制的选择器粘贴进去</span>    <span class="token comment" spellcheck="true"># 选择对应的节点</span>    imgElement <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'body > div:nth-child(5) > div > div > div:nth-child(2) > ul > li:nth-child(3) > a > img'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 提取属性，获取图片链接</span>    imgSrc <span class="token operator">=</span> imgElement<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将图片链接输出在屏幕上</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span></code></pre><h3 id="1-4-存储目标"><a href="#1-4-存储目标" class="headerlink" title="1.4 存储目标"></a>1.4 存储目标</h3><p>&emsp;&emsp;下载图片的过程其实和抓取HTML页面的流程是一样的，也是利用 <strong>requests</strong> 发送请求从而获取到数据流再保存到本地。</p><pre class=" language-Python"><code class="language-Python">import requestsfrom pyquery import PyQuery as pqurl = "https://www.nanrentu.cc/sgtp/"response = requests.get(url)if response.status_code == 200:    with open("result.html",'w',encoding="utf-8") as f:        f.write(response.text)    doc = pq(response.text)    imgElement = doc('body > div:nth-child(5) > div > div > div:nth-child(2) > ul > li:nth-child(3) > a > img')    imgSrc = imgElement.attr('src')    print(imgSrc)    # 下载图片    imgResponse = requests.get(imgSrc)    if imgResponse.status_code == 200:        # 填写文件路径 以二进制的形式写入文件        with open('./images/boy.jpg', 'wb') as f:            f.write(imgResponse.content)            f.close()</code></pre><h2 id="二、爬虫升级"><a href="#二、爬虫升级" class="headerlink" title="二、爬虫升级"></a>二、爬虫升级</h2><p>&emsp;&emsp;通过上述步骤我们只能获取到一张图片，那接下来，我们就<font color=#FF0000 >升级一波选择器</font>，将图片全部下载下来。</p><h3 id="2-1-重构代码"><a href="#2-1-重构代码" class="headerlink" title="2.1 重构代码"></a>2.1 重构代码</h3><p>&emsp;&emsp;为了以后写代码方便，要先进行一个简单的重构，让代码条理更清晰。</p><p>&emsp;&emsp;&emsp;1.增加入口函数</p><p>&emsp;&emsp;&emsp;2.封装对于图片的操作</p><p>&emsp;&emsp;重构后的代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">def</span> <span class="token function">saveImage</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgResponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>    fileName <span class="token operator">=</span> <span class="token string">"./images/%s.jpg"</span> <span class="token operator">%</span> name    <span class="token keyword">if</span> imgResponse<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imgResponse<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseUrl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        imgElement <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'body > div:nth-child(5) > div > div > div:nth-child(2) > ul > li:nth-child(3) > a > img'</span><span class="token punctuation">)</span>        imgSrc <span class="token operator">=</span> imgElement<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>        saveImage<span class="token punctuation">(</span>imgSrc<span class="token punctuation">,</span><span class="token string">'boy'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-2-升级选择器"><a href="#2-2-升级选择器" class="headerlink" title="2.2 升级选择器"></a>2.2 升级选择器</h3><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC8zLzUvMTcwYTg1OTk2NjY2MzAwZg.jpg" alt=""></p><p>&emsp;&emsp;多拿着鼠标点点这个调试台，一层层地看这个HTML文件的元素层级，找到其中相同重复的地方，这就是我们的突破口所在。</p><p>&emsp;&emsp;我们可以看出图片都在一个类名为 h-piclist 的 <ul> 标签中，那么我们可写出以下的选择器 <font color=#FF0000 ><code>.h-piclist &gt; li &gt; a &gt; img</code></font>。这样就选中了这一页所有的图片元素。接着用一个 for 循环遍历就可以了。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token comment" spellcheck="true"># 引入UUID为图片命名</span><span class="token keyword">import</span> uuid<span class="token keyword">def</span> <span class="token function">saveImage</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgResponse <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span>    fileName <span class="token operator">=</span> <span class="token string">"./images/%s.jpg"</span> <span class="token operator">%</span> name    <span class="token keyword">if</span> imgResponse<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imgResponse<span class="token punctuation">.</span>content<span class="token punctuation">)</span>            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    baseUrl <span class="token operator">=</span> <span class="token string">"https://www.nanrentu.cc/sgtp/"</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 选则这一页中所有的目标图片元素</span>        imgElements <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.h-piclist > li > a > img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 遍历这些图片元素</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> imgElements<span class="token punctuation">:</span>            imgSrc <span class="token operator">=</span> i<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>imgSrc<span class="token punctuation">)</span>            saveImage<span class="token punctuation">(</span>imgSrc<span class="token punctuation">,</span>uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hex<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="三、爬虫伪装"><a href="#三、爬虫伪装" class="headerlink" title="三、爬虫伪装"></a>三、爬虫伪装</h2><p>&emsp;&emsp;爬虫的伪装，目的是为了让对方网站更加确信来访者不是爬虫程序，而是一个活生生的人。人们通过操控浏览器来访问网站，那么爬虫程序只需要模仿浏览器就可以了。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100548544.png" alt=""></p><p>&emsp;&emsp;打开Chrome并打开调试台，切换到NetWork选项卡，此时访问 <a href="https://www.nanrentu.cc/sgtp/，" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/，</a> 这是时候会看到调试台里出现了很多链接信息，这么多链接到底哪个是我们所需要的呢？回想一下上一篇内容，首先是要获得HTML文档，再从此文档中提取出图片的链接，所以目标有了，就是找到浏览器获取到这个HTML文档的那个链接。</p><p>&emsp;&emsp;Chrome知道这么多链接信息肯定会让开发者陷入茫然，所以给链接进行了归类，点击上方Doc分类，再点击那唯一的一条链接，就会看到获取此HTML文档链接的详细信息了。此时我们关注主要Request Headers 这个里面的内容。浏览器通过http协议与服务器交互获取信息，爬虫是通过模仿浏览器发出http协议获取信息，其中最重要的一个模仿点就是Request Headers。</p><h3 id="3-1-http协议里面的“瓶瓶罐罐”"><a href="#3-1-http协议里面的“瓶瓶罐罐”" class="headerlink" title="3.1 http协议里面的“瓶瓶罐罐”"></a>3.1 http协议里面的“瓶瓶罐罐”</h3><pre class=" language-html"><code class="language-html">:authority: www.nanrentu.cc:method: GET   // 自定义请求头 请求方法:path: /sgtp/  // 自定义请求头 请求路径:scheme: https // 自定义请求头 请求方式// 所接受的内容格式accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9// 所接受的编码方式accept-encoding: gzip, deflate, br// 所接受的语言accept-language: zh-CN,zh;q=0.9// 缓存控制：告诉服务器客户端希望得到一个最新的资源cache-control: max-age=0cookie: UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661; CNZZDATA1274895726=1196969733-1583323670-%7C1583752625; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583756721sec-fetch-dest: documentsec-fetch-mode: navigatesec-fetch-site: nonesec-fetch-user: ?1// 屏蔽HTTPS页面出现HTTP请求警报upgrade-insecure-requests: 1user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</code></pre><p>&emsp;&emsp;这么多的信息不用都给爬虫加上，因为这网站的防爬措施等级不高，暂时只要关键的两个就可以了。</p><ul><li><font color=#FF0000 >cookie</font>： 这是存储在浏览器里面一段文本，有时包含了验证信息和一些特殊的请求信息</li><li><font color=#FF0000 >user-agent</font>：用于标识此请求是由什么工具所发出的</li></ul><pre class=" language-Python"><code class="language-Python"># 建立一个名叫headers的字典headers = {    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',    'cookie': 'UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; CNZZDATA1274895726=1196969733-1583323670-%7C1583925652; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661,1583926583; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583926583'}# 发送请求时带上请求头response = requests.get(baseUrl,headers=headers)</code></pre><h3 id="3-2-顺藤摸瓜"><a href="#3-2-顺藤摸瓜" class="headerlink" title="3.2 顺藤摸瓜"></a>3.2 顺藤摸瓜</h3><p>&emsp;&emsp;一个网站是由若干个网页组合而成的，网页中充满着各种超链接，从这网页链接到那个网页，如果我们想要更多图片，那就得首先分析出串联起他们那些超链接，然后就可以顺藤摸瓜咯。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100632511.png" alt=""></p><p>&emsp;&emsp;当把鼠标发放到标题上时，标题的颜色发生了变化，证明这一元素为超连接，点击标题浏览器会自动打开一个tab标签页，来显示网页，注意到下方的页码标签，是这些元素串联起了整个图集。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100726373.png" alt=""></p><p>&emsp;&emsp;点击“末页”观察url发生了什么变化</p><p>&emsp;&emsp;末页的url：<a href="https://www.nanrentu.cc/sgtp/36805_7.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805_7.html</a></p><p>&emsp;&emsp;首页的url：<a href="https://www.nanrentu.cc/sgtp/36805.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805.html</a></p><h4 id="3-2-1-提取标题链接"><a href="#3-2-1-提取标题链接" class="headerlink" title="3.2.1 提取标题链接"></a>3.2.1 提取标题链接</h4><p>&emsp;&emsp;打开调试台切换到Elements选项卡就能开始探索提取了。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316101245659.png" alt="提取标题链接"></p><h4 id="3-2-2-提取末页链接，得到组图页数"><a href="#3-2-2-提取末页链接，得到组图页数" class="headerlink" title="3.2.2 提取末页链接，得到组图页数"></a>3.2.2 提取末页链接，得到组图页数</h4><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/20200316100817850.png" alt=""></p><p>&emsp;&emsp;通过观察HTML元素结构，可发现包含末页的 <li> 标签为其父元素<ul>的倒数第二个子元素，所以可得出以下的css选择器</p><p>&emsp;&emsp;<font color=#FF0000 >.page &gt; ul &gt; li:nth-last-child(2) &gt; a</font></p><h4 id="3-2-3-根据首尾链接构造URL"><a href="#3-2-3-根据首尾链接构造URL" class="headerlink" title="3.2.3 根据首尾链接构造URL"></a>3.2.3 根据首尾链接构造URL</h4><p>&emsp;&emsp;为了构造url更加方便，我们可以把首页 <a href="https://www.nanrentu.cc/sgtp/36805.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805.html</a> 变为 <a href="https://www.nanrentu.cc/sgtp/36805_1.html" target="_blank" rel="noopener">https://www.nanrentu.cc/sgtp/36805_1.html</a>, 在浏览器中打开带有后缀的这个网址，依然能够成功访问到首页，不要问我为什么？这可能就是程序员之间的一种默契吧~</p><h4 id="3-2-4-存储图片，摸瓜成功"><a href="#3-2-4-存储图片，摸瓜成功" class="headerlink" title="3.2.4 存储图片，摸瓜成功"></a>3.2.4 存储图片，摸瓜成功</h4><pre class=" language-Python"><code class="language-Python">import requestsfrom pyquery import PyQuery as pqimport uuidheaders = {    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',    'cookie': 'UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; CNZZDATA1274895726=1196969733-1583323670-%7C1583925652; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661,1583926583; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583926583'}def saveImage(imgUrl,name):    imgResponse = requests.get(imgUrl)    fileName = "./images/%s.jpg" % name    if imgResponse.status_code == 200:        with open(fileName, 'wb') as f:            f.write(imgResponse.content)            f.close()def getPic(urlArray):    for url in urlArray:        res = requests.get(url,headers=headers)        if res.status_code == 200:            doc = pq(res.text)            imgSrc = doc('.info-pic-list > a > img').attr('src')            print(imgSrc)            saveImage(imgSrc,uuid.uuid1().hex)def createUrl(indexUrl,allPage):    baseUrl = indexUrl.split('.html')[0]    urlArray = []    for i in range(1,allPage):        tempUrl = baseUrl+"_"+str(i)+".html"        urlArray.append(tempUrl)    return urlArraydef getBoys(link):    # 摸瓜第1步：获取首页连接    picIndex = link.attr('href')    #  摸瓜第2步：打开首页，提取末页链接，得出组图页数    res = requests.get(picIndex,headers=headers)    print("当前正在抓取的 picIndex: " + picIndex)    if res.status_code == 200:        with open("picIndex.html",'w',encoding="utf-8") as f:            f.write(res.text)        doc = pq(res.text)        lastLink = doc('.page > ul > li:nth-last-child(2) > a').attr('href')        # 字符串分割，得出全部的页数        if(lastLink is None):            return        # 以.html 为分割符进行分割，取结果数组中的第一项        temp = lastLink.split('.html')[0]        # 再以下划线 _ 分割，取结果数组中的第二项,再转为数值型        allPage = int(temp.split('_')[1])        # 摸瓜第3步：根据首尾链接构造url        urlArray = createUrl(picIndex,allPage)        # 摸瓜第4步：存储图片，摸瓜成功        getPic(urlArray)def main():    baseUrl = "https://www.nanrentu.cc/sgtp/"    response = requests.get(baseUrl,headers=headers)    if response.status_code == 200:        with open("index.html",'w',encoding="utf-8") as f:            f.write(response.text)        doc = pq(response.text)        # 得到所有图集的标题连接        titleLinks = doc('.h-piclist > li > a').items()        # 遍历这些连接        for link in titleLinks:            getBoys(link)if __name__ == "__main__":    main()</code></pre><p>&emsp;&emsp;回顾整个爬虫程序，它是连续式流水线作业，每一步之间都是环环相扣，所以在写程序前自己一定要把整个流水线的每个环节都考虑清楚，把它们之间的顺序依赖关系化成一个简易的流程图，对着流程图再写程序就会清晰很多。我们可以把每一个模块都写成一个函数，先对函数做好单元测试，再把这些函数按顺序组合起来就行啦。</p><p>&emsp;&emsp;这个流程图只用单项箭头画出了获取一张图片的全部过程。</p><p><img src="/images/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzAzLzEyLzhlb2FEQS5wbmc.jpg" alt="爬虫流程"></p><h2 id="四、提高爬虫速率——多线程"><a href="#四、提高爬虫速率——多线程" class="headerlink" title="四、提高爬虫速率——多线程"></a>四、提高爬虫速率——多线程</h2><p>&emsp;&emsp;当然在整个程序当中，不可能一开始就搞个并行执行，串行是并行的基础，它们两者相辅相成。只有当程序出现分支（进入for循环）此时多线程可以派上用场，为每一个分支开启一个线程从而加速程序的执行。</p><p>&emsp;&emsp;对于萌新可以粗暴简单地理解：<font color=#FF0000 >没有for循环，就不用多线程</font>。</p><p>&emsp;&emsp;对于有一定编程经验的同学可以这样理解：<font color=#FF0000 >当程序中出现耗时操作时，要另开一个线程处理此操作。所谓耗时操做比如：文件IO、网络IO……</font>。</p><h3 id="4-1-定义一个线程类"><a href="#4-1-定义一个线程类" class="headerlink" title="4.1 定义一个线程类"></a>4.1 定义一个线程类</h3><p>&emsp;&emsp;Python3中提供了<a href="https://www.runoob.com/python3/python3-multithreading.html" target="_blank" rel="noopener">threading</a>模块用于帮助用户构建多线程程序。我们首先将基于此模块来自定义一个线程类，用于消灭遍历图集时所需要的等待。</p><h4 id="4-1-1-线程ID"><a href="#4-1-1-线程ID" class="headerlink" title="4.1.1 线程ID"></a>4.1.1 线程ID</h4><p>&emsp;&emsp;程序执行时会开启很多个线程，为了后期方便管理这些线程，可以在线程类的构造方法中添加threadID这一参数，为每个线程赋予唯一的ID号。</p><h4 id="4-1-2-所执行目标方法的参数"><a href="#4-1-2-所执行目标方法的参数" class="headerlink" title="4.1.2 所执行目标方法的参数"></a>4.1.2 所执行目标方法的参数</h4><p>&emsp;&emsp;一般来说定义一个线程类主要目的是让此线程去执行一个耗时的方法，所以这个线程类的构造方法中所需要传入所要执行目的方法的参数。比如 handleTitleLinks 这个类主要用来执行getBoys() （参见文末中的完整代码）这一方法。getBoys() 所需一个标题的连接作为参数，所以在handleTitleLinks的构造方法中也需要传入一个链接。</p><h4 id="4-1-3-调用目标方法"><a href="#4-1-3-调用目标方法" class="headerlink" title="4.1.3 调用目标方法"></a>4.1.3 调用目标方法</h4><p>&emsp;&emsp;线程类需要一个run(),在此方法中传入参数，调用所需执行的目标方法即可。</p><pre class=" language-Python"><code class="language-Python">class handleTitleLinks (threading.Thread):    def __init__(self,threadID,link):        threading.Thread.__init__(self)        self.threadID = threadID        self.link = link    def run(self):        print ("start handleTitleLinks：" + self.threadID)        getBoys(self.link)        print ("exit handleTitleLinks：" + self.threadID)</code></pre><h3 id="4-2-实例化线程对象代替目标方法"><a href="#4-2-实例化线程对象代替目标方法" class="headerlink" title="4.2 实例化线程对象代替目标方法"></a>4.2 实例化线程对象代替目标方法</h3><p>&emsp;&emsp;当把线程类定义好之后，找到曾经耗时的目标方法，实例化一个线程对象将其代替即可。</p><pre class=" language-Python"><code class="language-Python">def main():    baseUrl = "https://www.nanrentu.cc/sgtp/"    response = requests.get(baseUrl,headers=headers)    if response.status_code == 200:        with open("index.html",'w',encoding="utf-8") as f:            f.write(response.text)        doc = pq(response.text)        # 得到所有图集的标题连接        titleLinks = doc('.h-piclist > li > a').items()        # 遍历这些连接        for link in titleLinks:            # 替换目标方法，开启线程            handleTitleLinks(uuid.uuid1().hex,link).start()            # getBoys(link)</code></pre><h3 id="4-3-如法炮制"><a href="#4-3-如法炮制" class="headerlink" title="4.3 如法炮制"></a>4.3 如法炮制</h3><p>&emsp;&emsp;我们已经定义了一个线程去处理每个图集，但是在处理每个图集的过程中还会有分支（参见程序并行执行图）去下载图集中的图片。此时需要再定义一个线程用来下载图片，即定义一个线程去替换getImg()。</p><pre class=" language-Python"><code class="language-Python">class handleGetImg (threading.Thread):    def __init__(self,threadID,urlArray):        threading.Thread.__init__(self)        self.threadID = threadID        self.url = url    def run(self):        print ("start handleGetImg：" + self.threadID)        getPic(self.urlArray)        print ("exit handleGetImg：" + self.threadID)</code></pre><h3 id="4-4-完整代码"><a href="#4-4-完整代码" class="headerlink" title="4.4 完整代码"></a>4.4 完整代码</h3><pre class=" language-Python"><code class="language-Python">#!/usr/bin/python3import requestsfrom pyquery import PyQuery as pqimport uuidimport threadingheaders = {    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36',    'cookie': 'UM_distinctid=170a5a00fa25bf-075185606c88b7-396d7407-100200-170a5a00fa3507; CNZZDATA1274895726=1196969733-1583323670-%7C1583925652; Hm_lvt_45e50d2aec057f43a3112beaf7f00179=1583326696,1583756661,1583926583; Hm_lpvt_45e50d2aec057f43a3112beaf7f00179=1583926583'}def saveImage(imgUrl,name):    imgResponse = requests.get(imgUrl)    fileName = "./images/%s.jpg" % name    if imgResponse.status_code == 200:        with open(fileName, 'wb') as f:            f.write(imgResponse.content)            f.close()# 根据链接找到图片并下载           def getImg(url):    res = requests.get(url,headers=headers)    if res.status_code == 200:        doc = pq(res.text)        imgSrc = doc('.info-pic-list > a > img').attr('src')        print(imgSrc)        saveImage(imgSrc,uuid.uuid1().hex)# 遍历组图链接def getPic(urlArray):    for url in urlArray:        # 替换方法        handleGetImg(uuid.uuid1().hex,url).start()        # getImg(url)def createUrl(indexUrl,allPage):    baseUrl = indexUrl.split('.html')[0]    urlArray = []    for i in range(1,allPage):        tempUrl = baseUrl+"_"+str(i)+".html"        urlArray.append(tempUrl)    return urlArraydef getBoys(link):    # 摸瓜第1步：获取首页连接    picIndex = link.attr('href')    #  摸瓜第2步：打开首页，提取末页链接，得出组图页数    res = requests.get(picIndex,headers=headers)    print("当前正在抓取的 picIndex: " + picIndex)    if res.status_code == 200:        with open("picIndex.html",'w',encoding="utf-8") as f:            f.write(res.text)        doc = pq(res.text)        lastLink = doc('.page > ul > li:nth-last-child(2) > a').attr('href')        # 字符串分割，得出全部的页数        if(lastLink is None):            return        # 以.html 为分割符进行分割，取结果数组中的第一项        temp = lastLink.split('.html')[0]        # 再以下划线 _ 分割，取结果数组中的第二项,再转为数值型        allPage = int(temp.split('_')[1])        # 摸瓜第3步：根据首尾链接构造url        urlArray = createUrl(picIndex,allPage)        # 摸瓜第4步：存储图片，摸瓜成功        getPic(urlArray)def main():    baseUrl = "https://www.nanrentu.cc/sgtp/"    response = requests.get(baseUrl,headers=headers)    if response.status_code == 200:        with open("index.html",'w',encoding="utf-8") as f:            f.write(response.text)        doc = pq(response.text)        # 得到所有图集的标题连接        titleLinks = doc('.h-piclist > li > a').items()        # 遍历这些连接        for link in titleLinks:            # 替换方法，开启线程            handleTitleLinks(uuid.uuid1().hex,link).start()            # getBoys(link)# 处理组图链接的线程类class handleTitleLinks (threading.Thread):    def __init__(self,threadID,link):        threading.Thread.__init__(self)        self.threadID = threadID        self.link = link    def run(self):        print ("start handleTitleLinks：" + self.threadID)        getBoys(self.link)        print ("exit handleTitleLinks：" + self.threadID)# 下载图片的线程类class handleGetImg (threading.Thread):    def __init__(self,threadID,url):        threading.Thread.__init__(self)        self.threadID = threadID        self.url = url    def run(self):        print ("start handleGetImg：" + self.threadID)        getImg(self.url)        print ("exit handleGetImg：" + self.threadID)if __name__ == "__main__":    main()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业二】逻辑回归-收入分类</title>
      <link href="/2020/04/22/zuo-ye-er-luo-ji-hui-gui-shou-ru-fen-lei/"/>
      <url>/2020/04/22/zuo-ye-er-luo-ji-hui-gui-shou-ru-fen-lei/</url>
      
        <content type="html"><![CDATA[<h2 id="一、作业要求"><a href="#一、作业要求" class="headerlink" title="一、作业要求"></a>一、作业要求</h2><p>&emsp;&emsp;根据收集来的资料，判断每个人其年收入是否高于50000美元，用<strong>Logistic regression</strong>和<strong>Generative model</strong>两种方法来实现</p><p>&emsp;&emsp;数据下载地址：<a href="https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A" target="_blank" rel="noopener">https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A</a> </p><p>&emsp;&emsp;提取码：vcj8</p><h2 id="二、Logistic-regression实现"><a href="#二、Logistic-regression实现" class="headerlink" title="二、Logistic regression实现"></a>二、<strong>Logistic regression</strong>实现</h2><pre class=" language-Python"><code class="language-Python">import numpy as npimport matplotlib as mplimport matplotlib.pyplot as pltimport pandas as pdnp.random.seed(0)</code></pre><h3 id="2-1-添加路径"><a href="#2-1-添加路径" class="headerlink" title="2.1 添加路径"></a>2.1 添加路径</h3><pre class=" language-python"><code class="language-python">X_train_file <span class="token operator">=</span> <span class="token string">'./data/X_train'</span>Y_train_file <span class="token operator">=</span> <span class="token string">'./data/Y_train'</span>X_test_file <span class="token operator">=</span> <span class="token string">'./data/X_test'</span>output_file <span class="token operator">=</span> <span class="token string">'./output/output_{}.csv'</span>   <span class="token comment" spellcheck="true">#用于测试集的预测输出</span></code></pre><h3 id="2-2-加载数据"><a href="#2-2-加载数据" class="headerlink" title="2.2 加载数据"></a>2.2 加载数据</h3><p>&emsp;&emsp;加载数据,直接导入已经处理好的数据X_train,Y_train,X_test</p><pre class=" language-Python"><code class="language-Python">def _datapreprocess(X_train_file, Y_train_file, X_test_file):    with open(X_train_file) as f:        next(f)        # s.strip(rm) ：删除s字符串中开头、结尾处，位于 rm删除序列的字符        # split ：分割；[1:]是取第1列之后的        X_train_all = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)    with open(Y_train_file) as f:        next(f)        Y_train_all = np.array([line.strip('\n').split(',')[1]  for line in f], dtype=float)    with open(X_test_file) as f:        next(f)        X_test = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)    return X_train_all, Y_train_all, X_test</code></pre><h3 id="2-3-归一化"><a href="#2-3-归一化" class="headerlink" title="2.3 归一化"></a>2.3 归一化</h3><p>&emsp;&emsp;编写一个_normalize()函数对数据进行预处理：归一化，即每个数据特征的均值和标准差进行归一化</p><pre class=" language-Python"><code class="language-Python">def _normalize(X, train=True, specified_column=None, X_mean=None, X_std=None):    # 此函数对 X 的特定列进行归一化    # 均值和方差在处理测试数据时，还会再用    # 参数解析：    #     X：要被处理的数据    #     train：为true时，处理训练数据；为false时，处理测试数据    #     specified_column：被归一化的特定列的索引，若为false，则所有列都被归一化    if specified_column == None:        #为每个数据添加索值        specified_column = np.arange(X.shape[1])    if train:        #求取每个数据的平均值和标准差        X_mean = np.mean(X[:, specified_column], 0).reshape(1,-1)        X_std = np.std(X[:, specified_column], 0).reshape(1,-1)    #归一化数据        X[:, specified_column] = (X[:, specified_column] - X_mean) / (X_std + 1e-8)    #返回归一化后的数据，均值，标准差    return X, X_mean, X_std</code></pre><h3 id="2-4-分割验证集"><a href="#2-4-分割验证集" class="headerlink" title="2.4 分割验证集"></a>2.4 分割验证集</h3><p>&emsp;&emsp;根据valid_ratio来划分训练集和验证集</p><pre class=" language-Python"><code class="language-Python">def _train_valid_split(X, Y, valid_ratio = 0.25):    train_size = int(len(X) * (1 - valid_ratio))    X_train = X[:train_size]    X_valid = X[train_size:]    Y_train = Y[:train_size]    Y_valid = Y[train_size:]    return X_train, X_valid, Y_train, Y_valid</code></pre><h3 id="2-5-打乱数据"><a href="#2-5-打乱数据" class="headerlink" title="2.5 打乱数据"></a>2.5 打乱数据</h3><p>&emsp;&emsp;打乱数据顺序，类似于重新洗牌，进行分批次训练（即每次将一部分数据喂给模型进行训练，计算损失）</p><pre class=" language-Python"><code class="language-Python">#打乱数据顺序，重新为minibatch分配def _shuffle(X, Y):    # 该函数打散两个等长的list/array----- X 和 Y    randomize = np.arange(len(X))  # 返回len(X)的序列    np.random.shuffle(randomize)    X_train = X[randomize]    Y_train = Y[randomize]    return X_train, Y_train</code></pre><h3 id="2-6-激活函数"><a href="#2-6-激活函数" class="headerlink" title="2.6 激活函数"></a>2.6 激活函数</h3><pre class=" language-Python"><code class="language-Python">def _sigmoid(z):    # numpy.clip(a, a_min, a_max, out=None): clip这个函数将将数组中的元素限制在a_min, a_max之间，    # 大于a_max的就使得它等于 a_max，小于a_min,的就使得它等于a_min。    return np.clip(1 / (1.0 + np.exp(-z)), 1e-8, 1-(1e-8)) # 相当于结果是在 0 ~ 1</code></pre><h3 id="2-7-前向传播"><a href="#2-7-前向传播" class="headerlink" title="2.7 前向传播"></a>2.7 前向传播</h3><p>&emsp;&emsp;前向传播然后利用sigmoid激活函数计算激活值</p><pre class=" language-Python"><code class="language-Python">def _f(X, w, b):    # logistic regression    # 参数解析：    #     X：输入数据-------> [batch_size, data_dimension]    #     w: 权重-----------> [data_dimension, ]    #     b: 偏置 ----------> 标量    # 输出：    #     预测概率    output = _sigmoid(np.matmul(X, w) + b) #  np.matmul：两个numpy数组的矩阵相乘    return output</code></pre><p>&emsp;&emsp;<font color=#FF0000 >matmul与dot</font>的差异主要在两个方面：</p><p>&emsp;&emsp;&emsp;（1）不允许乘标量</p><p>&emsp;&emsp;&emsp;（2）stack的矩阵将矩阵按元素对待被一起广播</p><h3 id="2-8-预测"><a href="#2-8-预测" class="headerlink" title="2.8 预测"></a>2.8 预测</h3><pre class=" language-Python"><code class="language-Python">def _predict(X, w, b):    predict = np.round(_f(X, w, b)).astype(np.int)   # round(x) ：返回浮点数x的四舍五入值。    return predict</code></pre><h3 id="2-9-准确度"><a href="#2-9-准确度" class="headerlink" title="2.9 准确度"></a>2.9 准确度</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422212816090.png" alt="acc计算公式"></p><pre class=" language-Python"><code class="language-Python">def _accuracy(Y_pred, Y_label):    acc = 1 - np.mean(np.abs(Y_pred - Y_label))    return acc</code></pre><h3 id="2-10-交叉熵"><a href="#2-10-交叉熵" class="headerlink" title="2.10 交叉熵"></a>2.10 交叉熵</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213215418.png" alt="均方差"></p><p>   &emsp;&emsp;<strong>逻辑回归配合MSE损失函数时，采用梯度下降法进行学习时，会出现模型一开始训练时，学习速率非常慢的情况</strong></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213405553.png" alt="交叉熵-二分类"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213434442.png" alt="交叉熵-多分类"></p><pre class=" language-Python"><code class="language-Python">def _cross_entropy_loss(y_pred, Y_label): # 在计算交叉熵时，后面还要再除个 N     cross_entropy = -np.dot(Y_label, np.log(y_pred)) - np.dot((1 - Y_label), np.log(1 - y_pred))    return cross_entropy</code></pre><h3 id="2-11-计算梯度"><a href="#2-11-计算梯度" class="headerlink" title="2.11 计算梯度"></a>2.11 计算梯度</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422213621460.png" alt="梯度更新"></p><pre class=" language-Python"><code class="language-Python">def _gradient(X, Y_label, w, b):    y_pred = _f(X, w, b)    pred_error = Y_label - y_pred    w_grad = -np.sum(pred_error * X.T, 1)  # error与X.T乘完后再加 1    b_grad = -np.sum(pred_error)    return w_grad, b_grad</code></pre><h3 id="2-12-训练"><a href="#2-12-训练" class="headerlink" title="2.12 训练"></a>2.12 训练</h3><p>&emsp;    我们使用小批次梯度下降法来训练。训练资料被分成许多小批次，针封每一个小批次，我们分别计算其梯度以及损失，并根据该批次来更新模型的参数。当一次epoch完成，也就是整个训练集的所有小批次都被使用过一次以后，我们将所有训练资料打散并且重新分成新的小批次，进行下一个epoch，直到事先设定的epochs数量完成为止。</p><p>&emsp;&emsp;针对每个epoch训练的步骤：for epoch in range(epochs)<br>    &emsp;&emsp;&emsp;&emsp;1. 打散：对X_train，Y_train打散<br>    &emsp;&emsp;&emsp;&emsp;2. 分批次训练：for idx in range(int(np.floor(train_size / batch_size)))<br>        &emsp;&emsp;&emsp;&emsp;2.1 取小批次的 X 和 Y<br>        &emsp;&emsp;&emsp;&emsp;2.2 计算小批次的 w 和 b<br>        &emsp;&emsp;&emsp;&emsp;2.3 更新 w 和 b<br>    &emsp;&emsp;&emsp;&emsp;3.计算训练集和验证集的准确率和损失值<br>        &emsp;&emsp;&emsp;&emsp;3.1 计算y_pred(float型) ——&gt; 计算交叉熵时用<br>        &emsp;&emsp;&emsp;&emsp;3.2 计算Y_pred（四舍五入） ——&gt; 计算准确率时用<br>        &emsp;&emsp;&emsp;&emsp;3.3 计算准确率<br>        &emsp;&emsp;&emsp;&emsp;3.4 计算损失值</p><pre class=" language-Python"><code class="language-Python">def train(X_train, Y_train, X_valid, Y_valid, data_dim, train_size, valid_size, epochs, batch_size, lr):    # 将w和b初始化为0    w = np.zeros((data_dim))    #  w.shape -------> (510, )    b = np.zeros((1, ))         #  b.shape -------> (1, )    epochs = epochs    batch_size = batch_size    lr = lr    # 创建列表用来保存训练集和验证集的损失值和准确度    train_loss = []    valid_loss = []    train_acc = []    valid_acc = []    # 用来更新学习率    step = 1    # 训练    for epoch in range(epochs):        # 每个epoch都会重新洗牌        X_train, Y_train = _shuffle(X_train, Y_train)        # 分批次训练        for idx in range(int(np.floor(train_size / batch_size))):            X = X_train[idx*batch_size : (idx + 1)*batch_size]            Y = Y_train[idx*batch_size : (idx + 1)*batch_size]            # 计算梯度值            w_grad, b_grad = _gradient(X, Y, w, b)            # 更新参数w和b            # 学习率随着迭代时间增加而减少            w -= lr / np.sqrt(step) * w_grad            b -= lr / np.sqrt(step) * b_grad            step += 1        # 参数总共更新了max_iter × （train_size/batch_size）次             # 计算训练集的损失值和准确度        y_train_pred = _f(X_train, w, b)        Y_train_pred = np.round(y_train_pred)        train_acc.append(_accuracy(Y_train_pred, Y_train))        train_loss.append(_cross_entropy_loss(y_train_pred, Y_train) / train_size)        # 计算验证集的损失值和准确度        y_valid_pred = _f(X_valid, w, b)        Y_valid_pred = np.round(y_valid_pred)        valid_acc.append(_accuracy(Y_valid_pred, Y_valid))        valid_loss.append(_cross_entropy_loss(y_valid_pred, Y_valid) / valid_size)    return train_acc, train_loss, valid_acc, valid_loss, w, b</code></pre><h3 id="2-13-画损失和准确率曲线"><a href="#2-13-画损失和准确率曲线" class="headerlink" title="2.13 画损失和准确率曲线"></a>2.13 画损失和准确率曲线</h3><pre class=" language-Python"><code class="language-Python">def plot_curve(train_acc, train_loss, valid_acc, valid_loss):    # train_acc, train_loss, valid_acc, valid_loss长度都为epochs    # loss    plt.plot(train_loss)    plt.plot(valid_loss)    plt.title('Loss')    plt.legend(['train', 'valid'])    plt.savefig('./output/loss.png')    plt.show()    # acc    plt.plot(train_acc)    plt.plot(valid_acc)    plt.title('Acc')    plt.legend(['train', 'valid'])    plt.savefig('./output/acc.png')    plt.show()</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422214032989.png" alt="损失和准确率曲线图"></p><h3 id="2-14-预测"><a href="#2-14-预测" class="headerlink" title="2.14 预测"></a>2.14 预测</h3><pre class=" language-Python"><code class="language-Python">def test(X_test, w, b, output_file, X_test_file):    predictions = _predict(X_test, w, b)    with open(output_file.format('logistic'), 'w') as f:        f.write('id,label\n')        for i, label in enumerate(predictions):            f.write('{},{}\n'.format(i, label))    # 打印一下数据前10项特征对应的权重    ind = np.argsort(np.abs(w))[::-1]    with open(X_test_file) as f:        content = f.readline().strip('\n').split(',')    features = np.array(content)    for i in ind[0:10]:        print(features[i], w[i])</code></pre><h3 id="2-15-main-函数"><a href="#2-15-main-函数" class="headerlink" title="2.15 main()函数"></a>2.15 main()函数</h3><pre class=" language-Python"><code class="language-Python">def main():    # 1.添加路径    X_train_file = './data/X_train'    Y_train_file = './data/Y_train'    X_test_file = './data/X_test'    output_file = './output/output_{}.csv'   #用于测试集的预测输出    # 2.加载数据    X_train_all, Y_train_all, X_test = _datapreprocess(X_train_file, Y_train_file, X_test_file)    #print(X_train_all.shape[1], Y_train_all.shape, X_test.shape)    # 3.归一化X_train 和 X_test数据    X_train_all, X_mean, X_std = _normalize(X_train_all, train=True)    X_test, _, _ = _normalize(X_test, train=False, specified_column=None, X_mean=X_mean, X_std=X_std )    # 4.设置训练集-验证集    valid_ratio = 0.1    X_train, X_valid, Y_train, Y_valid = _train_valid_split(X_train_all, Y_train_all, valid_ratio=valid_ratio)    train_size = X_train.shape[0]    valid_size = X_valid.shape[0]    test_size = X_test.shape[0]    data_dim = X_train.shape[1]#     print('Size of training set:{}'.format(train_size))#     print('Size of validation set:{}'.format(valid_size))#     print('Size of testing set:{}'.format(test_size))#     print('Dimension of data:{}'.format(data_dim))    # 5.训练  设置其他超参数（迭代次数，分批次大小，学习率）    epochs = 10    batch_size = 8    lr = 0.2    train_acc, train_loss, valid_acc, valid_loss, w, b = train(X_train,                                                                Y_train,                                                                X_valid,                                                                Y_valid,                                                                data_dim,                                                               train_size,                                                               valid_size,                                                               epochs,                                                                batch_size,                                                                lr)#     print('Training loss:{}'.format(train_loss[-1]))#     print('Validation loss:{}'.format(valid_loss[-1]))#     print('Training accuracy:{}'.format(train_acc[-1]))#     print('Validation accuracy:{}'.format(valid_acc[-1]))    # 6.画准确率曲线    plot_curve(train_acc, train_loss, valid_acc, valid_loss)    # 7.预测    test(X_test, w, b, output_file, X_test_file)if __name__ == '__main__':    main()</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215828322.png" alt="逻辑回归结果"></p><h2 id="三、Generative-model实现"><a href="#三、Generative-model实现" class="headerlink" title="三、Generative model实现"></a>三、<strong>Generative model</strong>实现</h2><p>&emsp;&emsp;生成概率模型其实是先假设数据的概率分布（正太、伯努利、泊松），然后用概率公式去计算x所属于的类型p(C1∣x)</p><p>&emsp;&emsp;一般的，我们假设x的分布为高斯分布（最为常见的概率分布模型），为什么会往往选择高斯分布呢，概率论中的中心极限定理告诉我们答案。</p><p>&emsp;&emsp;一维的概率分布一般是钟形曲线，大家都比较了解，那么高维的分布是（均值为μ,协方差为∑）：</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422214527857.png" alt="高维高斯分布函数"></p><p>&emsp;&emsp;如果假设高斯分布是独立的，则所用方法就是朴素贝叶斯分类。理论细节推导，请参考李宏毅老师的教学：Classification (v3).pdf</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422214747409.png" alt="朴素贝叶斯分类"></p><p>&emsp;&emsp;Generative model方法跟Logistic regression方法类似，不同之处在于Generative model可以直接计算出w和b的最佳解，而Logistic regression是将w和b进行初始化，通过迭代训练来更新w和b。</p><h3 id="3-1-加载数据"><a href="#3-1-加载数据" class="headerlink" title="3.1 加载数据"></a>3.1 加载数据</h3><p>&emsp;&emsp;训练集与测试集的处理方式跟logistic regression一模一样，然而因为generative model有可解析的最佳解，因此不必使用到验证集（valid_ratio = 0）</p><pre class=" language-Python"><code class="language-Python"># 加载数据,我们直接导入已经处理好的数据X_train,Y_train,X_testwith open(X_train_file) as f:    next(f)    # s.strip(rm) ：删除s字符串中开头、结尾处，位于 rm删除序列的字符    # split ：分割；[1:]是取第1列之后的    X_train_all = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)with open(Y_train_file) as f:    next(f)    Y_train_all = np.array([line.strip('\n').split(',')[1]  for line in f], dtype=float)with open(X_test_file) as f:    next(f)    X_test = np.array([line.strip('\n').split(',')[1:]  for line in f], dtype=float)# 归一化数据X_train_all, X_mean, X_std = _normalize(X_train_all, train=True)X_test, _, _ = _normalize(X_test, train=False, specified_column=None, X_mean=X_mean, X_std=X_std )X_train, X_valid, Y_train, Y_valid = _train_valid_split(X_train_all, Y_train_all, valid_ratio=0)train_size = X_train.shape[0]valid_size = X_valid.shape[0]test_size = X_test.shape[0]data_dim = X_train.shape[1]print(X_train_all.shape[1], Y_train_all.shape, X_test.shape)print('Size of training set:{}'.format(train_size))print('Size of validation set:{}'.format(valid_size))print('Size of testing set:{}'.format(test_size))print('Dimension of data:{}'.format(data_dim))</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215003200.png" alt="数据集大小"></p><h3 id="3-2-分别计算两个类别的均值和协方差"><a href="#3-2-分别计算两个类别的均值和协方差" class="headerlink" title="3.2 分别计算两个类别的均值和协方差"></a>3.2 分别计算两个类别的均值和协方差</h3><p>&emsp;&emsp;我们假设数据点服从高维高斯分布，那么，我们需要找到这个高斯分布的函数，也就是为μ,和协方差∑。<br> &emsp;&emsp;这个函数满足，它的所有数据点的生成概率是最大的，假设有79个数据点，他的高斯函数的求法</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215158987.png" alt="求高斯函数的均值和协方差"></p><pre class=" language-Python"><code class="language-Python"># 计算均值X_train_0 = np.array([x for x, y in zip(X_train_all, Y_train_all) if y == 0])X_train_1 = np.array([x for x, y in zip(X_train_all, Y_train_all) if y == 1])print('X_train_0.shape:', X_train_0.shape, '\n', 'X_train_1.shape:', X_train_1.shape)mean_0 = np.mean(X_train_0, axis= 0)mean_1 = np.mean(X_train_1, axis= 0)print('mean_0.shape:', mean_0.shape, '\n', 'mean_1.shape:', mean_1.shape)# 计算协方差(两类共享一个协方差)cov_0 = np.zeros((data_dim, data_dim))cov_1 = np.zeros((data_dim, data_dim))for x in X_train_0:    cov_0 += np.dot(np.transpose([x - mean_0]), [x - mean_0]) / X_train_0.shape[0]for x in X_train_1:    cov_1 += np.dot(np.transpose([x - mean_1]), [x - mean_1]) / X_train_1.shape[0]# 两类共享一个协方差cov = (cov_0 * X_train_0.shape[0] + cov_1 * X_train_1.shape[0]) / (X_train_0.shape[0] + X_train_1.shape[0])</code></pre><h3 id="3-3-计算-w-和-b"><a href="#3-3-计算-w-和-b" class="headerlink" title="3.3 计算 w 和 b"></a>3.3 计算 w 和 b</h3><p>&emsp;&emsp;权重矩阵与偏差向量可以直接被计算出来<br>&emsp;&emsp;下面是计算w和b的原理图，由最大似然估计和贝叶斯公式推导而来，有兴趣的同学可以自己按照视频内容推导一下</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215411870.png" alt="计算 w 和 b"></p><pre class=" language-Python"><code class="language-Python"># 计算协方差矩阵的逆# 由于协方差矩阵可能几乎是奇异的，因此np.linalg.inv() 可能会产生较大的数值误差# 通过SVD分解，可以高效准确地求逆矩阵u, s, v = np.linalg.svd(cov, full_matrices=False)inv = np.matmul(v.T * 1 / s, u.T)# 计算 w 和 b w = np.dot(inv, mean_0 - mean_1)b = (-0.5) * np.dot(mean_0, np.dot(inv, mean_0)) + 0.5 * np.dot(mean_1, np.dot(inv, mean_1))\            + np.log(float(X_train_0.shape[0]) / X_train_1.shape[0])# 计算训练集上的准确率Y_train_pred = 1- _predict(X_train , w, b)train_acc = _accuracy(Y_train_pred, Y_train)print(train_acc)</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215519240.png" alt="生成模型的准确率结果"></p><h3 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h3><pre class=" language-Python"><code class="language-Python"># 预测 测试集的labelpredictions = 1 - _predict(X_test, w, b)with open(output_file.format('generative'), 'w') as f:    f.write('id,label\n')    for i, label in  enumerate(predictions):        f.write('{},{}\n'.format(i, label))# 打印一下数据前10项特征对应的权重ind = np.argsort(np.abs(w))[::-1]with open(X_test_file) as f:    content = f.readline().strip('\n').split(',')features = np.array(content)for i in ind[0:10]:    print(features[i], w[i])</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%BA%8C%E3%80%91%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92-%E6%94%B6%E5%85%A5%E5%88%86%E7%B1%BB/image-20200422215706038.png" alt="生成模型测试结果"></p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p><p>&emsp;&emsp;</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 逻辑回归 </tag>
            
            <tag> 概率生成模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-二分法】二分搜索法</title>
      <link href="/2020/04/18/shu-ju-jie-gou-er-fen-fa-er-fen-sou-suo-fa/"/>
      <url>/2020/04/18/shu-ju-jie-gou-er-fen-fa-er-fen-sou-suo-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-二分搜索法定义"><a href="#1-二分搜索法定义" class="headerlink" title="1.二分搜索法定义"></a>1.二分搜索法定义</h3><p>&emsp;&emsp;<strong>二分查找</strong>（英语：binary search），也称<strong>折半搜索</strong>（英语：half-interval search）、<strong>对数搜索</strong>（英语：logarithmic search），是一种在<font color=#FF0000 ><strong>有序数组</strong></font>中查找某一特定元素的<font color=#FF0000 ><strong>搜索算法</strong></font>。</p><p>&emsp;&emsp;搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；</p><p>&emsp;&emsp;如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。</p><p>&emsp;&emsp;如果在某一步骤数组为空，则代表找不到。</p><p>&emsp;&emsp;这种搜索算法每一次比较都使搜索范围缩小一半。</p><h3 id="2-二分搜索法代码"><a href="#2-二分搜索法代码" class="headerlink" title="2.二分搜索法代码"></a>2.二分搜索法代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;对于上面这段代码而言，问题出在第 6 行代码处：</p><pre class=" language-java"><code class="language-java">mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;这句代码在 min 和 max 很大的时候，会出现溢出的情况，从而导致数组访问出错。</p><p>&emsp;&emsp;那怎么改进呢？一般的做法是这样的：<font color=#FF0000 ><strong>将加法变成减法</strong></font>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 防止溢出</span>            mid <span class="token operator">=</span>  min <span class="token operator">+</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;还有一种更高逼格的写法，也是官方的二分搜索法的实现写法：使用 <font color=#FF0000 ><strong>位运算</strong></font>。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无符号位运算符的优先级较低，先括起来</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用"+"，然后"无符号右移(java才有)"是推荐写法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-二分搜索模板"><a href="#3-二分搜索模板" class="headerlink" title="3.二分搜索模板"></a>3.二分搜索模板</h3><p>&emsp;&emsp;参考文章：<a href="https://mp.weixin.qq.com/s/1ojQ9aHdTTz8-Vt9fSAI8w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1ojQ9aHdTTz8-Vt9fSAI8w</a></p><h4 id="3-1模板一"><a href="#3-1模板一" class="headerlink" title="3.1模板一"></a>3.1模板一</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 防止计算越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;二分查找算法如果没有实现好，会有两种后果：</p><ul><li>&emsp;&emsp;<font color=#FF0000 >死循环</font></li><li>&emsp;&emsp;<font color=#FF0000 >跳过本该查找的位置</font></li></ul><h4 id="3-2-模板二"><a href="#3-2-模板二" class="headerlink" title="3.2 模板二"></a>3.2 模板二</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>根据条件返回 end 或者 start</code></pre><p>&emsp;&emsp;但是这个模版也有不好的地方，如果输入数组是 [1]，那么 while 循环结束后，要么是 start 超出数组范围，要么是 end 变成 -1，也就是说最后你不仅需要判断 start 和 end 对应的元素是不是要找的元素，还需要判断 start 和 end 是否是在合法的范围内，如果你这样做了，程序不会出错，你习惯了上面的模版，你可以继续使用，但是要知道会存在这么一个情况。</p><h4 id="3-3-模板三"><a href="#3-3-模板三" class="headerlink" title="3.3 模板三"></a>3.3 模板三</h4><ul><li><p>（1）<font color=#FF0000 ><strong>首先把循环可以进行的条件写成 <code>while(left &lt; right)</code>，在退出循环的时候，一定有 <code>left == right</code> 成立，此时返回 <code>left</code> 或者 <code>right</code> 都可以</strong></font></p></li><li><p>（2）思考左、右边界，如果左、右边界不包括目标数值，会导致错误结果</p><ul><li>&emsp;如果 <code>left</code> 和 <code>right</code> 表示的是数组的索引，就要考虑“索引是否有效” ，即“索引是否越界” 是重要的定界依据；</li><li>&emsp;左右边界一定要包括目标元素。</li></ul></li><li><p>（3）中位数先写 <code>int mid = (left + right) &gt;&gt;&gt; 1 ;</code> 根据循环里分支的编写情况，再做调整</p><p>&emsp;当数组的元素个数是偶数的时候，中位数有左中位数和右中位数之分。</p><p>&emsp;使用 <code>int mid = left + (right - left) / 2 ;</code> 得到左中位数的索引；</p><p>&emsp;使用 <code>int mid = left + (right - left + 1) / 2 ;</code> 得到右中位数的索引。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            等价于<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            等价于<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;什么时候使用左中位数，什么时候使用右中位数呢？选中位数的依据是为了避免死循环，得根据分支的逻辑来选择中位数，而分支逻辑的编写也有技巧。</p><ul><li>（4）先写逻辑上容易想到的分支逻辑，这个分支逻辑通常是<font color=#FF0000 >排除中位数的逻辑</font></li><li>（5）循环内只写两个分支，一个分支排除中位数，另一个分支不排除中位数，循环中不单独对中位数作判断</li></ul><p>&emsp;&emsp;既然是“夹逼”法，没有必要在每一轮循环开始前单独判断当前中位数是否是目标元素，因此分支数少了一支，代码执行效率更高。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640.webp" alt="二分查找模板"></p><p>&emsp;&emsp;还以 LeetCode 第 35 题为例，通过之前的分析，我们需要找到“大于或者等于目标值的第 1 个数的<strong>索引</strong>”。对于这道题而言：</p><p>&emsp;&emsp;1. 如果中位数小于目标值，它就应该被排除，左边界 <code>left</code> 就至少是 <code>mid + 1</code>；</p><p>&emsp;&emsp;2. 如果中位数大于等于目标值，还不能够肯定它就是我们要找的数，因为要找的是等于目标值的第 1 个数的<strong>索引</strong>，<strong>中位数以及中位数的左边都有可能是符合题意的数</strong>，因此右边界就不能把 <code>mid</code> 排除，因此右边界 <code>right</code> 至多是 <code>mid</code>，此时右边界不向左边收缩。</p><ul><li>（6）根据<font color=#FF0000 >分支逻辑选择中位数的类型</font>，可能是左中位数，也可能是右位数，选择的标准是避免死循环</li></ul><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640.jpg" alt="造成死循环的代码"></p><p><strong>&emsp;&emsp;选择中位数的依据是</strong>：避免出现死循环。我们需要确保：</p><blockquote><p>1、如果分支的逻辑，在选择左边界的时候，不能排除中位数，那么中位数就选“右中位数”，只有这样区间才会收缩，否则进入死循环；</p><p>2、同理，如果分支的逻辑，在选择右边界的时候，不能排除中位数，那么中位数就选“左中位数”，只有这样区间才会收缩，否则进入死循环。</p></blockquote><p>&emsp;&emsp;<strong>！！！每次可以用<code>left = 3</code>，<code>right = 4</code>来测试下是否会陷入死循环</strong></p><ul><li>（7）退出循环的时候，可能需要对“夹逼”剩下的那个数单独做一次判断，这一步称之为“后处理</li></ul><p>&emsp;&emsp;二分查找法之所以高效，是因为它利用了数组有序的特点，在每一次的搜索过程中，都可以排除将近一半的数，<font color=#FF0000 ><strong>使得搜索区间越来越小，直到区间成为一个数</strong></font>。回到这一节最开始的疑问：“区间左右边界相等（即收缩成 1 个数）时，这个数是否会漏掉”，解释如下：</p><p>&emsp;&emsp;1、<font color=#FF0000 ><strong>如果你的业务逻辑保证了你要找的数一定在左边界和右边界所表示的区间里出现</strong></font>，那么可以放心地返回 <code>left</code> 或者 <code>right</code>，无需再做判断；</p><p>&emsp;&emsp;2、如果你的业务逻辑不能保证你要找的数一定在左边界和右边界所表示的区间里出现，那么只要在退出循环以后，再针对<font color=#FF0000 > <code>nums[left]</code> </font>或者 <font color=#FF0000 ><code>nums[right]</code> </font>（此时 <code>nums[left] == nums[right]</code>）单独作一次判断，看它是不是你要找的数即可，这一步操作常常叫做“后处理”。</p><p>&emsp;&emsp;<strong>！！！如果你能确定候选区间里目标元素一定存在，则不必做“后处理”。</strong></p><ul><li>（8）取中位数的时候，要避免在计算上出现整型溢出</li></ul><p>&emsp;&emsp;<font color=#FF0000 ><code>int mid = left + (right - left) / 2;</code> </font> <code>right - left</code> 也有可能超过 int 类型能表示的最大值，只不过一般情况下 <code>left</code> 和 <code>right</code> 表示的是数组索引值，<code>left</code> 是非负数，因此 <code>right - left</code> 溢出的可能性很小。因此，它是正确的写法。</p><p>&emsp;&emsp;<font color=#FF0000 >int mid = (left + right) &gt;&gt;&gt; 1;</font><strong>如果这样写， <code>left + right</code> 在发生整型溢出以后，会变成负数，此时如果除以 2 ，<code>mid</code> 是一个负数，但是经过无符号右移，可以得到在不溢出的情况下正确的结果</strong>。</p><p>&emsp;&emsp;在 Java 中，无符号右移运算符 <code>&gt;&gt;&gt;</code> 和右移运算符 <code>&gt;&gt;</code> 的区别如下：</p><p>&emsp;&emsp;1. 右移运算符 <code>&gt;&gt;</code>：在右移时，丢弃右边指定位数，左边补上符号位；</p><p>&emsp;&emsp;2. 无符号右移运算符 <code>&gt;&gt;&gt;</code> ：在右移时，丢弃右边指定位数，左边补上 0，也就是说，对于正数来说，二者一样，而负数通过 <code>&gt;&gt;&gt;</code> 后能变成正数。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><h4 id="4-1技巧"><a href="#4-1技巧" class="headerlink" title="4.1技巧"></a>4.1技巧</h4><blockquote><p>先写分支逻辑，并且先写排除中位数的逻辑分支（因为更多时候排除中位数的逻辑容易想，但是前面我也提到过，这并不绝对），另一个分支的逻辑你就不用想了，写出第 1 个分支的反面代码即可（下面的说明中有介绍），再根据分支的情况选择使用左中位数还是右中位数；</p></blockquote><p>&emsp;&emsp;我简单总结了一下，左右分支的规律就如下两点：</p><p>&emsp;&emsp;（1）如果第 1 个分支的逻辑是“左边界排除中位数”（<font color=#FF0000 ><code>left = mid + 1</code></font>），那么第 2 个分支的逻辑就一定是“右边界不排除中位数”（<font color=#FF0000 ><code>right = mid</code></font>），反过来也成立；</p><p>&emsp;&emsp;（2）如果第 2 个分支的逻辑是“右边界排除中位数”（<font color=#FF0000 ><code>right = mid - 1</code></font>），那么第 2 个分支的逻辑就一定是“左边界不排除中位数”（<font color=#FF0000 ><code>left = mid</code></font>），反之也成立。</p><h4 id="4-2-注意事项"><a href="#4-2-注意事项" class="headerlink" title="4.2 注意事项"></a>4.2 注意事项</h4><blockquote><p>左中位数还是右中位数选择的标准根据分支的逻辑而来，标准是每一次循环都应该让区间收缩，当候选区间只剩下 2 个元素的时候，为了避免死循环发生，选择正确的中位数类型。如果你实在很晕，不防就使用有 2 个元素的测试用例，就能明白其中的原因，另外在代码出现死循环的时候，建议你可以将左边界、右边界、你选择的中位数的值，还有分支逻辑都打印输出一下，出现死循环的原因就一目了然了；</p></blockquote><blockquote><p>如果能确定要找的数就在候选区间里，那么退出循环的时候，区间最后收缩成为 1 个数后，直接把这个数返回即可；如果你要找的数有可能不在候选区间里，区间最后收缩成为 1 个数后，还要单独判断一下这个数是否符合题意。</p></blockquote><h4 id="4-3-参考模板"><a href="#4-3-参考模板" class="headerlink" title="4.3 参考模板"></a>4.3 参考模板</h4><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640-1587455129065.jpg" alt=""></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640-1587455139736.webp" alt="img"></p><p>&emsp;&emsp;<strong>说明</strong>：一般是先默认将中位数写成左中位数，再根据分支的情况，看看是否有必要调整成右中位数，即是不是要在 <code>(right - left)</code> 这个括号里面加 1 。</p><blockquote><p><font color=#FF0000 ><strong>虽说是两个模板，区别在于选中位数，中位数根据分支逻辑来选，原则是区间要收缩，且不出现死循环，退出循环的时候，视情况，有可能需要对最后剩下的数单独做判断</strong>。</font></p></blockquote><h4 id="4-4-递归代码模板"><a href="#4-4-递归代码模板" class="headerlink" title="4.4 递归代码模板"></a>4.4 递归代码模板</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 二分搜索函数的定义里，除了要指定数组 nums 和目标查找数 target 之外，还要指定查找区间的起点和终点位置，分别用 low 和 high 去表示。</span><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为了避免无限循环，先判断，如果起点位置大于终点位置，表明这是一个非法的区间，已经尝试了所有的搜索区间还是没能找到结果，返回 -1。 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">></span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 取正中间那个数的下标 middle。    </span>    <span class="token keyword">int</span> middle <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 判断一下正中间的那个数是不是要找的目标数 target，是，就返回下标 middle。        </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果发现目标数在左边，就递归地从左半边进行二分搜索。    </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> low<span class="token punctuation">,</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//否则从右半边递归地进行二分搜索。}</span></code></pre><h4 id="4-5-非递归代码模板"><a href="#4-5-非递归代码模板" class="headerlink" title="4.5 非递归代码模板"></a>4.5 非递归代码模板</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在 while 循环里，判断搜索的区间范围是否有效    </span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 计算正中间的数的下标        </span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 判断正中间的那个数是不是要找的目标数 target。如果是，就返回下标 middle    </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> middle<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 如果发现目标数在左边，调整搜索区间的终点为 middle - 1；否则，调整搜索区间的起点为 middle + 1    </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   high <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    low <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果超出了搜索区间，表明无法找到目标数，返回 -1      </span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;<strong>核心步骤</strong></p><ol><li>确定搜索的范围和区间</li><li>取中间的数判断是否满足条件</li><li>如果不满足条件，判定应该往哪个半边继续进行搜索</li></ol><h4 id="4-6-二分搜素的变形"><a href="#4-6-二分搜素的变形" class="headerlink" title="4.6 二分搜素的变形"></a>4.6 二分搜素的变形</h4><h5 id="4-6-1-找确定的边界"><a href="#4-6-1-找确定的边界" class="headerlink" title="4.6.1 找确定的边界"></a>4.6.1 找确定的边界</h5><p>&emsp;&emsp;边界分上边界和下边界，有时候也被成为右边界和左边界。确定的边界指边界的数值等于要找的目标数。</p><p>&emsp;&emsp;把第一次出现的地方叫下边界（lower bound），把最后一次出现的地方叫上边界（upper bound）。</p><p>&emsp;&emsp;那么成为 8 的下边界的条件应该有两个：</p><ol><li>该数必须是 8；</li><li>该数的左边一个数必须不是 8：</li></ol><ul><li>8 的左边有数，那么该数必须小于 8；</li><li>8 的左边没有数，即 8 是数组的第一个数。</li></ul><p>&emsp;&emsp;而成为 8 的上边界的条件也应该有两个：</p><ol><li>该数必须是 8；</li><li>该数的右边一个数必须不是 8：</li></ol><ul><li>8 的右边有数，那么该数必须大于8；</li><li>8 的右边没有数，即 8 是数组的最后一个数。</li></ul><h5 id="4-6-2-找模糊的边界"><a href="#4-6-2-找模糊的边界" class="headerlink" title="4.6.2 找模糊的边界"></a>4.6.2 找模糊的边界</h5><p>&emsp;&emsp;二分搜索可以用来查找一些模糊的边界。模糊的边界指，边界的值并不等于目标的值，而是大于或者小于目标的值。</p><p>&emsp;&emsp;判断一个数是不是第一个大于 6 的数，只要它满足如下的条件：</p><ol><li>该数要大于 6；</li><li>该数有可能是数组里的第一个数，或者它之前的一个数比 6 小。</li></ol><h5 id="4-6-3-旋转过的排序数组"><a href="#4-6-3-旋转过的排序数组" class="headerlink" title="4.6.3 旋转过的排序数组"></a>4.6.3 旋转过的排序数组</h5><p>&emsp;<strong>&emsp;如何判断左边是不是排好序的那个部分呢？</strong></p><ul><li>只要比较 nums[low] 和 nums[middle]。nums[low] &lt;= nums[middle] 时，能判定左边这部分一定是排好序的，否则，右边部分一定是排好序的。</li></ul><p>&emsp;&emsp;<strong>判定某一边是排好序的，有什么用处呢？能准确地判断目标值是否在这个区间里。</strong></p><ul><li>如果 nums[low] &lt;= target &amp;&amp; target &lt; nums[middle]，则应该在这个区间里搜索目标值。反之，目标值肯定在另外一边。</li></ul><h5 id="4-6-4-不定长的边界"><a href="#4-6-4-不定长的边界" class="headerlink" title="4.6.4 不定长的边界"></a>4.6.4 不定长的边界</h5><p>&emsp;&emsp;可以把这个问题看成是不知道长度的数组，数组从头开始记录都是时间戳，到了某个位置就成为了空：{2019-01-14, 2019-01-17, … , 2019-08-04, …. , null, null, null …}。</p><p>&emsp;&emsp;借用二分搜索的思想，反着进行搜索：</p><ol><li>一开始设置 low = 0，high = 1</li><li>只要 logs[high] 不为 null，high *= 2</li><li>当 logs[high] 为 null 的时候，可以在区间 [0, high] 进行普通的二分搜索</li></ol>]]></content>
      
      
      <categories>
          
          <category> 二分法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】LeetCode 第 41 号问题：缺失的第一个正数</title>
      <link href="/2020/04/17/shu-ju-jie-gou-shu-zu-leetcode-di-41-hao-wen-ti-que-shi-de-di-yi-ge-zheng-shu/"/>
      <url>/2020/04/17/shu-ju-jie-gou-shu-zu-leetcode-di-41-hao-wen-ti-que-shi-de-di-yi-ge-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>&emsp;&emsp;给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-41-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/image-20200417165014091.png" alt=""></p><h3 id="2-题目解析"><a href="#2-题目解析" class="headerlink" title="2.题目解析"></a>2.题目解析</h3><p>&emsp;&emsp;这道题如果不加上  <em>O(n)</em> 时间和  <em>O(1)</em> 空间这样的限定条件，应该再简单不过，但是加上了这两个要求，一下子使问题变得棘手。</p><p>&emsp;&emsp;首先这道题给定的条件很有限，输入参数就 <font color=#FF0000 ><strong>只有数组</strong></font> ，如果非要用  <em>O(n)</em> 时间和  <em>O(1)</em> 空间来做的话，表示我们除了<font color=#FF0000 ><strong>输入数组</strong></font>以外，不能借助任何其他的数据结构。</p><p>&emsp;&emsp;数组应该是属于一类最最基础的数据结构，除去 length 之外，<font color=#FF0000 >就只有两个属性 <em>index*和 *value</em></font>，那这道题就变成了 <font color=#FF0000 ><strong>如何利用数组的 value 和 index 之间的关系来找到最小缺失正整数</strong> </font>，如果想到了这一点，就已经成功了一半。</p>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】LeetCode-第-287-号问题：寻找重复数</title>
      <link href="/2020/04/16/shu-ju-jie-gou-shu-zu-leetcode-di-287-hao-wen-ti-xun-zhao-chong-fu-shu/"/>
      <url>/2020/04/16/shu-ju-jie-gou-shu-zu-leetcode-di-287-hao-wen-ti-xun-zhao-chong-fu-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-技巧"><a href="#1-技巧" class="headerlink" title="1.技巧"></a>1.技巧</h3><p>&emsp;&emsp;二分法的使用 <strong>并不一定</strong> 需要在排序好的数组上面进行，<strong>不要让常见的例题限制了你的思路</strong>，二分法还有一个比较高级的用法叫做 <font color=#FF0000 ><strong>按值二分</strong></font>。</p><h3 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2.题目描述"></a>2.题目描述</h3><p>&emsp;&emsp;给定一个包含 <em>n + 1</em> 个整数的数组 <em>nums</em>，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-287-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/image-20200416115812874.png" alt=""></p><h3 id="3-题目解析"><a href="#3-题目解析" class="headerlink" title="3.题目解析"></a>3.题目解析</h3><p>&emsp;&emsp;由于限制条件太多了，很多方法都不能用！</p><p>&emsp;&emsp;假如没有这些限制，可以采取的方法有：</p><ul><li><font color=#FF0000 >不能更改原数组</font>导致无法排序，也无法用<font color=#FF0000 >index 和元素建立关系</font> index 和元素建立关系；</li><li><font color=#FF0000 >只能使用 O(1) 的空间</font>意味着使用<font color=#FF0000 >哈希表去计数</font>这条路也走不通；</li><li><font color=#FF0000 >时间复杂度必须小于 O(n^2)</font>意味着不能用<font color=#FF0000 >暴力解法</font>；</li><li><font color=#FF0000 >重复数字可以重复出现</font>通过<font color=#FF0000 >累加求和然后做差 <code>sum(array) - sum(1,2,...,n)</code> 的方式</font>也变得不可行。</li></ul><p>&emsp;&emsp;<font color=#FF0000 ><strong>什么样的算法可以不使用额外的空间解决数组上面的搜索问题？</strong></font></p><p>&emsp;&emsp;<font color=#FF0000 ><strong>二分查找！！</strong></font></p><p>&emsp;&emsp;这道题目交代的信息很少，<strong>我们只需要关注两个东西 - 数组，数组里的元素</strong>，利用二分我们需要去思考的是，我们要找符合条件的元素作为答案，那么 <font color=#FF0000 ><strong>比答案小的元素具有什么样的特质，比答案大的元素又具有什么样的特质？</strong></font>结合题目给我们的例子来看看：</p><p>&emsp;&emsp;例1：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>                      元素个数<span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：<span class="token number">1</span>                       <span class="token number">1</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span>                 <span class="token number">3</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>              <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>           <span class="token number">5</span></code></pre><p>&emsp;&emsp;例2:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：<span class="token number">1</span>                        <span class="token number">1</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>                     <span class="token number">2</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span>               <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>            <span class="token number">5</span></code></pre><p>&emsp;&emsp;极端一点的例子 (必须保证数组的长度是 n + 1, 并且元素都在区间[1,n] 上, 有且只有一个重复)</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：                        <span class="token number">0</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：                        <span class="token number">0</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span>              <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>           <span class="token number">5</span></code></pre><p>&emsp;&emsp;看完上面几个例子，相信你明白了一个事实:</p><ul><li>如果选中的数<font color=#FF0000 > <strong>小于</strong></font> 我们要找的答案，那么整个数组中小于或等于该数的元素个数必然小于或等于该元素的值;</li><li>如果选中的数<font color=#FF0000 > <strong>大于或等于</strong></font> 我们要找的答案，那么整个数组中小于或等于该数的元素个数必然<font color=#FF0000 >大于</font>该元素的值</li></ul><p>&emsp;&emsp;而且你可以看到，我们要找的答案其实就处于一个分界点的位置，寻找边界值，这又是二分的一个应用，而且题目已经告诉我们数组里面的值只可能在 [1, n] 之间，这么一来，思路就是在 [1, n] 区间上做二分，然后按我们之前提到的逻辑去做分割。整个解法的时间复杂度是 <strong>O(nlogn)</strong>，也是满足题目要求的。</p><p>&emsp;&emsp;动画描述参考：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247486581&amp;idx=1&amp;sn=0ed7d74ba7ebf427c58ade56bc4f8f68" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247486581&amp;idx=1&amp;sn=0ed7d74ba7ebf427c58ade56bc4f8f68</a></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-287-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/image-20200417163357019.png" alt=""></p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 统计数组中小于等于mid的元素个数counter</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter <span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果个数counter大于mid，则下次应该在[start，mid]之间找寻</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 否则，在[mid+1，end]之间找寻</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-Python"><code class="language-Python">def findDuplicate(list):    length = len(list)    start = 1    end = length - 1    while(start < end):        counter = 0        mid = int(start + (end - start) / 2)        for i in list:            if(i <= mid):                counter += 1        if(counter > mid):            end = mid        else:            start = mid + 1    return start</code></pre><p>&emsp;&emsp;C语言代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> arraylength<span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> len <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                counter <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">></span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>            end <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"testing...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arraylength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-另一种解题思路"><a href="#5-另一种解题思路" class="headerlink" title="5.另一种解题思路"></a>5.另一种解题思路</h3><p>&emsp;&emsp;另外一种 O(n) 的解法借鉴快慢指针找交点的思想，算法非常的巧妙，也非常的有趣，但不太容易想到，这里把代码放上。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
          <category> 二分法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】如何高效对有序数组/链表去重？</title>
      <link href="/2020/04/15/shu-ju-jie-gou-shu-zu-shu-zu-ji-qiao/"/>
      <url>/2020/04/15/shu-ju-jie-gou-shu-zu-shu-zu-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数组简介"><a href="#1-数组简介" class="headerlink" title="1.数组简介"></a>1.数组简介</h3><p>&emsp;&emsp;数组，将元素存储到内存的连续位置中，是最基本的数据结构。在任何和编程相关的面试中，都会被问到和数组相关的问题，可以说是非常热门的考题之一。比如：将数组反转、对数组进行排序、搜索数组中的元素等。</p><h3 id="2-数组优缺点"><a href="#2-数组优缺点" class="headerlink" title="2.数组优缺点"></a>2.数组优缺点</h3><h4 id="2-1优点"><a href="#2-1优点" class="headerlink" title="2.1优点"></a>2.1优点</h4><p>&emsp;&emsp;数组数据结构的主要优点是如果知道索引就可以通过 O(l) 进行快速搜索，</p><h4 id="2-2数组缺点"><a href="#2-2数组缺点" class="headerlink" title="2.2数组缺点"></a>2.2数组缺点</h4><p>&emsp;&emsp;在数组中添加和删除元素的速度会很慢，因为数组一旦被创建，就无法更改其大小。如果需要创建更长或更短的数组，得先创建一个新数组，再把原数组中的所有元素复制到新创建的数组中。</p><h3 id="3-数组解题技巧"><a href="#3-数组解题技巧" class="headerlink" title="3.数组解题技巧"></a>3.数组解题技巧</h3><ul><li>&emsp;&lt;1&gt; 对于数组来说，<font color=#FF0000 >在尾部插入、删除元素是比较高效的</font>，时间复杂度是 O(1)，但是如果在中间或者开头插入、删除元素，就会涉及数据的搬移，时间复杂度为 O(N)。我们要<font color=#FF0000 >尽可能只对数组尾部的元素进行操作</font>，以避免额外的时间复杂度。</li><li>&emsp;&lt;2&gt; <strong>对于数组相关的算法问题，有一个通用的技巧：要尽量避免在中间删除元素，那我就先想办法把这个元素换到最后去</strong>。这样的话，最终待删除的元素都拖在数组尾部，一个一个 pop 掉就行了，每次操作的时间复杂度也就降低到 O(1) 了。按照这个思路呢，又可以衍生出解决类似需求的通用方式：<font color=#FF0000 >快慢指针</font>。</li></ul><h3 id="4-精选面试题：如何高效对有序数组-链表去重？"><a href="#4-精选面试题：如何高效对有序数组-链表去重？" class="headerlink" title="4.精选面试题：如何高效对有序数组/链表去重？"></a>4.精选面试题：如何高效对有序数组/链表去重？</h3><p>&emsp;&emsp;先看题目</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91%E6%95%B0%E7%BB%84%E6%8A%80%E5%B7%A7/image-20200415120136464.png" alt="题目"></p><p>&emsp;&emsp;显然，由于数组已经排序，所以重复的元素一定连在一起，找出它们并不难，但如果使用暴力解法的话，整个时间复杂度是会达到 O(N^2)。而且题目要求我们原地修改，也就是说不能用辅助数组，空间复杂度得是 O(1)。</p><p>&emsp;&emsp;我们使用快慢指针进行解题：让慢指针<code>slow</code>走左后面，快指针<code>fast</code>走在前面探路，找到一个不重复的元素就告诉<code>slow</code>并让<code>slow</code>前进一步。这样当<code>fast</code>指针遍历完整个数组<code>nums</code>后，<code>nums[0..slow]</code>就是不重复元素，之后的所有元素都是重复元素。</p><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                slow<span class="token operator">++</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fast<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] = "</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span>  <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> list<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            slow <span class="token operator">+=</span> <span class="token number">1</span>            list<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>        fast <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list[%d]=%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>&emsp;&emsp;C语言代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arraylength<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            slow <span class="token operator">++</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span><span class="token punctuation">{</span>            fast <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d]:%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arraylength <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;看下算法执行的过程：</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91%E6%95%B0%E7%BB%84%E6%8A%80%E5%B7%A7/640.gif" alt="有序数组去重"></p><p>&emsp;&emsp;再简单扩展一下，如果给你一个有序链表，如何去重呢？其实和数组是一模一样的，唯一的区别是把数组赋值操作变成操作指针而已：</p><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java"></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-python"><code class="language-python"></code></pre><p>&emsp;&emsp;看下算法执行的过程：</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91%E6%95%B0%E7%BB%84%E6%8A%80%E5%B7%A7/640-1586935359752.gif" alt="有序链表去重"></p>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业一】线性回归-PM2.5预测</title>
      <link href="/2020/04/13/zuo-ye-yi-xian-xing-hui-gui-pm2.5-yu-ce/"/>
      <url>/2020/04/13/zuo-ye-yi-xian-xing-hui-gui-pm2.5-yu-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="一、作业说明及数据获取"><a href="#一、作业说明及数据获取" class="headerlink" title="一、作业说明及数据获取"></a>一、作业说明及数据获取</h2><p>给定训练集train.csv，要求根据前9个小时的空气监测情况预测第10个小时的PM2.5含量。</p><p>训练集介绍：</p><ul><li><p>(1) CSV文件，包含台湾丰原地区240天的气象观测资料(取每个月前20天的数据做训练集，12月X20天=240天，每月后10天数据用于测试，对学生不可见);</p></li><li><p>(2) 每天的监测时间点为0时，1时……到23时，共24个时间节点;</p></li><li><p>(3) 每天的检测指标包括CO、NO、PM2.5、PM10等气体浓度，是否降雨、刮风等气象信息，共计18项；</p></li><li><p>(4) 数据下载地址：<a href="https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A" target="_blank" rel="noopener">https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A</a> </p><p>​    提取码：vcj8</p></li></ul><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413153133242.png" alt="train.csv文件内容"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413153302263.png" alt="test.csv文件部分内容"></p><h2 id="二、程序实现"><a href="#二、程序实现" class="headerlink" title="二、程序实现"></a>二、程序实现</h2><h3 id="2-1-加载CSV文件"><a href="#2-1-加载CSV文件" class="headerlink" title="2.1 加载CSV文件"></a>2.1 加载CSV文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_csv</span><span class="token punctuation">(</span>train_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> usecols<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># usecols=range(3,27)：表示选择第3列到第27列数据</span><span class="token comment" spellcheck="true">#     pf = pd.read_csv(path, encoding='big5')</span><span class="token comment" spellcheck="true">#     data = pf.iloc[:, 3:]  # 另一种选择数据的方法</span>    <span class="token keyword">return</span> data</code></pre><h3 id="2-2-数据预处理"><a href="#2-2-数据预处理" class="headerlink" title="2.2 数据预处理"></a>2.2 数据预处理</h3><p>&emsp;&emsp;浏览数据可知，数据中存在一定量的空数据NR，且多存在于RAINFALL一项。对于空数据，常规的处理方法无非就是删除法和补全法两种。查阅资料后发现，RAINFALL表示当天对应时间点是否降雨，有降雨值为1，无降雨值为NR，类似于布尔变量。因此可以采用补全法处理空数据：将空数据NR全部补为0即可。</p><p>&emsp;&emsp;根据作业要求可知，需要用到连续9个时间点的气象观测数据，来预测第10个时间点的PM2.5含量。针对每一天来说，其包含的信息维度为(18,24)(18项指标，24个时间节点)。可以将0到8时的数据截取出来，形成一个维度为(18,9)的数据帧，作为训练数据，将9时的PM2.5含量取出来，作为该训练数据对应的label；同理可取1到9时的数据作为训练用的数据帧，10时的PM2.5含量作为label……以此分割，可将每天的信息分割为15个shape为(18,9)的数据帧和与之对应的15个label。</p><p>&emsp;&emsp;训练集中共包含240天的数据，因此共可获得240X15=3600个数据帧和与之对应的3600个label。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dataprocess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将空数据NR替换为0</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># data ----> [4320, 24]</span><span class="token comment" spellcheck="true">#   data[data == 'NR'] = 0.0  </span>    <span class="token comment" spellcheck="true"># 将data数据类型转换为&lt;class 'numpy.ndarray'></span><span class="token comment" spellcheck="true">#   array = np.array(data).astype(float)</span>    array <span class="token operator">=</span> data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># array ----> [4320, 24]</span>    <span class="token comment" spellcheck="true"># 第一种训练集数据划分：每天24小时，可以将0到8时的数据截取出来，形成一个维度为(18,9)的数        据帧，作为训练数据，将9时的PM2.5含量取出来，作为该训练数据对应的label；同理可取1到9时       的数据作为训练用的数据帧，10时的PM2.5含量作为label......以此分割，可将每天的信息分       割为15个shape为(18,9)的数据帧和与之对应的15个label。</span>    x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4320</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mat 是作为一个整体添加的，相当于x_list里的一个元素, x_list的个数相当于样本的个数</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x ----> [3600, 162]</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># y ----> [3600, 1]</span><span class="token comment" spellcheck="true">#     x_list, y_list = [], []</span><span class="token comment" spellcheck="true">#     month_data = {}</span><span class="token comment" spellcheck="true">#     for month in range(12):</span><span class="token comment" spellcheck="true">#         sample = np.empty([18, 480])</span><span class="token comment" spellcheck="true">#         for day in range(20):</span><span class="token comment" spellcheck="true">#             sample[:, day * 24 : (day+1) *24] = array[18 * (20*month+day): 18 * (20*month+day+1), :]</span><span class="token comment" spellcheck="true">#         month_data[month] = sample</span><span class="token comment" spellcheck="true">#     for i in range(12):</span><span class="token comment" spellcheck="true">#         for j in range(480-9):</span><span class="token comment" spellcheck="true">#             mat = month_data[i][:, j:j+9]</span><span class="token comment" spellcheck="true">#             label = month_data[i][9,j+9]</span><span class="token comment" spellcheck="true">#             x_list.append(mat)</span><span class="token comment" spellcheck="true">#             y_list.append(label)</span><span class="token comment" spellcheck="true">#         x = np.array(x_list).reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#         y = np.array(y_list).reshape(-1,1)</span><span class="token comment" spellcheck="true">#     x_train = x[:int(len(x)*0.8),:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     x_validation = x[int(len(x)*0.8):,:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     y_train = y[:int(len(y)*0.8)]</span><span class="token comment" spellcheck="true">#     y_validation = y[int(len(y)*0.8)]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y</code></pre><p>&emsp;&emsp;第二种训练集数据划分：在从csv文件中提取数据帧和label时，第一种方法是以天为单位，每天分割出15个数据帧和15个label。事实上，时间是连续的，可以将每月的20天首尾连接，再从其中分割数据帧和label，可使数据帧样本数量大大提升。</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/20200410145553875.png" alt="提取特征"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/20200410150256239.png" alt="提取特征"></p><pre class=" language-python"><code class="language-python">     x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 將原始 4320 * 24 的数据依照每个月分成 12个18 (features) * 480 (hours) 的数据。 </span>     month_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">for</span> month <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         sample <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> day <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             sample<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> day <span class="token operator">*</span> <span class="token number">24</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">18</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>month<span class="token operator">+</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>month<span class="token operator">+</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>         month_data<span class="token punctuation">[</span>month<span class="token punctuation">]</span> <span class="token operator">=</span> sample     <span class="token comment" spellcheck="true"># 每个月20天有 480hrs，每 9 小时形成一个 data，每月有 471 个 data，故总数据为 471 * 12 个 ，而每个 data 有 9 * 18 的 features (一小时 18 个 features * 9 小时)。对应的 labels 有 471 * 12 个(第 10 个小时的 PM2.5)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">480</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             mat <span class="token operator">=</span> month_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>             label <span class="token operator">=</span> month_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>             x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>             y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>         x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x ----> [5652, 162]</span>         y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># y ----> [5652, 1]</span></code></pre><h3 id="2-3-标准化"><a href="#2-3-标准化" class="headerlink" title="2.3 标准化"></a>2.3 标准化</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200419210629193.png" alt="标准化两种形式"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#12 * 471</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#18 * 9 </span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x</code></pre><h3 id="2-4-训练train"><a href="#2-4-训练train" class="headerlink" title="2.4 训练train"></a>2.4 训练train</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_real <span class="token operator">=</span> y    learning_rate <span class="token operator">=</span> lr    iter_time <span class="token operator">=</span> epochs    dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在原x数据后面再加一维  x1 ----> [3600, 163]</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x1_transpose <span class="token operator">=</span> x1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>    w_adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 损失函数loss用rmse</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># print(loss.shape)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 变量w的梯度 w_gradient -----> [163, 1]</span>        w_gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1_transpose<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 变量w的梯度平方和</span>        w_adagrad <span class="token operator">+=</span> w_gradient <span class="token operator">**</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># 梯度更新</span>        w <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> w_gradient <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>w_adagrad <span class="token operator">+</span> eps<span class="token punctuation">)</span>    <span class="token keyword">return</span> w</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413161334114.png" alt="训练结果"></p><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span><span class="token punctuation">:</span>    pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'big5'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> pf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    test_data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> test_data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> float<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x_test<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i <span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test</code></pre><h3 id="2-6-main-函数"><a href="#2-6-main-函数" class="headerlink" title="2.6 main()函数"></a>2.6 main()函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span> <span class="token string">'./data/train.csv'</span>    data <span class="token operator">=</span> load_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> dataprocess<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    lr <span class="token operator">=</span> <span class="token number">100</span>    epochs <span class="token operator">=</span> <span class="token number">1000</span>    w <span class="token operator">=</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">,</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_path <span class="token operator">=</span> <span class="token string">'./data/test.csv'</span>    x_test <span class="token operator">=</span> test<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span>    w1 <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">)</span>    y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将预测结果保存到submit.csv</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/submit.csv'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>        csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(header)</span>        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(row)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-7-整体代码"><a href="#2-7-整体代码" class="headerlink" title="2.7 整体代码"></a>2.7 整体代码</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> csv<span class="token keyword">def</span> <span class="token function">load_csv</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> usecols<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     pf = pd.read_csv(path, encoding='big5')</span><span class="token comment" spellcheck="true">#     data = pf.iloc[:, 3:]</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">dataprocess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#   data[data == 'NR'] = 0.0  </span><span class="token comment" spellcheck="true">#   array = np.array(data).astype(float)</span>    array <span class="token operator">=</span> data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4320</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mat 是作为一个整体添加的，相当于x_list里的一个元素, x_list的个数相当于样本的个数</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>          y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#     month_data = {}</span><span class="token comment" spellcheck="true">#     for month in range(12):</span><span class="token comment" spellcheck="true">#         sample = np.empty([18, 480])</span><span class="token comment" spellcheck="true">#         for day in range(20):</span><span class="token comment" spellcheck="true">#             sample[:, day * 24 : (day+1) *24] = array[18 * (20*month+day): 18 * (20*month+day+1), :]</span><span class="token comment" spellcheck="true">#         month_data[month] = sample</span><span class="token comment" spellcheck="true">#     x_list, y_list = [], []</span><span class="token comment" spellcheck="true">#     for i in range(12):</span><span class="token comment" spellcheck="true">#         for j in range(480-9):</span><span class="token comment" spellcheck="true">#             mat = month_data[i][:, j:j+9]</span><span class="token comment" spellcheck="true">#             label = month_data[i][9,j+9]</span><span class="token comment" spellcheck="true">#             x_list.append(mat)</span><span class="token comment" spellcheck="true">#             y_list.append(label)</span><span class="token comment" spellcheck="true">#         x = np.array(x_list).reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#         y = np.array(y_list).reshape(-1,1)</span><span class="token comment" spellcheck="true">#     x_train = x[:int(len(x)*0.8),:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     x_validation = x[int(len(x)*0.8):,:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     y_train = y[:int(len(y)*0.8)]</span><span class="token comment" spellcheck="true">#     y_validation = y[int(len(y)*0.8)]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y<span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#12 * 471</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#18 * 9 </span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_real <span class="token operator">=</span> y    learning_rate <span class="token operator">=</span> lr    iter_time <span class="token operator">=</span> epochs    dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x1_transpose <span class="token operator">=</span> x1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>    learning_rate <span class="token operator">=</span> <span class="token number">100</span>    iter_time <span class="token operator">=</span> <span class="token number">1000</span>    w_adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rmse</span>       <span class="token comment" spellcheck="true"># print(loss.shape)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        w_gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1_transpose<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#dim*1</span>        w_adagrad <span class="token operator">+=</span> w_gradient <span class="token operator">**</span> <span class="token number">2</span>        w <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> w_gradient <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>w_adagrad <span class="token operator">+</span> eps<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># np.save('weight.npy', w)</span>    <span class="token keyword">return</span> w<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span><span class="token punctuation">:</span>    pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'big5'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> pf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    test_data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> test_data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> float<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x_test<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i <span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span> <span class="token string">'./data/train.csv'</span>    data <span class="token operator">=</span> load_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> dataprocess<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    lr <span class="token operator">=</span> <span class="token number">100</span>    epochs <span class="token operator">=</span> <span class="token number">1000</span>    w <span class="token operator">=</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">,</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_path <span class="token operator">=</span> <span class="token string">'./data/test.csv'</span>    x_test <span class="token operator">=</span> test<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span>    w1 <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">)</span>    y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/submit.csv'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>        csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(header)</span>        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(row)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>&emsp;&emsp;保存的submit.csv文件部分内容如下:</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413173310799.png" alt="submit.csv文件部分内容"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性回归 </tag>
            
            <tag> PM2.5预测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/10/hello-world/"/>
      <url>/2020/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p><font color=#FF0000 >红色</font></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
