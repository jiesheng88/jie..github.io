<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建博客</title>
      <link href="/2020/04/10/da-jian-bo-ke/"/>
      <url>/2020/04/10/da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<p>​    通过 GitHub + hexo 来搭建个人博客！！</p><p>​    参考链接：</p><p>​        1.超全面！如何用 GitHub 从零开始搭建一个博客 ？</p><p>​                <a href="https://www.cxyxiaowu.com/6407.html" target="_blank" rel="noopener">https://www.cxyxiaowu.com/6407.html</a></p><p>​        2.【新手向】从零开始搭建一个酷炫免费的个人博客</p><p>​                <a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484589&amp;idx=1&amp;sn=7ef61ad418eb4b16d3587a5859f5ce8e&amp;chksm=fa0e6b2ccd79e23afc1767f07afeec6f3dd3de0be44be01c7548afd6476015b0c3d91528088c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484589&amp;idx=1&amp;sn=7ef61ad418eb4b16d3587a5859f5ce8e&amp;chksm=fa0e6b2ccd79e23afc1767f07afeec6f3dd3de0be44be01c7548afd6476015b0c3d91528088c&amp;scene=21#wechat_redirect</a></p><h2 id="一、GitHub创建个人仓库"><a href="#一、GitHub创建个人仓库" class="headerlink" title="一、GitHub创建个人仓库"></a>一、GitHub创建个人仓库</h2><p>​    1.登录到 GitHub：<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p><p>​    2.登录成功之后，点击 GitHub 中的 New repository 创建新仓库，仓库的名字可以随便起，不过这个仓库是作为我们的博客仓库的，所以尽量将名字以 {username}.github.io 的形式来起。</p><p>​    比如，我的GitHub用户名是lewky，我就会把这个仓库命名为lewky.github.io。（为什么要这样起名，后面会说明）</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410150210713.png" alt="image-20200410150210713"></p><h2 id="二、相关软件安装及配置"><a href="#二、相关软件安装及配置" class="headerlink" title="二、相关软件安装及配置"></a>二、相关软件安装及配置</h2><h3 id="2-1-安装-Node-js"><a href="#2-1-安装-Node-js" class="headerlink" title="2.1 安装 Node.js"></a>2.1 安装 Node.js</h3><p>​    首先在自己的电脑上安装 Node.js，下载地址：<a href="https://pan.baidu.com/s/1lOE7p3GIX516fQIW_gAtZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1lOE7p3GIX516fQIW_gAtZg</a> ，提取码：udo2 </p><h3 id="2-2-安装Git"><a href="#2-2-安装Git" class="headerlink" title="2.2 安装Git"></a>2.2 安装Git</h3><p>​    这是使用 Git 的目的是为了将我们的网站从本地提交上服务器（GitHub）上面去。我认为 Git 操作是程序员应该具备的一个基本操作，具体的 Git 操作细节可以查看廖雪峰的教程，讲的十分详细： <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p><p>​    下载地址同样在上面的百度网盘里</p><h4 id="2-2-1-Git配置"><a href="#2-2-1-Git配置" class="headerlink" title="2.2.1 Git配置"></a>2.2.1 Git配置</h4><p>​            <img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200410151626711.png" alt="image-20200410151626711" style="zoom: 67%;" /></p><p>​    进入Git Bash终端进行如下操作，设置user.name 和 user.email 配置信息</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><h4 id="2-2-2-SSH-key的创建与配置"><a href="#2-2-2-SSH-key的创建与配置" class="headerlink" title="2.2.2 SSH key的创建与配置"></a>2.2.2 SSH key的创建与配置</h4><p>​    最关键的一步来了，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。</p><p>​    <strong>1.生成RSA密钥对</strong></p><p>​    通过注册的邮箱生成 ssh 密钥文件:</p><pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre><p>​    然后直接三个回车即可，默认不需要设置密码。最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>。</p><p>​    <strong>2.拷贝密钥</strong></p><p>​    打开 <code>id_rsa.pub 文件</code>，将里面的内容全部复制。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410152745234.png" alt="image-20200410152745234"></p><p>​    <strong>3.在 GitHub 上配置SSH key</strong></p><p>​        <strong>·</strong>进入Setting页面</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200410153129263.png" alt="image-20200410153129263" style="zoom: 50%;" /><p>​        <strong>·</strong>选择 SSH and GPG keys</p><p>​        <strong>·</strong>点击 New SSH key</p><p>​        <strong>·</strong>填写Title（用来给公钥起一个名字，以便和其他的公钥区分开来）</p><p>​        <strong>·</strong>然后在 Key 里将我们刚刚复制的公钥复制进去</p><p>​        <strong>·</strong>最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410153702312.png" alt="image-20200410153702312"></p><p>​    <strong>4.测试GitHub SSH</strong></p><p>​        添加好 <code>SSH Key</code>后，进行测试。使用 Git Bash 输入：</p><pre><code>ssh -T git@github.com</code></pre><p>​        你将会看到：</p><pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>​        选择 <code>yes</code></p><pre><code>Hi MisterBooo! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>​        <img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410154105469.png" alt="image-20200410154105469"></p><p>​        如果看到<code>Hi</code>后面是你的用户名，就说明成功了。</p><h3 id="2-3-Hexo安装"><a href="#2-3-Hexo安装" class="headerlink" title="2.3 Hexo安装"></a>2.3 Hexo安装</h3><p>​    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>​    使用 Git Bash 输入：</p><pre><code>npm install -g hexo-cli</code></pre><p>​    安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p><h2 id="三、通过hexo搭建博客"><a href="#三、通过hexo搭建博客" class="headerlink" title="三、通过hexo搭建博客"></a>三、通过hexo搭建博客</h2><h3 id="3-1初始化博客"><a href="#3-1初始化博客" class="headerlink" title="3.1初始化博客"></a>3.1初始化博客</h3><p>​    在你想创建博客的文件夹下（我是想把博客放在D:\Program Files文件夹下），点击鼠标右键，选择Git Bash Here，即可进入Git Bash 。</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200410155030466.png" alt="image-20200410155030466" style="zoom:50%;" /><p>​    使用 Git Bash 输入，其中myBlog是你要保存的博客文件夹的名称：</p><pre><code>hexo init myBlog</code></pre><p>​    <img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410155608097.png" alt="image-20200410155608097"></p><p>​    接下来，进入文件夹 <code>myBlog</code>,然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><pre><code>hexo generate</code></pre><p>​    可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><p>​    然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><pre><code>hexo serve</code></pre><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410155704384.png" alt="image-20200410155704384"></p><p>​    然后，打开浏览器输入地址：</p><pre><code>localhost:4000</code></pre><p>​    <img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410160053650.png" alt="image-20200410160053650"></p><p>​    执行到这里事实上博客就已经搭建好了，接下来就是去完善它。</p><p><strong>！！！注意：下面的命令都是在 <code>myBlog</code>文件里进行操作的。</strong></p><h3 id="3-3-部署"><a href="#3-3-部署" class="headerlink" title="3.3 部署"></a>3.3 部署</h3><p>​    接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>​    那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><p>​    在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。</p><p>​    打开myBlog文件夹下的 _config.yml 文件，找到 Deployment 这个地方：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>​    把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:/{user}/{repository}.git  branch: master</code></pre><p>​    <strong>请注意，这里的仓库地址如果写成：<code>https://github.com/{user}/{repository}.git</code>可能会在后边的部署时无法成功，需要将<code>https://github.com</code>改成<code>git@github.com:</code>。</strong></p><p>​    我的就修改为如下内容：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410162701389.png" alt="image-20200410162701389"></p><p>​    另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报错。</p><p>​    安装这个插件，在myBlog文件夹下执行安装命令如下：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>​    安装成功之后，执行部署命令：</p><pre><code>hexo deploy</code></pre><p>​    运行结果类似如下：</p><pre><code>INFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...On branch masternothing to commit, working directory cleanCounting objects: 46, done.Delta compression using up to 8 threads.Compressing objects: 100% (36/36), done.Writing objects: 100% (46/46), 507.66 KiB | 0 bytes/s, done.Total 46 (delta 3), reused 0 (delta 0)remote: Resolving deltas: 100% (3/3), done.To git@github.com:NightTeam/nightteam.github.io.git * [new branch]      HEAD -&gt; masterBranch master set up to track remote branch master from git@github.com:NightTeam/nightteam.github.io.git.INFO  Deploy done: git</code></pre><p>​    如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了。</p><p>​    通过如下图所示的Settings 进入该仓库的设置页面，找到 Github Pages 这一项，选择以 Master 分支作为 source，然后保存；接下来这个仓库就会被部署到 https://{username}.github.io/{仓库名}。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410163524556.png" alt="image-20200410163524556"></p><p>​    如果你希望直接通过 https://{username}.github.io/ 来访问你的博客，可以将仓库名改为 {username}.github.io；这样就不需要在url后边添加上仓库名来访问了。</p><p>​    <img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410163835119.png" alt="image-20200410163835119"></p><p>​    比如，我GitHub的usename是jiesheng88，Repository 名称取的是 jiesheng88.github.io，那我就访问 <a href="http://jiesheng88.github.io，这时候就可以看到跟本地一模一样的博客内容了（下面是加了主题的）。" target="_blank" rel="noopener">http://jiesheng88.github.io，这时候就可以看到跟本地一模一样的博客内容了（下面是加了主题的）。</a></p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410164144550.png" alt="image-20200410164144550"></p><p>​    GitHub 的 master 分支实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><p>​    如果我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>​    具体的添加过程就很简单了，在Git Bash里逐条添加如下命令：</p><pre><code>git initgit checkout -b sourcegit add -Agit commit -m &quot;init blog&quot;git remote add origin git@github.com:{username}/{username}.github.io.gitgit push origin source</code></pre><p>​    成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。</p><h3 id="3-3-更换Hexo博客主题"><a href="#3-3-更换Hexo博客主题" class="headerlink" title="3.3 更换Hexo博客主题"></a>3.3 更换Hexo博客主题</h3><p>​    hexo 默认的主题可能显得有点呆板，你可以在 <a href="https://hexo.io/themes/index.html进行主题的挑选更换。将下好的主题安放在`themes`文件夹内，同时在`_config.yml`中进行主题修改就好了。" target="_blank" rel="noopener">https://hexo.io/themes/index.html进行主题的挑选更换。将下好的主题安放在`themes`文件夹内，同时在`_config.yml`中进行主题修改就好了。</a></p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200410165053440.png" alt="image-20200410165053440" style="zoom:67%;" /><p>​    我选择了<code>hexo-theme-matery</code> 这款主题。具体配置过程，看下面文档说明。</p><p>​    <a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24</a></p><p>​    一般大佬们提供的主题都会提供文档说明，按照说明进行简单的设置就能拥有一个酷炫的页面了。</p><h3 id="3-4-添加文章"><a href="#3-4-添加文章" class="headerlink" title="3.4 添加文章"></a>3.4 添加文章</h3><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200410160327894.png" alt="image-20200410160327894" style="zoom: 67%;" /><h4 id="3-4-1-直接导入文章"><a href="#3-4-1-直接导入文章" class="headerlink" title="3.4.1 直接导入文章"></a>3.4.1 直接导入文章</h4><p>​    你可以将你平时写的文章直接导入到 <code>_posts</code> 文件夹里，注意文章类型得是 <code>md</code>格式。</p><h4 id="3-4-2-写新文章"><a href="#3-4-2-写新文章" class="headerlink" title="3.4.2 写新文章"></a>3.4.2 写新文章</h4><p>​    你可以执行下列命令来创建一篇新文章。</p><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>​    你可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200410160641123.png" alt="image-20200410160641123"></p><p>​    这样在 <code>_posts</code> 文件夹里也生成了一篇新的文章。</p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20200410160701789.png" alt="image-20200410160701789" style="zoom:67%;" /><h4 id="3-4-3-Markdown-写作"><a href="#3-4-3-Markdown-写作" class="headerlink" title="3.4.3 Markdown 写作"></a>3.4.3 <strong>Markdown 写作</strong></h4><p>​    Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>​    这里推荐 Typora 这款 Markdown 写作软件。Typora 是一款免费的 MD 编辑器，它是优雅简洁与强大开放的完美结合体。官网直达 <a href="https://typora.io" target="_blank" rel="noopener">https://typora.io</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/10/hello-world/"/>
      <url>/2020/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
