<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【数据结构-二分法】二分搜索法</title>
      <link href="/2020/04/18/shu-ju-jie-gou-er-fen-fa-er-fen-sou-suo-fa/"/>
      <url>/2020/04/18/shu-ju-jie-gou-er-fen-fa-er-fen-sou-suo-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-二分搜索法定义"><a href="#1-二分搜索法定义" class="headerlink" title="1.二分搜索法定义"></a>1.二分搜索法定义</h3><p>&emsp;&emsp;<strong>二分查找</strong>（英语：binary search），也称<strong>折半搜索</strong>（英语：half-interval search）、<strong>对数搜索</strong>（英语：logarithmic search），是一种在<font color=#FF0000 ><strong>有序数组</strong></font>中查找某一特定元素的<font color=#FF0000 ><strong>搜索算法</strong></font>。</p><p>&emsp;&emsp;搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；</p><p>&emsp;&emsp;如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。</p><p>&emsp;&emsp;如果在某一步骤数组为空，则代表找不到。</p><p>&emsp;&emsp;这种搜索算法每一次比较都使搜索范围缩小一半。</p><h3 id="2-二分搜索法代码"><a href="#2-二分搜索法代码" class="headerlink" title="2.二分搜索法代码"></a>2.二分搜索法代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;对于上面这段代码而言，问题出在第 6 行代码处：</p><pre class=" language-java"><code class="language-java">mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;这句代码在 min 和 max 很大的时候，会出现溢出的情况，从而导致数组访问出错。</p><p>&emsp;&emsp;那怎么改进呢？一般的做法是这样的：<font color=#FF0000 ><strong>将加法变成减法</strong></font>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 防止溢出</span>            mid <span class="token operator">=</span>  min <span class="token operator">+</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;还有一种更高逼格的写法，也是官方的二分搜索法的实现写法：使用 <font color=#FF0000 ><strong>位运算</strong></font>。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>min <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 无符号位运算符的优先级较低，先括起来</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">+</span> max<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用"+"，然后"无符号右移(java才有)"是推荐写法</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-二分搜索模板"><a href="#3-二分搜索模板" class="headerlink" title="3.二分搜索模板"></a>3.二分搜索模板</h3><p>&emsp;&emsp;参考文章：<a href="https://mp.weixin.qq.com/s/1ojQ9aHdTTz8-Vt9fSAI8w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1ojQ9aHdTTz8-Vt9fSAI8w</a></p><h4 id="3-1模板一"><a href="#3-1模板一" class="headerlink" title="3.1模板一"></a>3.1模板一</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 防止计算越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;二分查找算法如果没有实现好，会有两种后果：</p><ul><li>&emsp;&emsp;<font color=#FF0000 >死循环</font></li><li>&emsp;&emsp;<font color=#FF0000 >跳过本该查找的位置</font></li></ul><h4 id="3-2-模板二"><a href="#3-2-模板二" class="headerlink" title="3.2 模板二"></a>3.2 模板二</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>根据条件返回 end 或者 start</code></pre><p>&emsp;&emsp;但是这个模版也有不好的地方，如果输入数组是 [1]，那么 while 循环结束后，要么是 start 超出数组范围，要么是 end 变成 -1，也就是说最后你不仅需要判断 start 和 end 对应的元素是不是要找的元素，还需要判断 start 和 end 是否是在合法的范围内，如果你这样做了，程序不会出错，你习惯了上面的模版，你可以继续使用，但是要知道会存在这么一个情况。</p><h4 id="3-3-模板三"><a href="#3-3-模板三" class="headerlink" title="3.3 模板三"></a>3.3 模板三</h4><ul><li><p>（1）<font color=#FF0000 ><strong>首先把循环可以进行的条件写成 <code>while(left &lt; right)</code>，在退出循环的时候，一定有 <code>left == right</code> 成立，此时返回 <code>left</code> 或者 <code>right</code> 都可以</strong></font></p></li><li><p>（2）思考左、右边界，如果左、右边界不包括目标数值，会导致错误结果</p><ul><li>&emsp;如果 <code>left</code> 和 <code>right</code> 表示的是数组的索引，就要考虑“索引是否有效” ，即“索引是否越界” 是重要的定界依据；</li><li>&emsp;左右边界一定要包括目标元素。</li></ul></li><li><p>（3）中位数先写 <code>int mid = (left + right) &gt;&gt;&gt; 1 ;</code> 根据循环里分支的编写情况，再做调整</p><p>&emsp;当数组的元素个数是偶数的时候，中位数有左中位数和右中位数之分。</p><p>&emsp;使用 <code>int mid = left + (right - left) / 2 ;</code> 得到左中位数的索引；</p><p>&emsp;使用 <code>int mid = left + (right - left + 1) / 2 ;</code> 得到右中位数的索引。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            等价于<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span>            等价于<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;什么时候使用左中位数，什么时候使用右中位数呢？选中位数的依据是为了避免死循环，得根据分支的逻辑来选择中位数，而分支逻辑的编写也有技巧。</p><ul><li>（4）先写逻辑上容易想到的分支逻辑，这个分支逻辑通常是<font color=#FF0000 >排除中位数的逻辑</font></li><li>（5）循环内只写两个分支，一个分支排除中位数，另一个分支不排除中位数，循环中不单独对中位数作判断</li></ul><p>&emsp;&emsp;既然是“夹逼”法，没有必要在每一轮循环开始前单独判断当前中位数是否是目标元素，因此分支数少了一支，代码执行效率更高。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640.webp" alt="二分查找模板"></p><p>&emsp;&emsp;还以 LeetCode 第 35 题为例，通过之前的分析，我们需要找到“大于或者等于目标值的第 1 个数的<strong>索引</strong>”。对于这道题而言：</p><p>&emsp;&emsp;1. 如果中位数小于目标值，它就应该被排除，左边界 <code>left</code> 就至少是 <code>mid + 1</code>；</p><p>&emsp;&emsp;2. 如果中位数大于等于目标值，还不能够肯定它就是我们要找的数，因为要找的是等于目标值的第 1 个数的<strong>索引</strong>，<strong>中位数以及中位数的左边都有可能是符合题意的数</strong>，因此右边界就不能把 <code>mid</code> 排除，因此右边界 <code>right</code> 至多是 <code>mid</code>，此时右边界不向左边收缩。</p><ul><li>（6）根据<font color=#FF0000 >分支逻辑选择中位数的类型</font>，可能是左中位数，也可能是右位数，选择的标准是避免死循环</li></ul><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640.jpg" alt="造成死循环的代码"></p><p><strong>&emsp;&emsp;选择中位数的依据是</strong>：避免出现死循环。我们需要确保：</p><blockquote><p>1、如果分支的逻辑，在选择左边界的时候，不能排除中位数，那么中位数就选“右中位数”，只有这样区间才会收缩，否则进入死循环；</p><p>2、同理，如果分支的逻辑，在选择右边界的时候，不能排除中位数，那么中位数就选“左中位数”，只有这样区间才会收缩，否则进入死循环。</p></blockquote><p>&emsp;&emsp;<strong>！！！每次可以用<code>left = 3</code>，<code>right = 4</code>来测试下是否会陷入死循环</strong></p><ul><li>（7）退出循环的时候，可能需要对“夹逼”剩下的那个数单独做一次判断，这一步称之为“后处理</li></ul><p>&emsp;&emsp;二分查找法之所以高效，是因为它利用了数组有序的特点，在每一次的搜索过程中，都可以排除将近一半的数，<font color=#FF0000 ><strong>使得搜索区间越来越小，直到区间成为一个数</strong></font>。回到这一节最开始的疑问：“区间左右边界相等（即收缩成 1 个数）时，这个数是否会漏掉”，解释如下：</p><p>&emsp;&emsp;1、<font color=#FF0000 ><strong>如果你的业务逻辑保证了你要找的数一定在左边界和右边界所表示的区间里出现</strong></font>，那么可以放心地返回 <code>left</code> 或者 <code>right</code>，无需再做判断；</p><p>&emsp;&emsp;2、如果你的业务逻辑不能保证你要找的数一定在左边界和右边界所表示的区间里出现，那么只要在退出循环以后，再针对<font color=#FF0000 > <code>nums[left]</code> </font>或者 <font color=#FF0000 ><code>nums[right]</code> </font>（此时 <code>nums[left] == nums[right]</code>）单独作一次判断，看它是不是你要找的数即可，这一步操作常常叫做“后处理”。</p><p>&emsp;&emsp;<strong>！！！如果你能确定候选区间里目标元素一定存在，则不必做“后处理”。</strong></p><ul><li>（8）取中位数的时候，要避免在计算上出现整型溢出</li></ul><p>&emsp;&emsp;<font color=#FF0000 ><code>int mid = left + (right - left) / 2;</code> </font> <code>right - left</code> 也有可能超过 int 类型能表示的最大值，只不过一般情况下 <code>left</code> 和 <code>right</code> 表示的是数组索引值，<code>left</code> 是非负数，因此 <code>right - left</code> 溢出的可能性很小。因此，它是正确的写法。</p><p>&emsp;&emsp;<font color=#FF0000 >int mid = (left + right) &gt;&gt;&gt; 1;</font><strong>如果这样写， <code>left + right</code> 在发生整型溢出以后，会变成负数，此时如果除以 2 ，<code>mid</code> 是一个负数，但是经过无符号右移，可以得到在不溢出的情况下正确的结果</strong>。</p><p>&emsp;&emsp;在 Java 中，无符号右移运算符 <code>&gt;&gt;&gt;</code> 和右移运算符 <code>&gt;&gt;</code> 的区别如下：</p><p>&emsp;&emsp;1. 右移运算符 <code>&gt;&gt;</code>：在右移时，丢弃右边指定位数，左边补上符号位；</p><p>&emsp;&emsp;2. 无符号右移运算符 <code>&gt;&gt;&gt;</code> ：在右移时，丢弃右边指定位数，左边补上 0，也就是说，对于正数来说，二者一样，而负数通过 <code>&gt;&gt;&gt;</code> 后能变成正数。</p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h3><h4 id="4-1技巧"><a href="#4-1技巧" class="headerlink" title="4.1技巧"></a>4.1技巧</h4><blockquote><p>先写分支逻辑，并且先写排除中位数的逻辑分支（因为更多时候排除中位数的逻辑容易想，但是前面我也提到过，这并不绝对），另一个分支的逻辑你就不用想了，写出第 1 个分支的反面代码即可（下面的说明中有介绍），再根据分支的情况选择使用左中位数还是右中位数；</p></blockquote><p>&emsp;&emsp;我简单总结了一下，左右分支的规律就如下两点：</p><p>&emsp;&emsp;（1）如果第 1 个分支的逻辑是“左边界排除中位数”（<font color=#FF0000 ><code>left = mid + 1</code></font>），那么第 2 个分支的逻辑就一定是“右边界不排除中位数”（<font color=#FF0000 ><code>right = mid</code></font>），反过来也成立；</p><p>&emsp;&emsp;（2）如果第 2 个分支的逻辑是“右边界排除中位数”（<font color=#FF0000 ><code>right = mid - 1</code></font>），那么第 2 个分支的逻辑就一定是“左边界不排除中位数”（<font color=#FF0000 ><code>left = mid</code></font>），反之也成立。</p><h4 id="4-2-注意事项"><a href="#4-2-注意事项" class="headerlink" title="4.2 注意事项"></a>4.2 注意事项</h4><blockquote><p>左中位数还是右中位数选择的标准根据分支的逻辑而来，标准是每一次循环都应该让区间收缩，当候选区间只剩下 2 个元素的时候，为了避免死循环发生，选择正确的中位数类型。如果你实在很晕，不防就使用有 2 个元素的测试用例，就能明白其中的原因，另外在代码出现死循环的时候，建议你可以将左边界、右边界、你选择的中位数的值，还有分支逻辑都打印输出一下，出现死循环的原因就一目了然了；</p></blockquote><blockquote><p>如果能确定要找的数就在候选区间里，那么退出循环的时候，区间最后收缩成为 1 个数后，直接把这个数返回即可；如果你要找的数有可能不在候选区间里，区间最后收缩成为 1 个数后，还要单独判断一下这个数是否符合题意。</p></blockquote><h4 id="4-3-参考模板"><a href="#4-3-参考模板" class="headerlink" title="4.3 参考模板"></a>4.3 参考模板</h4><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640-1587455129065.jpg" alt=""></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%88%86%E6%B3%95%E3%80%91%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%B3%95/640-1587455139736.webp" alt="img"></p><p>&emsp;&emsp;<strong>说明</strong>：一般是先默认将中位数写成左中位数，再根据分支的情况，看看是否有必要调整成右中位数，即是不是要在 <code>(right - left)</code> 这个括号里面加 1 。</p><blockquote><p><font color=#FF0000 ><strong>虽说是两个模板，区别在于选中位数，中位数根据分支逻辑来选，原则是区间要收缩，且不出现死循环，退出循环的时候，视情况，有可能需要对最后剩下的数单独做判断</strong>。</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 二分法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】LeetCode 第 41 号问题：缺失的第一个正数</title>
      <link href="/2020/04/17/shu-ju-jie-gou-shu-zu-leetcode-di-41-hao-wen-ti-que-shi-de-di-yi-ge-zheng-shu/"/>
      <url>/2020/04/17/shu-ju-jie-gou-shu-zu-leetcode-di-41-hao-wen-ti-que-shi-de-di-yi-ge-zheng-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h3><p>&emsp;&emsp;给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-41-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/image-20200417165014091.png" alt=""></p><h3 id="2-题目解析"><a href="#2-题目解析" class="headerlink" title="2.题目解析"></a>2.题目解析</h3><p>&emsp;&emsp;这道题如果不加上  <em>O(n)</em> 时间和  <em>O(1)</em> 空间这样的限定条件，应该再简单不过，但是加上了这两个要求，一下子使问题变得棘手。</p><p>&emsp;&emsp;首先这道题给定的条件很有限，输入参数就 <font color=#FF0000 ><strong>只有数组</strong></font> ，如果非要用  <em>O(n)</em> 时间和  <em>O(1)</em> 空间来做的话，表示我们除了<font color=#FF0000 ><strong>输入数组</strong></font>以外，不能借助任何其他的数据结构。</p><p>&emsp;&emsp;数组应该是属于一类最最基础的数据结构，除去 length 之外，<font color=#FF0000 >就只有两个属性 <em>index*和 *value</em></font>，那这道题就变成了 <font color=#FF0000 ><strong>如何利用数组的 value 和 index 之间的关系来找到最小缺失正整数</strong> </font>，如果想到了这一点，就已经成功了一半。</p>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】LeetCode-第-287-号问题：寻找重复数</title>
      <link href="/2020/04/16/shu-ju-jie-gou-shu-zu-leetcode-di-287-hao-wen-ti-xun-zhao-chong-fu-shu/"/>
      <url>/2020/04/16/shu-ju-jie-gou-shu-zu-leetcode-di-287-hao-wen-ti-xun-zhao-chong-fu-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="1-技巧"><a href="#1-技巧" class="headerlink" title="1.技巧"></a>1.技巧</h3><p>&emsp;&emsp;二分法的使用 <strong>并不一定</strong> 需要在排序好的数组上面进行，<strong>不要让常见的例题限制了你的思路</strong>，二分法还有一个比较高级的用法叫做 <font color=#FF0000 ><strong>按值二分</strong></font>。</p><h3 id="2-题目描述"><a href="#2-题目描述" class="headerlink" title="2.题目描述"></a>2.题目描述</h3><p>&emsp;&emsp;给定一个包含 <em>n + 1</em> 个整数的数组 <em>nums</em>，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-287-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/image-20200416115812874.png" alt=""></p><h3 id="3-题目解析"><a href="#3-题目解析" class="headerlink" title="3.题目解析"></a>3.题目解析</h3><p>&emsp;&emsp;由于限制条件太多了，很多方法都不能用！</p><p>&emsp;&emsp;假如没有这些限制，可以采取的方法有：</p><ul><li><font color=#FF0000 >不能更改原数组</font>导致无法排序，也无法用<font color=#FF0000 >index 和元素建立关系</font> index 和元素建立关系；</li><li><font color=#FF0000 >只能使用 O(1) 的空间</font>意味着使用<font color=#FF0000 >哈希表去计数</font>这条路也走不通；</li><li><font color=#FF0000 >时间复杂度必须小于 O(n^2)</font>意味着不能用<font color=#FF0000 >暴力解法</font>；</li><li><font color=#FF0000 >重复数字可以重复出现</font>通过<font color=#FF0000 >累加求和然后做差 <code>sum(array) - sum(1,2,...,n)</code> 的方式</font>也变得不可行。</li></ul><p>&emsp;&emsp;<font color=#FF0000 ><strong>什么样的算法可以不使用额外的空间解决数组上面的搜索问题？</strong></font></p><p>&emsp;&emsp;<font color=#FF0000 ><strong>二分查找！！</strong></font></p><p>&emsp;&emsp;这道题目交代的信息很少，<strong>我们只需要关注两个东西 - 数组，数组里的元素</strong>，利用二分我们需要去思考的是，我们要找符合条件的元素作为答案，那么 <font color=#FF0000 ><strong>比答案小的元素具有什么样的特质，比答案大的元素又具有什么样的特质？</strong></font>结合题目给我们的例子来看看：</p><p>&emsp;&emsp;例1：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>                      元素个数<span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：<span class="token number">1</span>                       <span class="token number">1</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span>                 <span class="token number">3</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span>              <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>           <span class="token number">5</span></code></pre><p>&emsp;&emsp;例2:</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：<span class="token number">1</span>                        <span class="token number">1</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>                     <span class="token number">2</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span>               <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>            <span class="token number">5</span></code></pre><p>&emsp;&emsp;极端一点的例子 (必须保证数组的长度是 n + 1, 并且元素都在区间[1,n] 上, 有且只有一个重复)</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span> <span class="token number">1</span> 的元素：                        <span class="token number">0</span><span class="token operator">&lt;=</span> <span class="token number">2</span> 的元素：                        <span class="token number">0</span><span class="token operator">&lt;=</span> <span class="token number">3</span> 的元素：<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span>              <span class="token number">4</span><span class="token operator">&lt;=</span> <span class="token number">4</span> 的元素：<span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>           <span class="token number">5</span></code></pre><p>&emsp;&emsp;看完上面几个例子，相信你明白了一个事实:</p><ul><li>如果选中的数<font color=#FF0000 > <strong>小于</strong></font> 我们要找的答案，那么整个数组中小于或等于该数的元素个数必然小于或等于该元素的值;</li><li>如果选中的数<font color=#FF0000 > <strong>大于或等于</strong></font> 我们要找的答案，那么整个数组中小于或等于该数的元素个数必然<font color=#FF0000 >大于</font>该元素的值</li></ul><p>&emsp;&emsp;而且你可以看到，我们要找的答案其实就处于一个分界点的位置，寻找边界值，这又是二分的一个应用，而且题目已经告诉我们数组里面的值只可能在 [1, n] 之间，这么一来，思路就是在 [1, n] 区间上做二分，然后按我们之前提到的逻辑去做分割。整个解法的时间复杂度是 <strong>O(nlogn)</strong>，也是满足题目要求的。</p><p>&emsp;&emsp;动画描述参考：<a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247486581&amp;idx=1&amp;sn=0ed7d74ba7ebf427c58ade56bc4f8f68" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247486581&amp;idx=1&amp;sn=0ed7d74ba7ebf427c58ade56bc4f8f68</a></p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91LeetCode-%E7%AC%AC-287-%E5%8F%B7%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/image-20200417163357019.png" alt=""></p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 统计数组中小于等于mid的元素个数counter</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter <span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">></span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果个数counter大于mid，则下次应该在[start，mid]之间找寻</span>                end <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 否则，在[mid+1，end]之间找寻</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-Python"><code class="language-Python">def findDuplicate(list):    length = len(list)    start = 1    end = length - 1    while(start < end):        counter = 0        mid = int(start + (end - start) / 2)        for i in list:            if(i <= mid):                counter += 1        if(counter > mid):            end = mid        else:            start = mid + 1    return start</code></pre><p>&emsp;&emsp;C语言代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> arraylength<span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> len <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>                counter <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>counter <span class="token operator">></span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>            end <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> start<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"testing...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arraylength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5-另一种解题思路"><a href="#5-另一种解题思路" class="headerlink" title="5.另一种解题思路"></a>5.另一种解题思路</h3><p>&emsp;&emsp;另外一种 O(n) 的解法借鉴快慢指针找交点的思想，算法非常的巧妙，也非常的有趣，但不太容易想到，这里把代码放上。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//快慢指针</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fast <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
          <category> 二分法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构-数组】如何高效对有序数组/链表去重？</title>
      <link href="/2020/04/15/shu-ju-jie-gou-shu-zu-shu-zu-ji-qiao/"/>
      <url>/2020/04/15/shu-ju-jie-gou-shu-zu-shu-zu-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h3 id="1-数组简介"><a href="#1-数组简介" class="headerlink" title="1.数组简介"></a>1.数组简介</h3><p>&emsp;&emsp;数组，将元素存储到内存的连续位置中，是最基本的数据结构。在任何和编程相关的面试中，都会被问到和数组相关的问题，可以说是非常热门的考题之一。比如：将数组反转、对数组进行排序、搜索数组中的元素等。</p><h3 id="2-数组优缺点"><a href="#2-数组优缺点" class="headerlink" title="2.数组优缺点"></a>2.数组优缺点</h3><h4 id="2-1优点"><a href="#2-1优点" class="headerlink" title="2.1优点"></a>2.1优点</h4><p>&emsp;&emsp;数组数据结构的主要优点是如果知道索引就可以通过 O(l) 进行快速搜索，</p><h4 id="2-2数组缺点"><a href="#2-2数组缺点" class="headerlink" title="2.2数组缺点"></a>2.2数组缺点</h4><p>&emsp;&emsp;在数组中添加和删除元素的速度会很慢，因为数组一旦被创建，就无法更改其大小。如果需要创建更长或更短的数组，得先创建一个新数组，再把原数组中的所有元素复制到新创建的数组中。</p><h3 id="3-数组解题技巧"><a href="#3-数组解题技巧" class="headerlink" title="3.数组解题技巧"></a>3.数组解题技巧</h3><ul><li>&emsp;&lt;1&gt; 对于数组来说，<font color=#FF0000 >在尾部插入、删除元素是比较高效的</font>，时间复杂度是 O(1)，但是如果在中间或者开头插入、删除元素，就会涉及数据的搬移，时间复杂度为 O(N)。我们要<font color=#FF0000 >尽可能只对数组尾部的元素进行操作</font>，以避免额外的时间复杂度。</li><li>&emsp;&lt;2&gt; <strong>对于数组相关的算法问题，有一个通用的技巧：要尽量避免在中间删除元素，那我就先想办法把这个元素换到最后去</strong>。这样的话，最终待删除的元素都拖在数组尾部，一个一个 pop 掉就行了，每次操作的时间复杂度也就降低到 O(1) 了。按照这个思路呢，又可以衍生出解决类似需求的通用方式：<font color=#FF0000 >快慢指针</font>。</li></ul><h3 id="4-精选面试题：如何高效对有序数组-链表去重？"><a href="#4-精选面试题：如何高效对有序数组-链表去重？" class="headerlink" title="4.精选面试题：如何高效对有序数组/链表去重？"></a>4.精选面试题：如何高效对有序数组/链表去重？</h3><p>&emsp;&emsp;先看题目</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91%E6%95%B0%E7%BB%84%E6%8A%80%E5%B7%A7/image-20200415120136464.png" alt="题目"></p><p>&emsp;&emsp;显然，由于数组已经排序，所以重复的元素一定连在一起，找出它们并不难，但如果使用暴力解法的话，整个时间复杂度是会达到 O(N^2)。而且题目要求我们原地修改，也就是说不能用辅助数组，空间复杂度得是 O(1)。</p><p>&emsp;&emsp;我们使用快慢指针进行解题：让慢指针<code>slow</code>走左后面，快指针<code>fast</code>走在前面探路，找到一个不重复的元素就告诉<code>slow</code>并让<code>slow</code>前进一步。这样当<code>fast</code>指针遍历完整个数组<code>nums</code>后，<code>nums[0..slow]</code>就是不重复元素，之后的所有元素都是重复元素。</p><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                slow<span class="token operator">++</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fast<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"array["</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"] = "</span> <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span>  <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    slow<span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> list<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            slow <span class="token operator">+=</span> <span class="token number">1</span>            list<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>        fast <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'list[%d]=%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span></code></pre><p>&emsp;&emsp;C语言代码：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> arraylength<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">!=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            slow <span class="token operator">++</span><span class="token punctuation">;</span>            array<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">else</span><span class="token punctuation">{</span>            fast <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>slow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"array[%d]:%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arraylength <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> arraylength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;看下算法执行的过程：</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91%E6%95%B0%E7%BB%84%E6%8A%80%E5%B7%A7/640.gif" alt="有序数组去重"></p><p>&emsp;&emsp;再简单扩展一下，如果给你一个有序链表，如何去重呢？其实和数组是一模一样的，唯一的区别是把数组赋值操作变成操作指针而已：</p><p>&emsp;&emsp;java代码：</p><pre class=" language-java"><code class="language-java"></code></pre><p>&emsp;&emsp;Python代码：</p><pre class=" language-python"><code class="language-python"></code></pre><p>&emsp;&emsp;看下算法执行的过程：</p><p><img src="/images/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84%E3%80%91%E6%95%B0%E7%BB%84%E6%8A%80%E5%B7%A7/640-1586935359752.gif" alt="有序链表去重"></p>]]></content>
      
      
      <categories>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业一】线性回归-PM2.5预测</title>
      <link href="/2020/04/13/zuo-ye-yi-xian-xing-hui-gui-pm2.5-yu-ce/"/>
      <url>/2020/04/13/zuo-ye-yi-xian-xing-hui-gui-pm2.5-yu-ce/</url>
      
        <content type="html"><![CDATA[<h2 id="一、作业说明及数据获取"><a href="#一、作业说明及数据获取" class="headerlink" title="一、作业说明及数据获取"></a>一、作业说明及数据获取</h2><p>给定训练集train.csv，要求根据前9个小时的空气监测情况预测第10个小时的PM2.5含量。</p><p>训练集介绍：</p><ul><li><p>(1) CSV文件，包含台湾丰原地区240天的气象观测资料(取每个月前20天的数据做训练集，12月X20天=240天，每月后10天数据用于测试，对学生不可见);</p></li><li><p>(2) 每天的监测时间点为0时，1时……到23时，共24个时间节点;</p></li><li><p>(3) 每天的检测指标包括CO、NO、PM2.5、PM10等气体浓度，是否降雨、刮风等气象信息，共计18项；</p></li><li><p>(4) 数据下载地址：<a href="https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A" target="_blank" rel="noopener">https://pan.baidu.com/s/17mJnAGLtRadHtdZLX1k43A</a> </p><p>​    提取码：vcj8</p></li></ul><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413153133242.png" alt="train.csv文件内容"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413153302263.png" alt="test.csv文件部分内容"></p><h2 id="二、程序实现"><a href="#二、程序实现" class="headerlink" title="二、程序实现"></a>二、程序实现</h2><h3 id="2-1-加载CSV文件"><a href="#2-1-加载CSV文件" class="headerlink" title="2.1 加载CSV文件"></a>2.1 加载CSV文件</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_csv</span><span class="token punctuation">(</span>train_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> usecols<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># usecols=range(3,27)：表示选择第3列到第27列数据</span><span class="token comment" spellcheck="true">#     pf = pd.read_csv(path, encoding='big5')</span><span class="token comment" spellcheck="true">#     data = pf.iloc[:, 3:]  # 另一种选择数据的方法</span>    <span class="token keyword">return</span> data</code></pre><h3 id="2-2-数据预处理"><a href="#2-2-数据预处理" class="headerlink" title="2.2 数据预处理"></a>2.2 数据预处理</h3><p>&emsp;&emsp;浏览数据可知，数据中存在一定量的空数据NR，且多存在于RAINFALL一项。对于空数据，常规的处理方法无非就是删除法和补全法两种。查阅资料后发现，RAINFALL表示当天对应时间点是否降雨，有降雨值为1，无降雨值为NR，类似于布尔变量。因此可以采用补全法处理空数据：将空数据NR全部补为0即可。</p><p>&emsp;&emsp;根据作业要求可知，需要用到连续9个时间点的气象观测数据，来预测第10个时间点的PM2.5含量。针对每一天来说，其包含的信息维度为(18,24)(18项指标，24个时间节点)。可以将0到8时的数据截取出来，形成一个维度为(18,9)的数据帧，作为训练数据，将9时的PM2.5含量取出来，作为该训练数据对应的label；同理可取1到9时的数据作为训练用的数据帧，10时的PM2.5含量作为label……以此分割，可将每天的信息分割为15个shape为(18,9)的数据帧和与之对应的15个label。</p><p>&emsp;&emsp;训练集中共包含240天的数据，因此共可获得240X15=3600个数据帧和与之对应的3600个label。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dataprocess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将空数据NR替换为0</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># data ----> [4320, 24]</span><span class="token comment" spellcheck="true">#   data[data == 'NR'] = 0.0  </span>    <span class="token comment" spellcheck="true"># 将data数据类型转换为&lt;class 'numpy.ndarray'></span><span class="token comment" spellcheck="true">#   array = np.array(data).astype(float)</span>    array <span class="token operator">=</span> data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># array ----> [4320, 24]</span>    <span class="token comment" spellcheck="true"># 第一种训练集数据划分：每天24小时，可以将0到8时的数据截取出来，形成一个维度为(18,9)的数        据帧，作为训练数据，将9时的PM2.5含量取出来，作为该训练数据对应的label；同理可取1到9时       的数据作为训练用的数据帧，10时的PM2.5含量作为label......以此分割，可将每天的信息分       割为15个shape为(18,9)的数据帧和与之对应的15个label。</span>    x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4320</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mat 是作为一个整体添加的，相当于x_list里的一个元素, x_list的个数相当于样本的个数</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x ----> [3600, 162]</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># y ----> [3600, 1]</span><span class="token comment" spellcheck="true">#     x_list, y_list = [], []</span><span class="token comment" spellcheck="true">#     month_data = {}</span><span class="token comment" spellcheck="true">#     for month in range(12):</span><span class="token comment" spellcheck="true">#         sample = np.empty([18, 480])</span><span class="token comment" spellcheck="true">#         for day in range(20):</span><span class="token comment" spellcheck="true">#             sample[:, day * 24 : (day+1) *24] = array[18 * (20*month+day): 18 * (20*month+day+1), :]</span><span class="token comment" spellcheck="true">#         month_data[month] = sample</span><span class="token comment" spellcheck="true">#     for i in range(12):</span><span class="token comment" spellcheck="true">#         for j in range(480-9):</span><span class="token comment" spellcheck="true">#             mat = month_data[i][:, j:j+9]</span><span class="token comment" spellcheck="true">#             label = month_data[i][9,j+9]</span><span class="token comment" spellcheck="true">#             x_list.append(mat)</span><span class="token comment" spellcheck="true">#             y_list.append(label)</span><span class="token comment" spellcheck="true">#         x = np.array(x_list).reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#         y = np.array(y_list).reshape(-1,1)</span><span class="token comment" spellcheck="true">#     x_train = x[:int(len(x)*0.8),:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     x_validation = x[int(len(x)*0.8):,:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     y_train = y[:int(len(y)*0.8)]</span><span class="token comment" spellcheck="true">#     y_validation = y[int(len(y)*0.8)]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y</code></pre><p>&emsp;&emsp;第二种训练集数据划分：在从csv文件中提取数据帧和label时，第一种方法是以天为单位，每天分割出15个数据帧和15个label。事实上，时间是连续的，可以将每月的20天首尾连接，再从其中分割数据帧和label，可使数据帧样本数量大大提升。</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/20200410145553875.png" alt="提取特征"></p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/20200410150256239.png" alt="提取特征"></p><pre class=" language-python"><code class="language-python">     x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 將原始 4320 * 24 的数据依照每个月分成 12个18 (features) * 480 (hours) 的数据。 </span>     month_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">for</span> month <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         sample <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">for</span> day <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             sample<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> day <span class="token operator">*</span> <span class="token number">24</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">18</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>month<span class="token operator">+</span>day<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">*</span>month<span class="token operator">+</span>day<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>         month_data<span class="token punctuation">[</span>month<span class="token punctuation">]</span> <span class="token operator">=</span> sample     <span class="token comment" spellcheck="true"># 每个月20天有 480hrs，每 9 小时形成一个 data，每月有 471 个 data，故总数据为 471 * 12 个 ，而每个 data 有 9 * 18 的 features (一小时 18 个 features * 9 小时)。对应的 labels 有 471 * 12 个(第 10 个小时的 PM2.5)</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">480</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             mat <span class="token operator">=</span> month_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>             label <span class="token operator">=</span> month_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>             x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>             y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>         x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x ----> [5652, 162]</span>         y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># y ----> [5652, 1]</span></code></pre><h3 id="2-3-标准化"><a href="#2-3-标准化" class="headerlink" title="2.3 标准化"></a>2.3 标准化</h3><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200419210629193.png" alt="标准化两种形式"></p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#12 * 471</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#18 * 9 </span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x</code></pre><h3 id="2-4-训练train"><a href="#2-4-训练train" class="headerlink" title="2.4 训练train"></a>2.4 训练train</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_real <span class="token operator">=</span> y    learning_rate <span class="token operator">=</span> lr    iter_time <span class="token operator">=</span> epochs    dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在原x数据后面再加一维  x1 ----> [3600, 163]</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x1_transpose <span class="token operator">=</span> x1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>    w_adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 损失函数loss用rmse</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># print(loss.shape)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 变量w的梯度 w_gradient -----> [163, 1]</span>        w_gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1_transpose<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 变量w的梯度平方和</span>        w_adagrad <span class="token operator">+=</span> w_gradient <span class="token operator">**</span> <span class="token number">2</span>        <span class="token comment" spellcheck="true"># 梯度更新</span>        w <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> w_gradient <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>w_adagrad <span class="token operator">+</span> eps<span class="token punctuation">)</span>    <span class="token keyword">return</span> w</code></pre><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413161334114.png" alt="训练结果"></p><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span><span class="token punctuation">:</span>    pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'big5'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> pf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    test_data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> test_data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> float<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x_test<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i <span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test</code></pre><h3 id="2-6-main-函数"><a href="#2-6-main-函数" class="headerlink" title="2.6 main()函数"></a>2.6 main()函数</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span> <span class="token string">'./data/train.csv'</span>    data <span class="token operator">=</span> load_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> dataprocess<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    lr <span class="token operator">=</span> <span class="token number">100</span>    epochs <span class="token operator">=</span> <span class="token number">1000</span>    w <span class="token operator">=</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">,</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_path <span class="token operator">=</span> <span class="token string">'./data/test.csv'</span>    x_test <span class="token operator">=</span> test<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span>    w1 <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">)</span>    y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将预测结果保存到submit.csv</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/submit.csv'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>        csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(header)</span>        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(row)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-7-整体代码"><a href="#2-7-整体代码" class="headerlink" title="2.7 整体代码"></a>2.7 整体代码</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># coding: utf-8</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> csv<span class="token keyword">def</span> <span class="token function">load_csv</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>path<span class="token punctuation">,</span> usecols<span class="token operator">=</span>range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'big5'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#     pf = pd.read_csv(path, encoding='big5')</span><span class="token comment" spellcheck="true">#     data = pf.iloc[:, 3:]</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">dataprocess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#   data[data == 'NR'] = 0.0  </span><span class="token comment" spellcheck="true">#   array = np.array(data).astype(float)</span>    array <span class="token operator">=</span> data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x_list<span class="token punctuation">,</span> y_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4320</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">24</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            mat <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">18</span><span class="token punctuation">,</span> j<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            label <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">9</span><span class="token punctuation">]</span>            x_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mat<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mat 是作为一个整体添加的，相当于x_list里的一个元素, x_list的个数相当于样本的个数</span>            y_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>x_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">)</span>          y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y_list<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#     month_data = {}</span><span class="token comment" spellcheck="true">#     for month in range(12):</span><span class="token comment" spellcheck="true">#         sample = np.empty([18, 480])</span><span class="token comment" spellcheck="true">#         for day in range(20):</span><span class="token comment" spellcheck="true">#             sample[:, day * 24 : (day+1) *24] = array[18 * (20*month+day): 18 * (20*month+day+1), :]</span><span class="token comment" spellcheck="true">#         month_data[month] = sample</span><span class="token comment" spellcheck="true">#     x_list, y_list = [], []</span><span class="token comment" spellcheck="true">#     for i in range(12):</span><span class="token comment" spellcheck="true">#         for j in range(480-9):</span><span class="token comment" spellcheck="true">#             mat = month_data[i][:, j:j+9]</span><span class="token comment" spellcheck="true">#             label = month_data[i][9,j+9]</span><span class="token comment" spellcheck="true">#             x_list.append(mat)</span><span class="token comment" spellcheck="true">#             y_list.append(label)</span><span class="token comment" spellcheck="true">#         x = np.array(x_list).reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#         y = np.array(y_list).reshape(-1,1)</span><span class="token comment" spellcheck="true">#     x_train = x[:int(len(x)*0.8),:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     x_validation = x[int(len(x)*0.8):,:,:].reshape(-1, 18*9)</span><span class="token comment" spellcheck="true">#     y_train = y[:int(len(y)*0.8)]</span><span class="token comment" spellcheck="true">#     y_validation = y[int(len(y)*0.8)]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span>y<span class="token keyword">def</span> <span class="token function">normalize</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    mean_x <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    std_x <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#18 * 9 </span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#12 * 471</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#18 * 9 </span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    y_real <span class="token operator">=</span> y    learning_rate <span class="token operator">=</span> lr    iter_time <span class="token operator">=</span> epochs    dim <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3600</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    x1_transpose <span class="token operator">=</span> x1<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token punctuation">)</span>    learning_rate <span class="token operator">=</span> <span class="token number">100</span>    iter_time <span class="token operator">=</span> <span class="token number">1000</span>    w_adagrad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span>dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    eps <span class="token operator">=</span> <span class="token number">0.0000000001</span>    <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter_time<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">471</span><span class="token operator">/</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#rmse</span>       <span class="token comment" spellcheck="true"># print(loss.shape)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        w_gradient <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1_transpose<span class="token punctuation">,</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> w<span class="token punctuation">)</span> <span class="token operator">-</span> y_real<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#dim*1</span>        w_adagrad <span class="token operator">+=</span> w_gradient <span class="token operator">**</span> <span class="token number">2</span>        w <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> w_gradient <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>w_adagrad <span class="token operator">+</span> eps<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># np.save('weight.npy', w)</span>    <span class="token keyword">return</span> w<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span><span class="token punctuation">:</span>    pf <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> header <span class="token operator">=</span> None<span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">'big5'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> pf<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    test_data <span class="token operator">=</span> data<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'NR'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_data <span class="token operator">=</span> test_data<span class="token punctuation">.</span>to_numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype <span class="token operator">=</span> float<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x_test<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token number">18</span><span class="token operator">*</span>i <span class="token punctuation">:</span> <span class="token number">18</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> mean_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> std_x<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>float<span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span> <span class="token string">'./data/train.csv'</span>    data <span class="token operator">=</span> load_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> y <span class="token operator">=</span> dataprocess<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    x<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    lr <span class="token operator">=</span> <span class="token number">100</span>    epochs <span class="token operator">=</span> <span class="token number">1000</span>    w <span class="token operator">=</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">,</span> train<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> epochs<span class="token punctuation">)</span><span class="token punctuation">)</span>    test_path <span class="token operator">=</span> <span class="token string">'./data/test.csv'</span>    x_test <span class="token operator">=</span> test<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> std_x<span class="token punctuation">,</span> mean_x<span class="token punctuation">)</span>    w1 <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'weight.npy'</span><span class="token punctuation">)</span>    y_hat <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> w1<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/submit.csv'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">,</span> newline<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">as</span> submit_file<span class="token punctuation">:</span>        csv_writer <span class="token operator">=</span> csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>submit_file<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#print(header)</span>        csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>header<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> y_hat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            csv_writer<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span>row<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#print(row)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>&emsp;&emsp;保存的submit.csv文件部分内容如下:</p><p><img src="/images/%E3%80%90%E4%BD%9C%E4%B8%9A%E4%B8%80%E3%80%91%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92-PM2.5%E9%A2%84%E6%B5%8B/image-20200413173310799.png" alt="submit.csv文件部分内容"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性回归 </tag>
            
            <tag> PM2.5预测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2020/04/10/bo-ke-da-jian/"/>
      <url>/2020/04/10/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<p>&emsp;通过 GitHub + hexo 来搭建个人博客！！</p><p>参考链接：</p><p>&emsp;1.超全面！如何用 GitHub 从零开始搭建一个博客 ？</p><p>&emsp;&emsp;<a href="https://www.cxyxiaowu.com/6407.html" target="_blank" rel="noopener">https://www.cxyxiaowu.com/6407.html</a></p><p>&emsp;2.【新手向】从零开始搭建一个酷炫免费的个人博客</p><p>&emsp;&emsp;<a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484589&amp;idx=1&amp;sn=7ef61ad418eb4b16d3587a5859f5ce8e&amp;chksm=fa0e6b2ccd79e23afc1767f07afeec6f3dd3de0be44be01c7548afd6476015b0c3d91528088c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&amp;mid=2247484589&amp;idx=1&amp;sn=7ef61ad418eb4b16d3587a5859f5ce8e&amp;chksm=fa0e6b2ccd79e23afc1767f07afeec6f3dd3de0be44be01c7548afd6476015b0c3d91528088c&amp;scene=21#wechat_redirect</a></p><h2 id="一、GitHub创建个人仓库"><a href="#一、GitHub创建个人仓库" class="headerlink" title="一、GitHub创建个人仓库"></a>一、GitHub创建个人仓库</h2><p>&emsp;1.登录到 GitHub：<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p><p>&emsp;2.登录成功之后，点击 GitHub 中的 New repository 创建新仓库，仓库的名字可以随便起，不过这个仓库是作为我们的博客仓库的，所以尽量将名字以 {username}.github.io 的形式来起。</p><p>&emsp;&emsp;比如，我的GitHub用户名是lewky，我就会把这个仓库命名为lewky.github.io。（为什么要这样起名，后面会说明）</p><p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410150210713.png" alt=""></p><h2 id="二、相关软件安装及配"><a href="#二、相关软件安装及配" class="headerlink" title="二、相关软件安装及配"></a>二、相关软件安装及配</h2><h3 id="2-1-安装-Node-js"><a href="#2-1-安装-Node-js" class="headerlink" title="2.1 安装 Node.js"></a>2.1 安装 Node.js</h3><p>&emsp;&emsp;首先在自己的电脑上安装 Node.js，下载地址：<a href="https://pan.baidu.com/s/1lOE7p3GIX516fQIW_gAtZg" target="_blank" rel="noopener">https://pan.baidu.com/s/1lOE7p3GIX516fQIW_gAtZg</a> ，提取码：udo2 </p><h3 id="2-2-安装Git"><a href="#2-2-安装Git" class="headerlink" title="2.2 安装Git"></a>2.2 安装Git</h3><p>&emsp;&emsp;这是使用 Git 的目的是为了将我们的网站从本地提交上服务器（GitHub）上面去。我认为 Git 操作是程序员应该具备的一个基本操作，具体的 Git 操作细节可以查看廖雪峰的教程，讲的十分详细： <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p><p>&emsp;&emsp;下载地址同样在上面的百度网盘里</p><h4 id="2-2-1-Git配置"><a href="#2-2-1-Git配置" class="headerlink" title="2.2.1 Git配置"></a>2.2.1 Git配置</h4><p>​        <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410151626711.png" style="zoom:67%;" /></p><p>&emsp;&emsp;进入Git Bash终端进行如下操作，设置user.name 和 user.email 配置信息</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><h4 id="2-2-2-SSH-key的创建与配置"><a href="#2-2-2-SSH-key的创建与配置" class="headerlink" title="2.2.2 SSH key的创建与配置"></a>2.2.2 SSH key的创建与配置</h4><p>&emsp;&emsp;最关键的一步来了，我们需要生成一对密钥对，然后将公钥配置到GitHub账号上。</p><p>&emsp;<strong>1.生成RSA密钥对</strong></p><p>&emsp;&emsp;通过注册的邮箱生成 ssh 密钥文件:</p><pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre><p>&emsp;&emsp;然后直接三个回车即可，默认不需要设置密码。最后得到了两个文件：<code>id_rsa</code>和<code>id_rsa.pub</code>。</p><p>&emsp;<strong>2.拷贝密钥</strong></p><p>&emsp;&emsp;打开 <code>id_rsa.pub 文件</code>，将里面的内容全部复制。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410152745234.png" style="zoom:67%;" /><p>&emsp;<strong>3.在 GitHub 上配置SSH key</strong></p><p>&emsp;&emsp;<em>·*</em>进入Setting页面</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410153129263.png" style="zoom:67%;" /><p>&emsp;&emsp;<strong>·</strong>选择 SSH and GPG keys</p><p>&emsp;&emsp;<strong>·</strong>点击 New SSH key</p><p>&emsp;&emsp;<strong>·</strong>填写Title（用来给公钥起一个名字，以便和其他的公钥区分开来）</p><p>&emsp;&emsp;<strong>·</strong>然后在 Key 里将我们刚刚复制的公钥复制进去</p><p>&emsp;&emsp;<strong>·</strong>最后点击 Add SSH key，这时候 GitHub 会要你输入账号密码进行确认。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410153702312.png" style="zoom:67%;" /><p>&emsp;<strong>4.测试GitHub SSH</strong></p><p>&emsp;&emsp;添加好 <code>SSH Key</code>后，进行测试。使用 Git Bash 输入：</p><pre><code>ssh -T git@github.com</code></pre><p>&emsp;&emsp;你将会看到：</p><pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?</code></pre><p>&emsp;&emsp;选择 <code>yes</code></p><pre><code>Hi MisterBooo! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>​        <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410154105469.png" style="zoom: 80%;" /></p><p>&emsp;&emsp;如果看到<code>Hi</code>后面是你的用户名，就说明成功了。</p><h3 id="2-3-Hexo安装"><a href="#2-3-Hexo安装" class="headerlink" title="2.3 Hexo安装"></a>2.3 Hexo安装</h3><p>&emsp;&emsp;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>&emsp;&emsp;使用 Git Bash 输入：</p><pre><code>npm install -g hexo-cli</code></pre><p>&emsp;&emsp;安装完毕之后，确保环境变量配置好，能正常使用 <code>hexo</code> 命令。</p><h2 id="三、通过hexo搭建博客"><a href="#三、通过hexo搭建博客" class="headerlink" title="三、通过hexo搭建博客"></a>三、通过hexo搭建博客</h2><h3 id="3-1初始化博客"><a href="#3-1初始化博客" class="headerlink" title="3.1初始化博客"></a>3.1初始化博客</h3><p>&emsp;&emsp;在你想创建博客的文件夹下（我是想把博客放在D:\Program Files文件夹下），点击鼠标右键，选择Git Bash Here，即可进入Git Bash 。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410155030466.png" style="zoom:67%;" /><p>&emsp;&emsp;使用 Git Bash 输入，其中myBlog是你要保存的博客文件夹的名称：</p><pre><code>hexo init myBlog</code></pre><p>​    <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410155608097.png" style="zoom: 80%;" /></p><p>&emsp;&emsp;接下来，进入文件夹 <code>myBlog</code>,然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p><pre><code>hexo generate</code></pre><p>&emsp;&emsp;可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p><p>&emsp;&emsp;然后我们利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p><pre><code>hexo serve</code></pre><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410155704384.png" style="zoom:80%;" /><p>&emsp;&emsp;然后，打开浏览器输入地址：</p><pre><code>localhost:4000</code></pre><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160053650.png" style="zoom: 80%;" /><p>&emsp;&emsp;执行到这里事实上博客就已经搭建好了，接下来就是去完善它。</p><p><strong>&emsp;！！！注意：下面的命令都是在 <code>myBlog</code>文件里进行操作的。</strong></p><h3 id="3-2-部署"><a href="#3-2-部署" class="headerlink" title="3.2 部署"></a>3.2 部署</h3><p>&emsp;&emsp;接下来我们来将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p><p>&emsp;&emsp;那么怎么把这个页面部署到 GitHub Pages 上面呢，其实 Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p><p>&emsp;&emsp;在部署之前，我们需要先知道博客的部署地址，它需要对应 GitHub 的一个 Repository 的地址，这个信息需要我们来配置一下。</p><p>&emsp;&emsp;打开myBlog文件夹下的 _config.yml 文件，找到 Deployment 这个地方：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>&emsp;&emsp;把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:/{user}/{repository}.git  branch: master</code></pre><p>&emsp;&emsp;<strong>请注意，这里的仓库地址如果写成：<code>https://github.com/{user}/{repository}.git</code>可能会在后边的部署时无法成功，需要将<code>https://github.com</code>改成<code>git@github.com:</code>。</strong></p><p>&emsp;&emsp;我的就修改为如下内容：</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410162701389.png" style="zoom:80%;" /><p>&emsp;&emsp;另外我们还需要额外安装一个支持 Git 的部署插件，名字叫做 hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报错。</p><p>&emsp;&emsp;安装这个插件，在myBlog文件夹下执行安装命令如下：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>&emsp;&emsp;安装成功之后，执行部署命令：</p><pre><code>hexo deploy</code></pre><p>&emsp;&emsp;运行结果类似如下：</p><pre><code>INFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...On branch masternothing to commit, working directory cleanCounting objects: 46, done.Delta compression using up to 8 threads.Compressing objects: 100% (36/36), done.Writing objects: 100% (46/46), 507.66 KiB | 0 bytes/s, done.Total 46 (delta 3), reused 0 (delta 0)remote: Resolving deltas: 100% (3/3), done.To git@github.com:NightTeam/nightteam.github.io.git * [new branch]      HEAD -&gt; masterBranch master set up to track remote branch master from git@github.com:NightTeam/nightteam.github.io.git.INFO  Deploy done: git</code></pre><p>&emsp;&emsp;如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了。</p><p>&emsp;&emsp;通过如下图所示的Settings 进入该仓库的设置页面，找到 Github Pages 这一项，选择以 Master 分支作为 source，然后保存；接下来这个仓库就会被部署到 https://{username}.github.io/{仓库名}。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410163524556.png" style="zoom:80%;" /><p>&emsp;&emsp;如果你希望直接通过 https://{username}.github.io/ 来访问你的博客，可以将仓库名改为 {username}.github.io；这样就不需要在url后边添加上仓库名来访问了。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410163835119.png" style="zoom:80%;" /><p>&emsp;&emsp;比如，我GitHub的usename是jiesheng88，Repository 名称取的是 jiesheng88.github.io，那我就访问 <a href="http://jiesheng88.github.io，" target="_blank" rel="noopener">http://jiesheng88.github.io，</a></p><p>&emsp;&emsp;这时候就可以看到跟本地一模一样的博客内容了（下面是加了主题的）。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410164144550.png" style="zoom:80%;" /><p>&emsp;&emsp;GitHub 的 master 分支实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</p><p>&emsp;&emsp;如果我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 source 分支，代表博客源码的意思。</p><p>&emsp;&emsp;具体的添加过程就很简单了，在Git Bash里逐条添加如下命令：</p><pre><code>git initgit checkout -b sourcegit add -Agit commit -m &quot;init blog&quot;git remote add origin git@github.com:{username}/{username}.github.io.gitgit push origin source</code></pre><p>&emsp;&emsp;成功之后，可以到 GitHub 上再切换下默认分支，比如我就把默认的分支设置为了 source，当然不换也可以。</p><h3 id="3-3-更换Hexo博客主题"><a href="#3-3-更换Hexo博客主题" class="headerlink" title="3.3 更换Hexo博客主题"></a>3.3 更换Hexo博客主题</h3><p>&emsp;&emsp;hexo 默认的主题可能显得有点呆板，你可以在 <a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">https://hexo.io/themes/index.html</a>&emsp;&emsp;</p><p>&emsp;&emsp;进行主题的挑选更换。将下好的主题安放在<code>themes</code>文件夹内，同时在<code>_config.yml</code>中进行主题修改就好了。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410165053440.png" style="zoom:80%;" /><p>&emsp;&emsp;我选择了<code>hexo-theme-matery</code> 这款主题。具体配置过程，看下面文档说明。</p><p>&emsp;&emsp;Hexo博客主题之hexo-theme-matery的介绍：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-24</a></p><p>&emsp;&emsp;一般大佬们提供的主题都会提供文档说明，按照说明进行简单的设置就能拥有一个酷炫的页面了。</p><h3 id="3-4-添加文章"><a href="#3-4-添加文章" class="headerlink" title="3.4 添加文章"></a>3.4 添加文章</h3><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160327894.png" style="zoom:80%;" /><h4 id="3-4-1-直接导入文章"><a href="#3-4-1-直接导入文章" class="headerlink" title="3.4.1 直接导入文章"></a>3.4.1 直接导入文章</h4><p>&emsp;&emsp;你可以将你平时写的文章直接导入到 <code>_posts</code> 文件夹里，注意文章类型得是 <code>md</code>格式。</p><p>&emsp;&emsp;<strong>！！在文章开头通过如下格式添加必要信息：</strong></p><pre><code>---title: 标题 # 自动创建，如 hello-worlddate: 日期 # 自动创建，如 2019-09-22 01:47:21tags: - 标签1- 标签2- 标签3categories:- 分类1- 分类2---</code></pre><h4 id="3-4-2-写新文章"><a href="#3-4-2-写新文章" class="headerlink" title="3.4.2 写新文章"></a>3.4.2 写新文章</h4><p>&emsp;&emsp;你可以执行下列命令来创建一篇新文章。</p><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>&emsp;&emsp;你可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160641123.png" style="zoom:80%;" /><p>&emsp;&emsp;这样在 <code>_posts</code> 文件夹里也生成了一篇新的文章。</p><img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410160701789.png" style="zoom:80%;" /><h4 id="3-4-3-Markdown-写作"><a href="#3-4-3-Markdown-写作" class="headerlink" title="3.4.3 Markdown 写作"></a>3.4.3 Markdown 写作</h4><p>&emsp;&emsp;Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>&emsp;&emsp;这里推荐 Typora 这款 Markdown 写作软件。Typora 是一款免费的 MD 编辑器，它是优雅简洁与强大开放的完美结合体。官网直达 <a href="https://typora.io" target="_blank" rel="noopener">https://typora.io</a></p><h4 id="3-4-4-Typora-插入图片"><a href="#3-4-4-Typora-插入图片" class="headerlink" title="3.4.4 Typora 插入图片"></a>3.4.4 Typora 插入图片</h4><p>&emsp;&emsp;事先声明，所有博客文件均保存在 <code>/source/_posts</code>文件夹下</p><p>&emsp;&emsp;首先在 <code>source</code>目录下建一个文件夹叫images，用来保存博客中的图片</p><p>&emsp;&emsp;然后打开Typora的 <code>文件 &gt; 偏好设置</code>，进行如下设置。</p><p>​    <img src="/images/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/image-20200410213829004.png" alt="设置根目录"></p><p>&emsp;&emsp;这样的话所有的博客中的图片都将会保存到 <code>/source/images/该博客md文件名/图片名称</code></p><p>&emsp;&emsp;但是仅仅这样设置还不够，这样设置在typora中倒是能看图片了，但是使用的却是相对于当前md文件的相对路径，可是如果启动hexo，是要用服务器访问的，而服务器显然无法根据这个相对路径正确访问到图片，因此还需要在typora中进行进一步设置。</p><p>&emsp;&emsp;在typora菜单栏点击 <code>格式-&gt;图像-&gt;设置图片根目录</code>，将<code>myBlog/source</code>作为其根目录即可。</p><p>&emsp;&emsp;<strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确喔！</strong></p><h2 id="四、部署脚本"><a href="#四、部署脚本" class="headerlink" title="四、部署脚本"></a>四、部署脚本</h2><p>&emsp;&emsp;最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>&emsp;&emsp;这样我们在部署发布的时候只需要执行：</p><pre><code>sh deploy.sh</code></pre><p>&emsp;&emsp;就可以完成博客的更新了，非常简单。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/10/hello-world/"/>
      <url>/2020/04/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
